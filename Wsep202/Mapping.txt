ClassDiagram.Class>> Notification =>=>=> RelationalSchema.Table>> notification;
ClassDiagram.Class>> MangerStore =>=>=> RelationalSchema.Table>> mangerstore;
ClassDiagram.Class>> AppointingAgreement =>=>=> RelationalSchema.Table>> appointingagreement;
ClassDiagram.Class>> ProductDetailsPolicy =>=>=> RelationalSchema.Table>> productdetailspolicy;
ClassDiagram.Class>> ComposedPurchase =>=>=> RelationalSchema.Table>> composedpurchase;
ClassDiagram.Class>> PurchasePolicy =>=>=> RelationalSchema.Table>> purchasepolicy;
ClassDiagram.Class>> Purchase =>=>=> RelationalSchema.Table>> purchase;
ClassDiagram.Class>> SystemDetailsPolicy =>=>=> RelationalSchema.Table>> systemdetailspolicy;
ClassDiagram.Class>> ShoppingBagDetailsPolicy =>=>=> RelationalSchema.Table>> shoppingbagdetailspolicy;
ClassDiagram.Class>> UserDetailsPolicy =>=>=> RelationalSchema.Table>> userdetailspolicy;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Receipt =>=>=> RelationalSchema.Table>> receipt;
ClassDiagram.Class>> OwnersAppointee =>=>=> RelationalSchema.Table>> ownersappointee;
ClassDiagram.Class>> ShoppingCart =>=>=> RelationalSchema.Table>> shoppingcart;
ClassDiagram.Class>> DailyVisitor =>=>=> RelationalSchema.Table>> dailyvisitor;
ClassDiagram.Class>> ShoppingBag =>=>=> RelationalSchema.Table>> shoppingbag;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> ConditionalStoreDiscount =>=>=> RelationalSchema.Table>> conditionalstorediscount;
ClassDiagram.Class>> ComposedDiscount =>=>=> RelationalSchema.Table>> composeddiscount;
ClassDiagram.Class>> DiscountPolicy =>=>=> RelationalSchema.Table>> discountpolicy;
ClassDiagram.Class>> Discount =>=>=> RelationalSchema.Table>> discount;
ClassDiagram.Class>> VisibleDiscount =>=>=> RelationalSchema.Table>> visiblediscount;
ClassDiagram.Class>> ConditionalProductDiscount =>=>=> RelationalSchema.Table>> conditionalproductdiscount;
ClassDiagram.Class>> UserSystem =>=>=> RelationalSchema.Table>> usersystem;
ClassDiagram.Class>> ManagersAppointee =>=>=> RelationalSchema.Table>> managersappointee;
ClassDiagram.Class>> OwnerToApprove =>=>=> RelationalSchema.Table>> ownertoapprove;
ClassDiagram.Attribut>> Notification.id:long =>=>=> RelationalSchema.Column>> notification.id PRIMARY KEY;
ClassDiagram.Attribut>> Notification./***thecontextofthenotification*/content:String =>=>=> RelationalSchema.Column>> notification./***thecontextofthenotification*/content;
ClassDiagram.Attribut>> Notification./***theusername*/principal:String =>=>=> RelationalSchema.Column>> notification./***theusername*/principal;
ClassDiagram.Attribut>> MangerStore.id:int =>=>=> RelationalSchema.Column>> mangerstore.id PRIMARY KEY;
ClassDiagram.Attribut>> MangerStore./***thepermissionsthatweregiventothemanager*/storepermissions:Set<StorePermission> =>=>=> RelationalSchema.Column>> mangerstore./***thepermissionsthatweregiventothemanager*/storepermissions;
ClassDiagram.Attribut>> AppointingAgreement.appoingagreementnumber:int =>=>=> RelationalSchema.Column>> appointingagreement.appoingagreementnumber PRIMARY KEY;
ClassDiagram.Attribut>> AppointingAgreement.appointee:String =>=>=> RelationalSchema.Column>> appointingagreement.appointee;
ClassDiagram.Attribut>> AppointingAgreement.ownersandapproval:Map<String,StatusOwner> =>=>=> RelationalSchema.Column>> appointingagreement.ownersandapproval;
ClassDiagram.Attribut>> ProductDetailsPolicy./***thevalidrangeofamountofproductstobuyinapurchase*inshoppingbagdetailsitistheamountofdifferentitems*inproductdetailsitistheamountofitemsfromaspecificoneproduct*/min:int =>=>=> RelationalSchema.Column>> productdetailspolicy./***thevalidrangeofamountofproductstobuyinapurchase*inshoppingbagdetailsitistheamountofdifferentitems*inproductdetailsitistheamountofitemsfromaspecificoneproduct*/min;
ClassDiagram.Attribut>> ProductDetailsPolicy.max:int =>=>=> RelationalSchema.Column>> productdetailspolicy.max;
ClassDiagram.Attribut>> ProductDetailsPolicy./***thesnofproductwhichhaslimitationsamounts*/productid:int =>=>=> RelationalSchema.Column>> productdetailspolicy./***thesnofproductwhichhaslimitationsamounts*/productid;
ClassDiagram.Attribut>> ComposedPurchase./***logicaloperatorbetweenpolicies*/:CompositeOperator =>=>=> RelationalSchema.Column>> composedpurchase./***logicaloperatorbetweenpolicies*/;
ClassDiagram.Attribut>> PurchasePolicy.id:long =>=>=> RelationalSchema.Column>> purchasepolicy.id PRIMARY KEY;
ClassDiagram.Attribut>> Purchase./***uniqueidofthepurchasepolicyinthestore*/purchaseid:long =>=>=> RelationalSchema.Column>> purchase./***uniqueidofthepurchasepolicyinthestore*/purchaseid PRIMARY KEY;
ClassDiagram.Attribut>> Purchase./***thetypeofpolicy*/:PurchaseType =>=>=> RelationalSchema.Column>> purchase./***thetypeofpolicy*/;
ClassDiagram.Attribut>> Purchase./***describestheverbaldescriptionofthepolicy*/description:String =>=>=> RelationalSchema.Column>> purchase./***describestheverbaldescriptionofthepolicy*/description;
ClassDiagram.Attribut>> SystemDetailsPolicy./***thedaysintheweekanyuserispermittedtoperformapurchase*/storeworkdays:Set<Day> =>=>=> RelationalSchema.Column>> systemdetailspolicy./***thedaysintheweekanyuserispermittedtoperformapurchase*/storeworkdays;
ClassDiagram.Attribut>> ShoppingBagDetailsPolicy.min:int =>=>=> RelationalSchema.Column>> shoppingbagdetailspolicy.min;
ClassDiagram.Attribut>> ShoppingBagDetailsPolicy.max:int =>=>=> RelationalSchema.Column>> shoppingbagdetailspolicy.max;
ClassDiagram.Attribut>> UserDetailsPolicy./***listofcountriesthatthestorehavedeliveriesto*/countriespermitted:Set<String> =>=>=> RelationalSchema.Column>> userdetailspolicy./***listofcountriesthatthestorehavedeliveriesto*/countriespermitted;
ClassDiagram.Attribut>> Store.stocklock:Object =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Store.storeid:int =>=>=> RelationalSchema.Column>> store.storeid PRIMARY KEY;
ClassDiagram.Attribut>> Store.storename:String =>=>=> RelationalSchema.Column>> store.storename;
ClassDiagram.Attribut>> Store./***thestorerank*/rank:int =>=>=> RelationalSchema.Column>> store./***thestorerank*/rank;
ClassDiagram.Attribut>> Store./***description*/description:String =>=>=> RelationalSchema.Column>> store./***description*/description;
ClassDiagram.Attribut>> Receipt.receiptsn:int =>=>=> RelationalSchema.Column>> receipt.receiptsn PRIMARY KEY;
ClassDiagram.Attribut>> Receipt./***thestoreidthatconnectedtothestoreinwhichthepurchasehappened.*/storeid:int =>=>=> RelationalSchema.Column>> receipt./***thestoreidthatconnectedtothestoreinwhichthepurchasehappened.*/storeid;
ClassDiagram.Attribut>> Receipt./***theusernamewhoperformthispurchaseoraguest*/username:String =>=>=> RelationalSchema.Column>> receipt./***theusernamewhoperformthispurchaseoraguest*/username;
ClassDiagram.Attribut>> Receipt./***thepurchase*/purchase:Date =>=>=> RelationalSchema.Column>> receipt./***thepurchase*/purchase;
ClassDiagram.Attribut>> Receipt./***thepricethattheuserhadtopayinthispurchase.*/amounttopay:double =>=>=> RelationalSchema.Column>> receipt./***thepricethattheuserhadtopayinthispurchase.*/amounttopay;
ClassDiagram.Attribut>> Receipt./***transactionswithexternalsystemsidentifiers*/paytransid:String =>=>=> RelationalSchema.Column>> receipt./***transactionswithexternalsystemsidentifiers*/paytransid;
ClassDiagram.Attribut>> Receipt.supplytransid:String =>=>=> RelationalSchema.Column>> receipt.supplytransid;
ClassDiagram.Attribut>> Receipt.productsbought:Map<Product,Integer> =>=>=> RelationalSchema.Column>> receipt.productsbought;
ClassDiagram.Attribut>> OwnersAppointee.id:long =>=>=> RelationalSchema.Column>> ownersappointee.id PRIMARY KEY;
ClassDiagram.Attribut>> ShoppingCart.id:int =>=>=> RelationalSchema.Column>> shoppingcart.id PRIMARY KEY;
ClassDiagram.Attribut>> DailyVisitor.GeneratedName:Date =>=>=> RelationalSchema.Column>> dailyvisitor.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> DailyVisitor.guests:long =>=>=> RelationalSchema.Column>> dailyvisitor.guests;
ClassDiagram.Attribut>> DailyVisitor.ownerstores:long =>=>=> RelationalSchema.Column>> dailyvisitor.ownerstores;
ClassDiagram.Attribut>> DailyVisitor.managerstores:long =>=>=> RelationalSchema.Column>> dailyvisitor.managerstores;
ClassDiagram.Attribut>> DailyVisitor.simpleuser:long =>=>=> RelationalSchema.Column>> dailyvisitor.simpleuser;
ClassDiagram.Attribut>> DailyVisitor.admins:long =>=>=> RelationalSchema.Column>> dailyvisitor.admins;
ClassDiagram.Attribut>> ShoppingBag.id:int =>=>=> RelationalSchema.Column>> shoppingbag.id PRIMARY KEY;
ClassDiagram.Attribut>> ShoppingBag.productlistfromstore:Map<Product,Integer> =>=>=> RelationalSchema.Column>> shoppingbag.productlistfromstore;
ClassDiagram.Attribut>> Product./***theproductserialnumber*/productsn:int =>=>=> RelationalSchema.Column>> product./***theproductserialnumber*/productsn PRIMARY KEY;
ClassDiagram.Attribut>> Product./***thenameoftheproduct*/name:String =>=>=> RelationalSchema.Column>> product./***thenameoftheproduct*/name;
ClassDiagram.Attribut>> Product./***thecategoryoftheproduct*/category:ProductCategory =>=>=> RelationalSchema.Column>> product./***thecategoryoftheproduct*/category;
ClassDiagram.Attribut>> Product./***theamountofthisproductinthestore(:int =>=>=> RelationalSchema.Column>> product./***theamountofthisproductinthestore(;
ClassDiagram.Attribut>> Product./***thecostofthisproduct*/cost:double =>=>=> RelationalSchema.Column>> product./***thecostofthisproduct*/cost;
ClassDiagram.Attribut>> Product./***theoriginalpriceofthisproductbeforediscountifappliedone*/originalcost:double =>=>=> RelationalSchema.Column>> product./***theoriginalpriceofthisproductbeforediscountifappliedone*/originalcost;
ClassDiagram.Attribut>> Product./***therankofthisproduct*/rank:int =>=>=> RelationalSchema.Column>> product./***therankofthisproduct*/rank;
ClassDiagram.Attribut>> Product./***thestoreidthatconnectedtothestorethattheproductexistsinit.*/storeid:int =>=>=> RelationalSchema.Column>> product./***thestoreidthatconnectedtothestorethattheproductexistsinit.*/storeid;
ClassDiagram.Attribut>> ConditionalStoreDiscount./***theminimalpriceofpurchasetoapplythediscountfrom*/minprice:double =>=>=> RelationalSchema.Column>> conditionalstorediscount./***theminimalpriceofpurchasetoapplythediscountfrom*/minprice;
ClassDiagram.Attribut>> ComposedDiscount.amountofproductsforapplydiscounts:Map<Product,Integer> =>=>=> RelationalSchema.Column>> composeddiscount.amountofproductsforapplydiscounts;
ClassDiagram.Attribut>> ComposedDiscount.productsunderthisdiscount:Map<Product,Integer> =>=>=> RelationalSchema.Column>> composeddiscount.productsunderthisdiscount;
ClassDiagram.Attribut>> ComposedDiscount./***theoperationbetweentheconditionalsdiscounts*/:CompositeOperator =>=>=> RelationalSchema.Column>> composeddiscount./***theoperationbetweentheconditionalsdiscounts*/;
ClassDiagram.Attribut>> DiscountPolicy.id:long =>=>=> RelationalSchema.Column>> discountpolicy.id PRIMARY KEY;
ClassDiagram.Attribut>> Discount.discountid:long =>=>=> RelationalSchema.Column>> discount.discountid PRIMARY KEY;
ClassDiagram.Attribut>> Discount./***howmuchdiscountshouldtoapplyonproduct*/discountpercentage:double =>=>=> RelationalSchema.Column>> discount./***howmuchdiscountshouldtoapplyonproduct*/discountpercentage;
ClassDiagram.Attribut>> Discount./***theproductvalidationdate*/endtime:Calendar =>=>=> RelationalSchema.Column>> discount./***theproductvalidationdate*/endtime;
ClassDiagram.Attribut>> Discount./***describestheconditionandthepostofthespecifieddiscount*/description:String =>=>=> RelationalSchema.Column>> discount./***describestheconditionandthepostofthespecifieddiscount*/description;
ClassDiagram.Attribut>> Discount.isapplied:boolean =>=>=> RelationalSchema.Column>> discount.isapplied;
ClassDiagram.Attribut>> Discount.GeneratedName:DiscountType =>=>=> RelationalSchema.Column>> discount.GeneratedName;
ClassDiagram.Attribut>> VisibleDiscount.amountofproductsforapplydiscounts:Map<Product,Integer> =>=>=> RelationalSchema.Column>> visiblediscount.amountofproductsforapplydiscounts;
ClassDiagram.Attribut>> ConditionalProductDiscount.productsunderthisdiscount:Map<Product,Integer> =>=>=> RelationalSchema.Column>> conditionalproductdiscount.productsunderthisdiscount;
ClassDiagram.Attribut>> ConditionalProductDiscount.productsapplydiscounts:Map<Product,Integer> =>=>=> RelationalSchema.Column>> conditionalproductdiscount.productsapplydiscounts;
ClassDiagram.Attribut>> UserSystem./***theusername*/username:String =>=>=> RelationalSchema.Column>> usersystem./***theusername*/username PRIMARY KEY;
ClassDiagram.Attribut>> UserSystem./***theencryptionpasswordofthetheuser*/password:String =>=>=> RelationalSchema.Column>> usersystem./***theencryptionpasswordofthetheuser*/password;
ClassDiagram.Attribut>> UserSystem./***thesaltweusetohashthepasswordfortheuser*/salt:String =>=>=> RelationalSchema.Column>> usersystem./***thesaltweusetohashthepasswordfortheuser*/salt;
ClassDiagram.Attribut>> UserSystem./***thefirstnameoftheuser*/firstname:String =>=>=> RelationalSchema.Column>> usersystem./***thefirstnameoftheuser*/firstname;
ClassDiagram.Attribut>> UserSystem./***thelastnameoftheuser*/lastname:String =>=>=> RelationalSchema.Column>> usersystem./***thelastnameoftheuser*/lastname;
ClassDiagram.Attribut>> UserSystem.principal:String =>=>=> RelationalSchema.Column>> usersystem.principal;
ClassDiagram.Attribut>> UserSystem.isadmin:boolean =>=>=> RelationalSchema.Column>> usersystem.isadmin;
ClassDiagram.Attribut>> UserSystem.imageurl:String =>=>=> RelationalSchema.Column>> usersystem.imageurl;
ClassDiagram.Attribut>> UserSystem./***forhttps*/grantedauthorities:Set<GrantedAuthority> =>=>=> RelationalSchema.Column>> usersystem./***forhttps*/grantedauthorities;
ClassDiagram.Attribut>> ManagersAppointee.id:long =>=>=> RelationalSchema.Column>> managersappointee.id PRIMARY KEY;
ClassDiagram.Attribut>> ManagersAppointee.appointeeuser:String =>=>=> RelationalSchema.Column>> managersappointee.appointeeuser;
ClassDiagram.Attribut>> OwnerToApprove.storeid:int =>=>=> RelationalSchema.Column>> ownertoapprove.storeid PRIMARY KEY;
ClassDiagram.Attribut>> OwnerToApprove.storename:String =>=>=> RelationalSchema.Column>> ownertoapprove.storename;
ClassDiagram.Attribut>> OwnerToApprove.usernametoapprove:String =>=>=> RelationalSchema.Column>> ownertoapprove.usernametoapprove PRIMARY KEY;
One-To-One relationship between ClassDiagram.Class>>MangerStore  to ClassDiagram.Class>>usersystem represented by ClassDiagram.Atrribute>>/***theactualuserthatappointedtobemanager*/appointedmanager;
One-To-One relationship between ClassDiagram.Class>>AppointingAgreement  to ClassDiagram.Class>>usersystem represented by ClassDiagram.Atrribute>>newowner;
One-To-Many relationship from ClassDiagram.Class>>ComposedPurchase  to ClassDiagram.Class>>List<Purchase>;
One-To-One relationship between ClassDiagram.Class>>Purchase  to ClassDiagram.Class>>purchasepolicy represented by ClassDiagram.Atrribute>>/***theactualtypeofpurchasepolicy*/;
set<ownersappointee>: store_set<ownersappointee>(storeID:store [PK] #FK to store,set<ownersappointee>ID:set<ownersappointee> [PK] #FK to set<ownersappointee>);
set<managersappointee>: store_set<ownersappointee>(storeID:store [PK] #FK to store,set<ownersappointee>ID:set<ownersappointee> [PK] #FK to set<ownersappointee>);store_set<managersappointee>(storeID:store [PK] #FK to store,set<managersappointee>ID:set<managersappointee> [PK] #FK to set<managersappointee>);
One-To-Many relationship from ClassDiagram.Class>>Store  to ClassDiagram.Class>>Set<Product>;
One-To-Many relationship from ClassDiagram.Class>>Store  to ClassDiagram.Class>>Set<Purchase>;
One-To-Many relationship from ClassDiagram.Class>>Store  to ClassDiagram.Class>>Set<Discount>;
One-To-Many relationship from ClassDiagram.Class>>Store  to ClassDiagram.Class>>Set<Receipt>;
One-To-Many relationship from ClassDiagram.Class>>Store  to ClassDiagram.Class>>Set<AppointingAgreement>;
One-To-One relationship between ClassDiagram.Class>>OwnersAppointee  to ClassDiagram.Class>>usersystem represented by ClassDiagram.Atrribute>>appointeeuser;
One-To-Many relationship from ClassDiagram.Class>>OwnersAppointee  to ClassDiagram.Class>>Set<UserSystem>;
One-To-Many relationship from ClassDiagram.Class>>ShoppingCart  to ClassDiagram.Class>>Map<Store,ShoppingBag>;
One-To-Many relationship from ClassDiagram.Class>>ComposedDiscount  to ClassDiagram.Class>>List<Discount>;
One-To-One relationship between ClassDiagram.Class>>Discount  to ClassDiagram.Class>>discountpolicy represented by ClassDiagram.Atrribute>>/***typesofdiscountsinthestore*/;
set<store>: usersystem_set<store>(usersystemID:usersystem [PK] #FK to usersystem,set<store>ID:set<store> [PK] #FK to set<store>);
set<store>: usersystem_set<store>(usersystemID:usersystem [PK] #FK to usersystem,set<store>ID:set<store> [PK] #FK to set<store>);usersystem_set<store>(usersystemID:usersystem [PK] #FK to usersystem,set<store>ID:set<store> [PK] #FK to set<store>);
One-To-One relationship between ClassDiagram.Class>>UserSystem  to ClassDiagram.Class>>shoppingcart represented by ClassDiagram.Atrribute>>/***theuserpersonalshoppingcart*/;
One-To-Many relationship from ClassDiagram.Class>>UserSystem  to ClassDiagram.Class>>Set<Receipt>;
One-To-Many relationship from ClassDiagram.Class>>UserSystem  to ClassDiagram.Class>>Set<Notification>;
One-To-Many relationship from ClassDiagram.Class>>UserSystem  to ClassDiagram.Class>>Set<OwnerToApprove>;
One-To-Many relationship from ClassDiagram.Class>>ManagersAppointee  to ClassDiagram.Class>>Set<MangerStore>;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>PurchasePolicy  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>DiscountPolicy  ;
