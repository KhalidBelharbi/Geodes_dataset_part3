ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> ManyTag =>=>=> RelationalSchema.Table>> manytag;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> ManyStudent =>=>=> RelationalSchema.Table>> manystudent;
ClassDiagram.Class>> Country =>=>=> RelationalSchema.Table>> country;
ClassDiagram.Class>> CourseRating =>=>=> RelationalSchema.Table>> courserating;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Course =>=>=> RelationalSchema.Table>> course;
ClassDiagram.Class>> CourseRegistration =>=>=> RelationalSchema.Table>> courseregistration;
ClassDiagram.Class>> Possession =>=>=> RelationalSchema.Table>> possession;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Foo =>=>=> RelationalSchema.Table>> foo;
ClassDiagram.Class>> Bar =>=>=> RelationalSchema.Table>> bar;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.age:int =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Person.creator:User =>=>=> RelationalSchema.Column>> person.creator;
ClassDiagram.Attribut>> Person.modifier:User =>=>=> RelationalSchema.Column>> person.modifier;
ClassDiagram.Attribut>> Person.createdat:Date =>=>=> RelationalSchema.Column>> person.createdat;
ClassDiagram.Attribut>> Person.modifiedat:Date =>=>=> RelationalSchema.Column>> person.modifiedat;
ClassDiagram.Attribut>> ManyTag.id:int =>=>=> RelationalSchema.Column>> manytag.id PRIMARY KEY;
ClassDiagram.Attribut>> ManyTag.name:String =>=>=> RelationalSchema.Column>> manytag.name;
ClassDiagram.Attribut>> Student.id:long =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Student.tags:List<String> =>=>=> RelationalSchema.Column>> student.tags;
ClassDiagram.Attribut>> Student.skilltags:List<SkillTag> =>=>=> RelationalSchema.Column>> student.skilltags;
ClassDiagram.Attribut>> Student.kvtags:List<KVTag> =>=>=> RelationalSchema.Column>> student.kvtags;
ClassDiagram.Attribut>> ManyStudent.id:int =>=>=> RelationalSchema.Column>> manystudent.id PRIMARY KEY;
ClassDiagram.Attribut>> ManyStudent.name:String =>=>=> RelationalSchema.Column>> manystudent.name;
ClassDiagram.Attribut>> Country.id:Integer =>=>=> RelationalSchema.Column>> country.id PRIMARY KEY;
ClassDiagram.Attribut>> Country.name:String =>=>=> RelationalSchema.Column>> country.name;
ClassDiagram.Attribut>> CourseRating.id:CourseRatingKey =>=>=> RelationalSchema.Column>> courserating.id;
ClassDiagram.Attribut>> CourseRating.rating:int =>=>=> RelationalSchema.Column>> courserating.rating;
ClassDiagram.Attribut>> Student.id:Long =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Course.id:Long =>=>=> RelationalSchema.Column>> course.id PRIMARY KEY;
ClassDiagram.Attribut>> CourseRegistration.id:Long =>=>=> RelationalSchema.Column>> courseregistration.id PRIMARY KEY;
ClassDiagram.Attribut>> CourseRegistration.registeredat:LocalDateTime =>=>=> RelationalSchema.Column>> courseregistration.registeredat;
ClassDiagram.Attribut>> CourseRegistration.grade:int =>=>=> RelationalSchema.Column>> courseregistration.grade;
ClassDiagram.Attribut>> Possession.id:long =>=>=> RelationalSchema.Column>> possession.id PRIMARY KEY;
ClassDiagram.Attribut>> Possession.name:String =>=>=> RelationalSchema.Column>> possession.name;
ClassDiagram.Attribut>> User.id:int =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.age:int =>=>=> RelationalSchema.Column>> user.age;
ClassDiagram.Attribut>> Foo.serialversionuid:long =>=>=> RelationalSchema.Column>> foo.serialversionuid;
ClassDiagram.Attribut>> Foo.id:Long =>=>=> RelationalSchema.Column>> foo.id PRIMARY KEY;
ClassDiagram.Attribut>> Foo.name:String =>=>=> RelationalSchema.Column>> foo.name;
ClassDiagram.Attribut>> Bar.serialversionuid:long =>=>=> RelationalSchema.Column>> bar.serialversionuid;
ClassDiagram.Attribut>> Bar.id:long =>=>=> RelationalSchema.Column>> bar.id PRIMARY KEY;
ClassDiagram.Attribut>> Bar.name:String =>=>=> RelationalSchema.Column>> bar.name;
ClassDiagram.Attribut>> Book.id:Long =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.title:String =>=>=> RelationalSchema.Column>> book.title;
ClassDiagram.Attribut>> Book.author:String =>=>=> RelationalSchema.Column>> book.author;
Many-To-Many relationship between ClassDiagram.Class>>ManyStudent  and ClassDiagram.Class>>set<manytag>: manystudent_manytags(manystudent_id:ManyStudent [PK] #FK to ManyStudent,manytag_id:set<manytag> [PK] #FK to set<manytag>);
Many-To-One relationship from ClassDiagram.Class>>CourseRating  to ClassDiagram.Class>>student represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CourseRating  to ClassDiagram.Class>>course represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Student  and ClassDiagram.Class>>set<course>: course_like(student_id:Student [PK] #FK to Student,course_id:set<course> [PK] #FK to set<course>);
One-To-Many relationship from ClassDiagram.Class>>Student  to ClassDiagram.Class>>Set<CourseRating>;
One-To-Many relationship from ClassDiagram.Class>>Student  to ClassDiagram.Class>>Set<CourseRegistration>;
One-To-Many relationship from ClassDiagram.Class>>Course  to ClassDiagram.Class>>Set<CourseRating>;
One-To-Many relationship from ClassDiagram.Class>>Course  to ClassDiagram.Class>>Set<CourseRegistration>;
Many-To-One relationship from ClassDiagram.Class>>CourseRegistration  to ClassDiagram.Class>>student represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CourseRegistration  to ClassDiagram.Class>>course represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Possession>;
Many-To-One relationship from ClassDiagram.Class>>Foo  to ClassDiagram.Class>>bar represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Bar  to ClassDiagram.Class>>List<Foo>;
