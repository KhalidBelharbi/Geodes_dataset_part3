ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> FootballPlayer =>=>=> RelationalSchema.Table>> footballplayer;
ClassDiagram.Class>> OrderEntry =>=>=> RelationalSchema.Table>> orderentry;
ClassDiagram.Class>> PointEntity =>=>=> RelationalSchema.Table>> pointentity;
ClassDiagram.Class>> PolygonEntity =>=>=> RelationalSchema.Table>> polygonentity;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> OrderEntryIdClass =>=>=> RelationalSchema.Table>> orderentryidclass;
ClassDiagram.Class>> UserProfile =>=>=> RelationalSchema.Table>> userprofile;
ClassDiagram.Class>> EntityDescription =>=>=> RelationalSchema.Table>> entitydescription;
ClassDiagram.Class>> Post =>=>=> RelationalSchema.Table>> post;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Course =>=>=> RelationalSchema.Table>> course;
ClassDiagram.Class>> Movie =>=>=> RelationalSchema.Table>> movie;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> TemporalValues =>=>=> RelationalSchema.Table>> temporalvalues;
ClassDiagram.Class>> Pet =>=>=> RelationalSchema.Table>> pet;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> MyProduct =>=>=> RelationalSchema.Table>> myproduct;
ClassDiagram.Class>> Pen =>=>=> RelationalSchema.Table>> pen;
ClassDiagram.Class>> MyEmployee =>=>=> RelationalSchema.Table>> myemployee;
ClassDiagram.Class>> Vehicle =>=>=> RelationalSchema.Table>> vehicle;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Bag =>=>=> RelationalSchema.Table>> bag;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> OfficeEmployee =>=>=> RelationalSchema.Table>> officeemployee;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> OfficialEmployee =>=>=> RelationalSchema.Table>> officialemployee;
ClassDiagram.Class>> Email =>=>=> RelationalSchema.Table>> email;
ClassDiagram.Class>> OfficeAddress =>=>=> RelationalSchema.Table>> officeaddress;
ClassDiagram.Class>> Office =>=>=> RelationalSchema.Table>> office;
ClassDiagram.Class>> EntityWithNoId =>=>=> RelationalSchema.Table>> entitywithnoid;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> DeptEmployee =>=>=> RelationalSchema.Table>> deptemployee;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> WorkStation =>=>=> RelationalSchema.Table>> workstation;
ClassDiagram.Class>> PessimisticLockingEmployee =>=>=> RelationalSchema.Table>> pessimisticlockingemployee;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> PessimisticLockingStudent =>=>=> RelationalSchema.Table>> pessimisticlockingstudent;
ClassDiagram.Class>> PessimisticLockingCourse =>=>=> RelationalSchema.Table>> pessimisticlockingcourse;
ClassDiagram.Class>> Individual =>=>=> RelationalSchema.Table>> individual;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> OptimisticLockingCourse =>=>=> RelationalSchema.Table>> optimisticlockingcourse;
ClassDiagram.Class>> OptimisticLockingStudent =>=>=> RelationalSchema.Table>> optimisticlockingstudent;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Attribut>> Car.serialversionuid:long =>=>=> RelationalSchema.Column>> car.serialversionuid;
ClassDiagram.Attribut>> Car.brand:String =>=>=> RelationalSchema.Column>> car.brand PRIMARY KEY;
ClassDiagram.Attribut>> FootballPlayer.id:long =>=>=> RelationalSchema.Column>> footballplayer.id PRIMARY KEY;
ClassDiagram.Attribut>> FootballPlayer.name:String =>=>=> RelationalSchema.Column>> footballplayer.name;
ClassDiagram.Attribut>> OrderEntry.entryid:OrderEntryPK =>=>=> RelationalSchema.Column>> orderentry.entryid;
ClassDiagram.Attribut>> PointEntity.id:Long =>=>=> RelationalSchema.Column>> pointentity.id PRIMARY KEY;
ClassDiagram.Attribut>> PointEntity.GeneratedName:Point =>=>=> RelationalSchema.Column>> pointentity.GeneratedName;
ClassDiagram.Attribut>> PolygonEntity.id:Long =>=>=> RelationalSchema.Column>> polygonentity.id PRIMARY KEY;
ClassDiagram.Attribut>> PolygonEntity.GeneratedName:Polygon =>=>=> RelationalSchema.Column>> polygonentity.GeneratedName;
ClassDiagram.Attribut>> Product.prodid:String =>=>=> RelationalSchema.Column>> product.prodid PRIMARY KEY;
ClassDiagram.Attribut>> OrderEntryIdClass.orderid:long =>=>=> RelationalSchema.Column>> orderentryidclass.orderid PRIMARY KEY;
ClassDiagram.Attribut>> OrderEntryIdClass.productid:long =>=>=> RelationalSchema.Column>> orderentryidclass.productid PRIMARY KEY;
ClassDiagram.Attribut>> UserProfile.profileid:long =>=>=> RelationalSchema.Column>> userprofile.profileid PRIMARY KEY;
ClassDiagram.Attribut>> EntityDescription.id:Integer =>=>=> RelationalSchema.Column>> entitydescription.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityDescription.description:String =>=>=> RelationalSchema.Column>> entitydescription.description;
ClassDiagram.Attribut>> EntityDescription.entity:Serializable =>=>=> RelationalSchema.Column>> entitydescription.entity;
ClassDiagram.Attribut>> Post.id:int =>=>=> RelationalSchema.Column>> post.id PRIMARY KEY;
ClassDiagram.Attribut>> Post.title:String =>=>=> RelationalSchema.Column>> post.title;
ClassDiagram.Attribut>> Post.body:String =>=>=> RelationalSchema.Column>> post.body;
ClassDiagram.Attribut>> Student.studentid:long =>=>=> RelationalSchema.Column>> student.studentid PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Student.age:int =>=>=> RelationalSchema.Column>> student.age;
ClassDiagram.Attribut>> Course.courseid:UUID =>=>=> RelationalSchema.Column>> course.courseid PRIMARY KEY;
ClassDiagram.Attribut>> Movie.id:Long =>=>=> RelationalSchema.Column>> movie.id PRIMARY KEY;
ClassDiagram.Attribut>> Movie.moviename:String =>=>=> RelationalSchema.Column>> movie.moviename;
ClassDiagram.Attribut>> Movie.releaseyear:Integer =>=>=> RelationalSchema.Column>> movie.releaseyear;
ClassDiagram.Attribut>> Movie.language:String =>=>=> RelationalSchema.Column>> movie.language;
ClassDiagram.Attribut>> Employee.id:Integer =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.grossincome:long =>=>=> RelationalSchema.Column>> employee.grossincome;
ClassDiagram.Attribut>> Employee.taxinpercents:int =>=>=> RelationalSchema.Column>> employee.taxinpercents;
ClassDiagram.Attribut>> Employee.deleted:boolean =>=>=> RelationalSchema.Column>> employee.deleted;
ClassDiagram.Attribut>> Employee.tax:long =>=>=> RelationalSchema.Column>> employee.tax;
ClassDiagram.Attribut>> Department.depid:long =>=>=> RelationalSchema.Column>> department.depid PRIMARY KEY;
ClassDiagram.Attribut>> Phone.id:Integer =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.deleted:boolean =>=>=> RelationalSchema.Column>> phone.deleted;
ClassDiagram.Attribut>> Phone.number:String =>=>=> RelationalSchema.Column>> phone.number;
ClassDiagram.Attribut>> TemporalValues.id:long =>=>=> RelationalSchema.Column>> temporalvalues.id PRIMARY KEY;
ClassDiagram.Attribut>> TemporalValues.sqldate:java.sql.Date =>=>=> RelationalSchema.Column>> temporalvalues.sqldate;
ClassDiagram.Attribut>> TemporalValues.sqltime:java.sql.Time =>=>=> RelationalSchema.Column>> temporalvalues.sqltime;
ClassDiagram.Attribut>> TemporalValues.sqltimestamp:java.sql.Timestamp =>=>=> RelationalSchema.Column>> temporalvalues.sqltimestamp;
ClassDiagram.Attribut>> TemporalValues.utildate:java.util.Date =>=>=> RelationalSchema.Column>> temporalvalues.utildate;
ClassDiagram.Attribut>> TemporalValues.utiltime:java.util.Date =>=>=> RelationalSchema.Column>> temporalvalues.utiltime;
ClassDiagram.Attribut>> TemporalValues.utiltimestamp:java.util.Date =>=>=> RelationalSchema.Column>> temporalvalues.utiltimestamp;
ClassDiagram.Attribut>> TemporalValues.calendardate:java.util.Calendar =>=>=> RelationalSchema.Column>> temporalvalues.calendardate;
ClassDiagram.Attribut>> TemporalValues.calendartimestamp:java.util.Calendar =>=>=> RelationalSchema.Column>> temporalvalues.calendartimestamp;
ClassDiagram.Attribut>> TemporalValues.localdate:java.time.LocalDate =>=>=> RelationalSchema.Column>> temporalvalues.localdate;
ClassDiagram.Attribut>> TemporalValues.localtime:java.time.LocalTime =>=>=> RelationalSchema.Column>> temporalvalues.localtime;
ClassDiagram.Attribut>> TemporalValues.offsettime:java.time.OffsetTime =>=>=> RelationalSchema.Column>> temporalvalues.offsettime;
ClassDiagram.Attribut>> TemporalValues.instant:java.time.Instant =>=>=> RelationalSchema.Column>> temporalvalues.instant;
ClassDiagram.Attribut>> TemporalValues.localdatetime:java.time.LocalDateTime =>=>=> RelationalSchema.Column>> temporalvalues.localdatetime;
ClassDiagram.Attribut>> TemporalValues.offsetdatetime:java.time.OffsetDateTime =>=>=> RelationalSchema.Column>> temporalvalues.offsetdatetime;
ClassDiagram.Attribut>> TemporalValues.zoneddatetime:java.time.ZonedDateTime =>=>=> RelationalSchema.Column>> temporalvalues.zoneddatetime;
ClassDiagram.Attribut>> Pet.name:String =>=>=> RelationalSchema.Column>> pet.name;
ClassDiagram.Attribut>> Car.engine:String =>=>=> RelationalSchema.Column>> car.engine;
ClassDiagram.Attribut>> Animal.animalid:long =>=>=> RelationalSchema.Column>> animal.animalid PRIMARY KEY;
ClassDiagram.Attribut>> Animal.species:String =>=>=> RelationalSchema.Column>> animal.species;
ClassDiagram.Attribut>> MyProduct.productid:long =>=>=> RelationalSchema.Column>> myproduct.productid PRIMARY KEY;
ClassDiagram.Attribut>> MyProduct.name:String =>=>=> RelationalSchema.Column>> myproduct.name;
ClassDiagram.Attribut>> Pen.color:String =>=>=> RelationalSchema.Column>> pen.color;
ClassDiagram.Attribut>> MyEmployee.company:String =>=>=> RelationalSchema.Column>> myemployee.company;
ClassDiagram.Attribut>> Vehicle.vehicleid:long =>=>=> RelationalSchema.Column>> vehicle.vehicleid PRIMARY KEY;
ClassDiagram.Attribut>> Vehicle.manufacturer:String =>=>=> RelationalSchema.Column>> vehicle.manufacturer;
ClassDiagram.Attribut>> Book.author:String =>=>=> RelationalSchema.Column>> book.author;
ClassDiagram.Attribut>> Bag.bagid:long =>=>=> RelationalSchema.Column>> bag.bagid PRIMARY KEY;
ClassDiagram.Attribut>> Bag.type:String =>=>=> RelationalSchema.Column>> bag.type;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.GeneratedName:PersonName =>=>=> RelationalSchema.Column>> person.GeneratedName;
ClassDiagram.Attribut>> User.userid:long =>=>=> RelationalSchema.Column>> user.userid PRIMARY KEY;
ClassDiagram.Attribut>> OfficeEmployee.id:long =>=>=> RelationalSchema.Column>> officeemployee.id PRIMARY KEY;
ClassDiagram.Attribut>> OfficeEmployee.dateofjoining:LocalDate =>=>=> RelationalSchema.Column>> officeemployee.dateofjoining;
ClassDiagram.Attribut>> OfficeEmployee.employeenumber:PhoneNumber =>=>=> RelationalSchema.Column>> officeemployee.employeenumber;
ClassDiagram.Attribut>> OfficeEmployee.emp:Address =>=>=> RelationalSchema.Column>> officeemployee.emp;
ClassDiagram.Attribut>> OfficeEmployee.GeneratedName:Salary =>=>=> RelationalSchema.Column>> officeemployee.GeneratedName;
ClassDiagram.Attribut>> User.id:long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.about:String =>=>=> RelationalSchema.Column>> user.about;
ClassDiagram.Attribut>> User.lastmodified:Date =>=>=> RelationalSchema.Column>> user.lastmodified;
ClassDiagram.Attribut>> OfficialEmployee.id:Long =>=>=> RelationalSchema.Column>> officialemployee.id PRIMARY KEY;
ClassDiagram.Attribut>> Email.id:Long =>=>=> RelationalSchema.Column>> email.id PRIMARY KEY;
ClassDiagram.Attribut>> Email.address:String =>=>=> RelationalSchema.Column>> email.address;
ClassDiagram.Attribut>> OfficeAddress.id:Long =>=>=> RelationalSchema.Column>> officeaddress.id PRIMARY KEY;
ClassDiagram.Attribut>> OfficeAddress.zipcode:String =>=>=> RelationalSchema.Column>> officeaddress.zipcode;
ClassDiagram.Attribut>> Office.id:Long =>=>=> RelationalSchema.Column>> office.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityWithNoId.id:int =>=>=> RelationalSchema.Column>> entitywithnoid.id;
ClassDiagram.Attribut>> Product.id:int =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> DeptEmployee.id:long =>=>=> RelationalSchema.Column>> deptemployee.id PRIMARY KEY;
ClassDiagram.Attribut>> DeptEmployee.employeenumber:String =>=>=> RelationalSchema.Column>> deptemployee.employeenumber;
ClassDiagram.Attribut>> DeptEmployee.title:String =>=>=> RelationalSchema.Column>> deptemployee.title;
ClassDiagram.Attribut>> DeptEmployee.name:String =>=>=> RelationalSchema.Column>> deptemployee.name;
ClassDiagram.Attribut>> Department.id:long =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> Department.name:String =>=>=> RelationalSchema.Column>> department.name;
ClassDiagram.Attribut>> User.id:long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> Customer.id:int =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.firstname:String =>=>=> RelationalSchema.Column>> customer.firstname;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.customerattributejson:String =>=>=> RelationalSchema.Column>> customer.customerattributejson;
ClassDiagram.Attribut>> Customer.customerattributes:Map<String,Object> =>=>=> RelationalSchema.Column>> customer.customerattributes;
ClassDiagram.Attribut>> Customer.GeneratedName:ObjectMapper =>=>=> RelationalSchema.Column>> customer.GeneratedName;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.firstname:String =>=>=> RelationalSchema.Column>> customer.firstname;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.emailaddress:String =>=>=> RelationalSchema.Column>> customer.emailaddress;
ClassDiagram.Attribut>> Address.id:Long =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> Address.id:Long =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> WorkStation.id:Long =>=>=> RelationalSchema.Column>> workstation.id PRIMARY KEY;
ClassDiagram.Attribut>> WorkStation.workstationnumber:Integer =>=>=> RelationalSchema.Column>> workstation.workstationnumber;
ClassDiagram.Attribut>> WorkStation.floor:String =>=>=> RelationalSchema.Column>> workstation.floor;
ClassDiagram.Attribut>> PessimisticLockingEmployee.salary:BigDecimal =>=>=> RelationalSchema.Column>> pessimisticlockingemployee.salary;
ClassDiagram.Attribut>> Customer.customerid:Long =>=>=> RelationalSchema.Column>> customer.customerid PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.addresslist:List<Address> =>=>=> RelationalSchema.Column>> customer.addresslist;
ClassDiagram.Attribut>> PessimisticLockingStudent.id:Long =>=>=> RelationalSchema.Column>> pessimisticlockingstudent.id PRIMARY KEY;
ClassDiagram.Attribut>> PessimisticLockingStudent.name:String =>=>=> RelationalSchema.Column>> pessimisticlockingstudent.name;
ClassDiagram.Attribut>> PessimisticLockingCourse.courseid:Long =>=>=> RelationalSchema.Column>> pessimisticlockingcourse.courseid PRIMARY KEY;
ClassDiagram.Attribut>> PessimisticLockingCourse.name:String =>=>=> RelationalSchema.Column>> pessimisticlockingcourse.name;
ClassDiagram.Attribut>> Individual.id:Long =>=>=> RelationalSchema.Column>> individual.id PRIMARY KEY;
ClassDiagram.Attribut>> Individual.name:String =>=>=> RelationalSchema.Column>> individual.name;
ClassDiagram.Attribut>> Individual.lastname:String =>=>=> RelationalSchema.Column>> individual.lastname;
ClassDiagram.Attribut>> User.id:String =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.photo:byte =>=>=> RelationalSchema.Column>> user.photo;
ClassDiagram.Attribut>> OptimisticLockingCourse.id:Long =>=>=> RelationalSchema.Column>> optimisticlockingcourse.id PRIMARY KEY;
ClassDiagram.Attribut>> OptimisticLockingCourse.name:String =>=>=> RelationalSchema.Column>> optimisticlockingcourse.name;
ClassDiagram.Attribut>> OptimisticLockingStudent.id:Long =>=>=> RelationalSchema.Column>> optimisticlockingstudent.id PRIMARY KEY;
ClassDiagram.Attribut>> OptimisticLockingStudent.name:String =>=>=> RelationalSchema.Column>> optimisticlockingstudent.name;
ClassDiagram.Attribut>> OptimisticLockingStudent.lastname:String =>=>=> RelationalSchema.Column>> optimisticlockingstudent.lastname;
ClassDiagram.Attribut>> OptimisticLockingStudent.version:Integer =>=>=> RelationalSchema.Column>> optimisticlockingstudent.version;
ClassDiagram.Attribut>> Student.id:int =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.firstname:String =>=>=> RelationalSchema.Column>> student.firstname;
ClassDiagram.Attribut>> Student.lastname:String =>=>=> RelationalSchema.Column>> student.lastname;
ClassDiagram.Attribut>> Student.gradyear:int =>=>=> RelationalSchema.Column>> student.gradyear;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname;
ClassDiagram.Attribut>> Company.id:Long =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.name:String =>=>=> RelationalSchema.Column>> company.name;
One-To-One relationship between ClassDiagram.Class>>UserProfile  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Set<Phone>;
One-To-Many relationship from ClassDiagram.Class>>OfficialEmployee  to ClassDiagram.Class>>List<Email>;
Many-To-One relationship from ClassDiagram.Class>>Email  to ClassDiagram.Class>>officialemployee represented by ClassDiagram.Atrribute>>employee;
Many-To-One relationship from ClassDiagram.Class>>Office  to ClassDiagram.Class>>officeaddress represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>DeptEmployee  to ClassDiagram.Class>>department represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>List<DeptEmployee>;
One-To-One relationship between ClassDiagram.Class>>Address  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Address  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>workstation represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>WorkStation  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>PessimisticLockingStudent  to ClassDiagram.Class>>List<PessimisticLockingCourse>;
Many-To-One relationship from ClassDiagram.Class>>PessimisticLockingCourse  to ClassDiagram.Class>>pessimisticlockingstudent represented by ClassDiagram.Atrribute>>student;
Many-To-One relationship from ClassDiagram.Class>>OptimisticLockingCourse  to ClassDiagram.Class>>optimisticlockingstudent represented by ClassDiagram.Atrribute>>student;
One-To-Many relationship from ClassDiagram.Class>>OptimisticLockingStudent  to ClassDiagram.Class>>List<OptimisticLockingCourse>;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>company represented by ClassDiagram.Atrribute>>workplace;
One-To-Many relationship from ClassDiagram.Class>>Company  to ClassDiagram.Class>>Set<Employee>;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Animal  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>MyProduct   Descriminator>>product_type: String ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Vehicle  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Individual  ;
