ClassDiagram.Class>> EntityWithCompositeId =>=>=> RelationalSchema.Table>> entitywithcompositeid;
ClassDiagram.Class>> DataPoint =>=>=> RelationalSchema.Table>> datapoint;
ClassDiagram.Class>> UnlistedDataPoint =>=>=> RelationalSchema.Table>> unlisteddatapoint;
ClassDiagram.Class>> Human =>=>=> RelationalSchema.Table>> human;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> ManyToOneType =>=>=> RelationalSchema.Table>> manytoonetype;
ClassDiagram.Class>> Alias =>=>=> RelationalSchema.Table>> alias;
ClassDiagram.Class>> Client =>=>=> RelationalSchema.Table>> client;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Widget =>=>=> RelationalSchema.Table>> widget;
ClassDiagram.Class>> Tool =>=>=> RelationalSchema.Table>> tool;
ClassDiagram.Class>> SuperclassCollectionTest =>=>=> RelationalSchema.Table>> superclasscollectiontest;
ClassDiagram.Class>> BasicSimpleCaseTest =>=>=> RelationalSchema.Table>> basicsimplecasetest;
ClassDiagram.Class>> MultiTypedBasicAttributesEntity =>=>=> RelationalSchema.Table>> multitypedbasicattributesentity;
ClassDiagram.Class>> Elephant =>=>=> RelationalSchema.Table>> elephant;
ClassDiagram.Class>> Payment =>=>=> RelationalSchema.Table>> payment;
ClassDiagram.Class>> Wall =>=>=> RelationalSchema.Table>> wall;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Document =>=>=> RelationalSchema.Table>> document;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> Mail =>=>=> RelationalSchema.Table>> mail;
ClassDiagram.Class>> Hoarder =>=>=> RelationalSchema.Table>> hoarder;
ClassDiagram.Class>> Music =>=>=> RelationalSchema.Table>> music;
ClassDiagram.Class>> Decorate =>=>=> RelationalSchema.Table>> decorate;
ClassDiagram.Class>> Race =>=>=> RelationalSchema.Table>> race;
ClassDiagram.Class>> Dress =>=>=> RelationalSchema.Table>> dress;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Competitor =>=>=> RelationalSchema.Table>> competitor;
ClassDiagram.Class>> Colony =>=>=> RelationalSchema.Table>> colony;
ClassDiagram.Class>> Pet =>=>=> RelationalSchema.Table>> pet;
ClassDiagram.Class>> Empire =>=>=> RelationalSchema.Table>> empire;
ClassDiagram.Class>> B3 =>=>=> RelationalSchema.Table>> b3;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> C2 =>=>=> RelationalSchema.Table>> c2;
ClassDiagram.Class>> B2 =>=>=> RelationalSchema.Table>> b2;
ClassDiagram.Class>> B4 =>=>=> RelationalSchema.Table>> b4;
ClassDiagram.Class>> B1 =>=>=> RelationalSchema.Table>> b1;
ClassDiagram.Class>> C1 =>=>=> RelationalSchema.Table>> c1;
ClassDiagram.Class>> Competition =>=>=> RelationalSchema.Table>> competition;
ClassDiagram.Class>> Kitchen =>=>=> RelationalSchema.Table>> kitchen;
ClassDiagram.Class>> IncidentStatus =>=>=> RelationalSchema.Table>> incidentstatus;
ClassDiagram.Class>> Oven =>=>=> RelationalSchema.Table>> oven;
ClassDiagram.Class>> Incident =>=>=> RelationalSchema.Table>> incident;
ClassDiagram.Class>> Info =>=>=> RelationalSchema.Table>> info;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> SomeMappedSuperclassSubclass =>=>=> RelationalSchema.Table>> somemappedsuperclasssubclass;
ClassDiagram.Class>> Entity2 =>=>=> RelationalSchema.Table>> entity2;
ClassDiagram.Class>> Entity3 =>=>=> RelationalSchema.Table>> entity3;
ClassDiagram.Class>> MapEntity =>=>=> RelationalSchema.Table>> mapentity;
ClassDiagram.Class>> VersionedEntity =>=>=> RelationalSchema.Table>> versionedentity;
ClassDiagram.Class>> Alias =>=>=> RelationalSchema.Table>> alias;
ClassDiagram.Class>> MixedIdAndIdClassHandling =>=>=> RelationalSchema.Table>> mixedidandidclasshandling;
ClassDiagram.Class>> LineItem =>=>=> RelationalSchema.Table>> lineitem;
ClassDiagram.Class>> Spouse =>=>=> RelationalSchema.Table>> spouse;
ClassDiagram.Class>> Entity1 =>=>=> RelationalSchema.Table>> entity1;
ClassDiagram.Class>> Thing =>=>=> RelationalSchema.Table>> thing;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> ThingWithQuantity =>=>=> RelationalSchema.Table>> thingwithquantity;
ClassDiagram.Class>> CreditCard =>=>=> RelationalSchema.Table>> creditcard;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> Wallet =>=>=> RelationalSchema.Table>> wallet;
ClassDiagram.Class>> Pasta =>=>=> RelationalSchema.Table>> pasta;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> QueryWithInParamListAndNamedEntityGraphTest =>=>=> RelationalSchema.Table>> querywithinparamlistandnamedentitygraphtest;
ClassDiagram.Class>> TypedValueParametersTest =>=>=> RelationalSchema.Table>> typedvalueparameterstest;
ClassDiagram.Class>> DateTimeParameterTest =>=>=> RelationalSchema.Table>> datetimeparametertest;
ClassDiagram.Class>> ScalarResultNativeQueryTest =>=>=> RelationalSchema.Table>> scalarresultnativequerytest;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Contractor =>=>=> RelationalSchema.Table>> contractor;
ClassDiagram.Class>> OracleConstructorResultNativeQueryTest =>=>=> RelationalSchema.Table>> oracleconstructorresultnativequerytest;
ClassDiagram.Class>> ConstructorResultNativeQueryTest =>=>=> RelationalSchema.Table>> constructorresultnativequerytest;
ClassDiagram.Class>> Conference =>=>=> RelationalSchema.Table>> conference;
ClassDiagram.Class>> ExtractionDocument =>=>=> RelationalSchema.Table>> extractiondocument;
ClassDiagram.Class>> Son =>=>=> RelationalSchema.Table>> son;
ClassDiagram.Class>> Troop2 =>=>=> RelationalSchema.Table>> troop2;
ClassDiagram.Class>> Bottom =>=>=> RelationalSchema.Table>> bottom;
ClassDiagram.Class>> Top =>=>=> RelationalSchema.Table>> top;
ClassDiagram.Class>> Middle =>=>=> RelationalSchema.Table>> middle;
ClassDiagram.Class>> Teacher =>=>=> RelationalSchema.Table>> teacher;
ClassDiagram.Class>> Troop =>=>=> RelationalSchema.Table>> troop;
ClassDiagram.Class>> Grandson =>=>=> RelationalSchema.Table>> grandson;
ClassDiagram.Class>> Song =>=>=> RelationalSchema.Table>> song;
ClassDiagram.Class>> MergeWithTransientNonCascadedAssociationTest =>=>=> RelationalSchema.Table>> mergewithtransientnoncascadedassociationtest;
ClassDiagram.Class>> Soldier2 =>=>=> RelationalSchema.Table>> soldier2;
ClassDiagram.Class>> DetachAndContainsTest =>=>=> RelationalSchema.Table>> detachandcontainstest;
ClassDiagram.Class>> ExtractionDocumentInfo =>=>=> RelationalSchema.Table>> extractiondocumentinfo;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Soldier =>=>=> RelationalSchema.Table>> soldier;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Author =>=>=> RelationalSchema.Table>> author;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> ProductAttribute =>=>=> RelationalSchema.Table>> productattribute;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> CupHolder =>=>=> RelationalSchema.Table>> cupholder;
ClassDiagram.Class>> BasicEntityGraphTests =>=>=> RelationalSchema.Table>> basicentitygraphtests;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> EntityGraphUsingFetchGraphTest =>=>=> RelationalSchema.Table>> entitygraphusingfetchgraphtest;
ClassDiagram.Class>> EntityGraphLoadPlanBuilderTest =>=>=> RelationalSchema.Table>> entitygraphloadplanbuildertest;
ClassDiagram.Class>> Location =>=>=> RelationalSchema.Table>> location;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> EntityGraphTest =>=>=> RelationalSchema.Table>> entitygraphtest;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Manager =>=>=> RelationalSchema.Table>> manager;
ClassDiagram.Class>> QueryLockingTest =>=>=> RelationalSchema.Table>> querylockingtest;
ClassDiagram.Class>> UnversionedLock =>=>=> RelationalSchema.Table>> unversionedlock;
ClassDiagram.Class>> Lock =>=>=> RelationalSchema.Table>> lock;
ClassDiagram.Class>> Lockable =>=>=> RelationalSchema.Table>> lockable;
ClassDiagram.Class>> Washer =>=>=> RelationalSchema.Table>> washer;
ClassDiagram.Class>> Money =>=>=> RelationalSchema.Table>> money;
ClassDiagram.Class>> ApplicationServer =>=>=> RelationalSchema.Table>> applicationserver;
ClassDiagram.Class>> Morito =>=>=> RelationalSchema.Table>> morito;
ClassDiagram.Class>> Scooter =>=>=> RelationalSchema.Table>> scooter;
ClassDiagram.Class>> Carpet =>=>=> RelationalSchema.Table>> carpet;
ClassDiagram.Class>> Bug =>=>=> RelationalSchema.Table>> bug;
ClassDiagram.Class>> ApplicationServer1 =>=>=> RelationalSchema.Table>> applicationserver1;
ClassDiagram.Class>> Money1 =>=>=> RelationalSchema.Table>> money1;
ClassDiagram.Class>> ApplicationServer =>=>=> RelationalSchema.Table>> applicationserver;
ClassDiagram.Class>> Money =>=>=> RelationalSchema.Table>> money;
ClassDiagram.Class>> Caipirinha =>=>=> RelationalSchema.Table>> caipirinha;
ClassDiagram.Class>> Bug =>=>=> RelationalSchema.Table>> bug;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Translation =>=>=> RelationalSchema.Table>> translation;
ClassDiagram.Class>> CountryChecker =>=>=> RelationalSchema.Table>> countrychecker;
ClassDiagram.Class>> Plant =>=>=> RelationalSchema.Table>> plant;
ClassDiagram.Class>> Rythm =>=>=> RelationalSchema.Table>> rythm;
ClassDiagram.Class>> Television =>=>=> RelationalSchema.Table>> television;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> CommunicationSystem =>=>=> RelationalSchema.Table>> communicationsystem;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> VideoSystem =>=>=> RelationalSchema.Table>> videosystem;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> RemoteControl =>=>=> RelationalSchema.Table>> remotecontrol;
ClassDiagram.Class>> Kitten =>=>=> RelationalSchema.Table>> kitten;
ClassDiagram.Class>> TemporalTypeTest =>=>=> RelationalSchema.Table>> temporaltypetest;
ClassDiagram.Class>> ImageReader =>=>=> RelationalSchema.Table>> imagereader;
ClassDiagram.Class>> Distributor =>=>=> RelationalSchema.Table>> distributor;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Article =>=>=> RelationalSchema.Table>> article;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Article =>=>=> RelationalSchema.Table>> article;
ClassDiagram.Class>> EntityWithLazyProperty =>=>=> RelationalSchema.Table>> entitywithlazyproperty;
ClassDiagram.Class>> Simple =>=>=> RelationalSchema.Table>> simple;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Feature =>=>=> RelationalSchema.Table>> feature;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> X =>=>=> RelationalSchema.Table>> x;
ClassDiagram.Class>> Y =>=>=> RelationalSchema.Table>> y;
ClassDiagram.Class>> Tranchenmodell =>=>=> RelationalSchema.Table>> tranchenmodell;
ClassDiagram.Class>> Tranche =>=>=> RelationalSchema.Table>> tranche;
ClassDiagram.Class>> Preisregelung =>=>=> RelationalSchema.Table>> preisregelung;
ClassDiagram.Class>> Article =>=>=> RelationalSchema.Table>> article;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Author =>=>=> RelationalSchema.Table>> author;
ClassDiagram.Class>> Umbrella =>=>=> RelationalSchema.Table>> umbrella;
ClassDiagram.Class>> Sickness =>=>=> RelationalSchema.Table>> sickness;
ClassDiagram.Class>> Garden =>=>=> RelationalSchema.Table>> garden;
ClassDiagram.Class>> Giant =>=>=> RelationalSchema.Table>> giant;
ClassDiagram.Class>> FoodItem =>=>=> RelationalSchema.Table>> fooditem;
ClassDiagram.Class>> WithGenericCollection =>=>=> RelationalSchema.Table>> withgenericcollection;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> DeskWithRawType =>=>=> RelationalSchema.Table>> deskwithrawtype;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> SimpleMedicalHistory =>=>=> RelationalSchema.Table>> simplemedicalhistory;
ClassDiagram.Class>> Feline =>=>=> RelationalSchema.Table>> feline;
ClassDiagram.Class>> House =>=>=> RelationalSchema.Table>> house;
ClassDiagram.Class>> SimplePerson =>=>=> RelationalSchema.Table>> simpleperson;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> EmployeeWithRawType =>=>=> RelationalSchema.Table>> employeewithrawtype;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> JoinedManyToOneOwner =>=>=> RelationalSchema.Table>> joinedmanytooneowner;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> Fridge =>=>=> RelationalSchema.Table>> fridge;
ClassDiagram.Class>> Flower =>=>=> RelationalSchema.Table>> flower;
ClassDiagram.Class>> Cable =>=>=> RelationalSchema.Table>> cable;
ClassDiagram.Class>> Bell =>=>=> RelationalSchema.Table>> bell;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> ColumnWithExplicitReferenceToPrimaryTableTest =>=>=> RelationalSchema.Table>> columnwithexplicitreferencetoprimarytabletest;
ClassDiagram.Class>> QueryTest =>=>=> RelationalSchema.Table>> querytest;
ClassDiagram.Class>> Music =>=>=> RelationalSchema.Table>> music;
ClassDiagram.Class>> Instrument =>=>=> RelationalSchema.Table>> instrument;
ClassDiagram.Class>> Musician =>=>=> RelationalSchema.Table>> musician;
ClassDiagram.Class>> StoredProcedureResultSetMappingTest =>=>=> RelationalSchema.Table>> storedprocedureresultsetmappingtest;
ClassDiagram.Class>> DateTimeParameterTest =>=>=> RelationalSchema.Table>> datetimeparametertest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Strawberry =>=>=> RelationalSchema.Table>> strawberry;
ClassDiagram.Class>> Fruit =>=>=> RelationalSchema.Table>> fruit;
ClassDiagram.Class>> NoCacheableAnnotationEntity =>=>=> RelationalSchema.Table>> nocacheableannotationentity;
ClassDiagram.Class>> ExplicitlyCacheableEntity =>=>=> RelationalSchema.Table>> explicitlycacheableentity;
ClassDiagram.Class>> ExplicitlyNonCacheableEntity =>=>=> RelationalSchema.Table>> explicitlynoncacheableentity;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> SimpleEntity =>=>=> RelationalSchema.Table>> simpleentity;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> BasicCDITest =>=>=> RelationalSchema.Table>> basiccditest;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Reptile =>=>=> RelationalSchema.Table>> reptile;
ClassDiagram.Class>> Mammal =>=>=> RelationalSchema.Table>> mammal;
ClassDiagram.Class>> Workload =>=>=> RelationalSchema.Table>> workload;
ClassDiagram.Class>> RemoveOrderingTest =>=>=> RelationalSchema.Table>> removeorderingtest;
ClassDiagram.Attribut>> EntityWithCompositeId.id:CompositeId =>=>=> RelationalSchema.Column>> entitywithcompositeid.id;
ClassDiagram.Attribut>> EntityWithCompositeId.description:String =>=>=> RelationalSchema.Column>> entitywithcompositeid.description;
ClassDiagram.Attribut>> DataPoint.id:long =>=>=> RelationalSchema.Column>> datapoint.id PRIMARY KEY;
ClassDiagram.Attribut>> UnlistedDataPoint.id:long =>=>=> RelationalSchema.Column>> unlisteddatapoint.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.id:Long =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.name:String =>=>=> RelationalSchema.Column>> animal.name;
ClassDiagram.Attribut>> ManyToOneType.id:Long =>=>=> RelationalSchema.Column>> manytoonetype.id PRIMARY KEY;
ClassDiagram.Attribut>> ManyToOneType.value:String =>=>=> RelationalSchema.Column>> manytoonetype.value;
ClassDiagram.Attribut>> Alias.id:Long =>=>=> RelationalSchema.Column>> alias.id PRIMARY KEY;
ClassDiagram.Attribut>> Alias.GeneratedName:Name =>=>=> RelationalSchema.Column>> alias.GeneratedName;
ClassDiagram.Attribut>> Alias.source:String =>=>=> RelationalSchema.Column>> alias.source;
ClassDiagram.Attribut>> Client.id:int =>=>=> RelationalSchema.Column>> client.id PRIMARY KEY;
ClassDiagram.Attribut>> Client.GeneratedName:Name =>=>=> RelationalSchema.Column>> client.GeneratedName;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.roles:Set<Role> =>=>=> RelationalSchema.Column>> user.roles;
ClassDiagram.Attribut>> Widget.code:String =>=>=> RelationalSchema.Column>> widget.code PRIMARY KEY;
ClassDiagram.Attribut>> Widget.division:String =>=>=> RelationalSchema.Column>> widget.division PRIMARY KEY;
ClassDiagram.Attribut>> Widget.cost:Double =>=>=> RelationalSchema.Column>> widget.cost;
ClassDiagram.Attribut>> Tool.cost:Double =>=>=> RelationalSchema.Column>> tool.cost;
ClassDiagram.Attribut>> MultiTypedBasicAttributesEntity.id:Long =>=>=> RelationalSchema.Column>> multitypedbasicattributesentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MultiTypedBasicAttributesEntity.somes:byte =>=>=> RelationalSchema.Column>> multitypedbasicattributesentity.somes;
ClassDiagram.Attribut>> MultiTypedBasicAttributesEntity.somewrappeds:Byte =>=>=> RelationalSchema.Column>> multitypedbasicattributesentity.somewrappeds;
ClassDiagram.Attribut>> Payment.id:Long =>=>=> RelationalSchema.Column>> payment.id PRIMARY KEY;
ClassDiagram.Attribut>> Payment.amount:BigDecimal =>=>=> RelationalSchema.Column>> payment.amount;
ClassDiagram.Attribut>> Payment.GeneratedName:Date =>=>=> RelationalSchema.Column>> payment.GeneratedName;
ClassDiagram.Attribut>> Wall.id:Long =>=>=> RelationalSchema.Column>> wall.id PRIMARY KEY;
ClassDiagram.Attribut>> Wall.width:long =>=>=> RelationalSchema.Column>> wall.width;
ClassDiagram.Attribut>> Wall.height:long =>=>=> RelationalSchema.Column>> wall.height;
ClassDiagram.Attribut>> Wall.color:String =>=>=> RelationalSchema.Column>> wall.color;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name PRIMARY KEY;
ClassDiagram.Attribut>> Item.descr:String =>=>=> RelationalSchema.Column>> item.descr;
ClassDiagram.Attribut>> Document.id:Long =>=>=> RelationalSchema.Column>> document.id PRIMARY KEY;
ClassDiagram.Attribut>> Document.name:String =>=>=> RelationalSchema.Column>> document.name;
ClassDiagram.Attribut>> Category.id:Long =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.name:String =>=>=> RelationalSchema.Column>> category.name;
ClassDiagram.Attribut>> Category.version:int =>=>=> RelationalSchema.Column>> category.version;
ClassDiagram.Attribut>> Dog.numbones:int =>=>=> RelationalSchema.Column>> dog.numbones;
ClassDiagram.Attribut>> Cat.lives:int =>=>=> RelationalSchema.Column>> cat.lives;
ClassDiagram.Attribut>> Mail.id:Long =>=>=> RelationalSchema.Column>> mail.id PRIMARY KEY;
ClassDiagram.Attribut>> Mail.from:String =>=>=> RelationalSchema.Column>> mail.from;
ClassDiagram.Attribut>> Hoarder.id:Long =>=>=> RelationalSchema.Column>> hoarder.id PRIMARY KEY;
ClassDiagram.Attribut>> Hoarder.name:String =>=>=> RelationalSchema.Column>> hoarder.name;
ClassDiagram.Attribut>> Music.id:Integer =>=>=> RelationalSchema.Column>> music.id PRIMARY KEY;
ClassDiagram.Attribut>> Music.name:String =>=>=> RelationalSchema.Column>> music.name;
ClassDiagram.Attribut>> Music.version:Integer =>=>=> RelationalSchema.Column>> music.version;
ClassDiagram.Attribut>> Decorate.id:int =>=>=> RelationalSchema.Column>> decorate.id PRIMARY KEY;
ClassDiagram.Attribut>> Decorate.name:String =>=>=> RelationalSchema.Column>> decorate.name;
ClassDiagram.Attribut>> Decorate.GeneratedName:Pet =>=>=> RelationalSchema.Column>> decorate.GeneratedName;
ClassDiagram.Attribut>> Race.id:Integer =>=>=> RelationalSchema.Column>> race.id PRIMARY KEY;
ClassDiagram.Attribut>> Race.name:String =>=>=> RelationalSchema.Column>> race.name;
ClassDiagram.Attribut>> Dress.name:String =>=>=> RelationalSchema.Column>> dress.name PRIMARY KEY;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.version:int =>=>=> RelationalSchema.Column>> item.version;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Competitor.id:Integer =>=>=> RelationalSchema.Column>> competitor.id PRIMARY KEY;
ClassDiagram.Attribut>> Competitor.name:String =>=>=> RelationalSchema.Column>> competitor.name;
ClassDiagram.Attribut>> Colony.id:Long =>=>=> RelationalSchema.Column>> colony.id PRIMARY KEY;
ClassDiagram.Attribut>> Pet.id:int =>=>=> RelationalSchema.Column>> pet.id PRIMARY KEY;
ClassDiagram.Attribut>> Pet.name:String =>=>=> RelationalSchema.Column>> pet.name;
ClassDiagram.Attribut>> Pet.weight:double =>=>=> RelationalSchema.Column>> pet.weight;
ClassDiagram.Attribut>> Empire.id:Long =>=>=> RelationalSchema.Column>> empire.id PRIMARY KEY;
ClassDiagram.Attribut>> B3.id:int =>=>=> RelationalSchema.Column>> b3.id PRIMARY KEY;
ClassDiagram.Attribut>> A.id:int =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.name:String =>=>=> RelationalSchema.Column>> a.name;
ClassDiagram.Attribut>> C2.id:int =>=>=> RelationalSchema.Column>> c2.id PRIMARY KEY;
ClassDiagram.Attribut>> B2.id:int =>=>=> RelationalSchema.Column>> b2.id PRIMARY KEY;
ClassDiagram.Attribut>> B4.id:int =>=>=> RelationalSchema.Column>> b4.id PRIMARY KEY;
ClassDiagram.Attribut>> B1.id:int =>=>=> RelationalSchema.Column>> b1.id PRIMARY KEY;
ClassDiagram.Attribut>> C1.id:int =>=>=> RelationalSchema.Column>> c1.id PRIMARY KEY;
ClassDiagram.Attribut>> Competition.id:Integer =>=>=> RelationalSchema.Column>> competition.id PRIMARY KEY;
ClassDiagram.Attribut>> Kitchen.id:Long =>=>=> RelationalSchema.Column>> kitchen.id PRIMARY KEY;
ClassDiagram.Attribut>> IncidentStatus.id:String =>=>=> RelationalSchema.Column>> incidentstatus.id PRIMARY KEY;
ClassDiagram.Attribut>> Oven.id:Long =>=>=> RelationalSchema.Column>> oven.id PRIMARY KEY;
ClassDiagram.Attribut>> Incident.id:String =>=>=> RelationalSchema.Column>> incident.id PRIMARY KEY;
ClassDiagram.Attribut>> Info.id:String =>=>=> RelationalSchema.Column>> info.id PRIMARY KEY;
ClassDiagram.Attribut>> Info.street:String =>=>=> RelationalSchema.Column>> info.street;
ClassDiagram.Attribut>> Info.city:String =>=>=> RelationalSchema.Column>> info.city;
ClassDiagram.Attribut>> Info.state:String =>=>=> RelationalSchema.Column>> info.state;
ClassDiagram.Attribut>> Info.zip:String =>=>=> RelationalSchema.Column>> info.zip;
ClassDiagram.Attribut>> Info.GeneratedName:Spouse =>=>=> RelationalSchema.Column>> info.GeneratedName;
ClassDiagram.Attribut>> Order.id:String =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.totalprice:double =>=>=> RelationalSchema.Column>> order.totalprice;
ClassDiagram.Attribut>> Order.GeneratedName:Customer =>=>=> RelationalSchema.Column>> order.GeneratedName;
ClassDiagram.Attribut>> Order.GeneratedName:CreditCard =>=>=> RelationalSchema.Column>> order.GeneratedName;
ClassDiagram.Attribut>> Order.sample:LineItem =>=>=> RelationalSchema.Column>> order.sample;
ClassDiagram.Attribut>> Order.domen:char =>=>=> RelationalSchema.Column>> order.domen;
ClassDiagram.Attribut>> Order.number:byte =>=>=> RelationalSchema.Column>> order.number;
ClassDiagram.Attribut>> Address.id:String =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.state:String =>=>=> RelationalSchema.Column>> address.state;
ClassDiagram.Attribut>> Address.zip:String =>=>=> RelationalSchema.Column>> address.zip;
ClassDiagram.Attribut>> Product.id:String =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Product.price:double =>=>=> RelationalSchema.Column>> product.price;
ClassDiagram.Attribut>> Product.rating:float =>=>=> RelationalSchema.Column>> product.rating;
ClassDiagram.Attribut>> Product.quantity:int =>=>=> RelationalSchema.Column>> product.quantity;
ClassDiagram.Attribut>> Product.partnumber:long =>=>=> RelationalSchema.Column>> product.partnumber;
ClassDiagram.Attribut>> Product.some:BigInteger =>=>=> RelationalSchema.Column>> product.some;
ClassDiagram.Attribut>> Product.some:BigDecimal =>=>=> RelationalSchema.Column>> product.some;
ClassDiagram.Attribut>> Product.warehouse:String =>=>=> RelationalSchema.Column>> product.warehouse;
ClassDiagram.Attribut>> Product.GeneratedName:ShelfLife =>=>=> RelationalSchema.Column>> product.GeneratedName;
ClassDiagram.Attribut>> SomeMappedSuperclassSubclass.thedata:String =>=>=> RelationalSchema.Column>> somemappedsuperclasssubclass.thedata;
ClassDiagram.Attribut>> Entity2.id:long =>=>=> RelationalSchema.Column>> entity2.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity2.value:String =>=>=> RelationalSchema.Column>> entity2.value;
ClassDiagram.Attribut>> Entity3.id:long =>=>=> RelationalSchema.Column>> entity3.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity3.value:String =>=>=> RelationalSchema.Column>> entity3.value;
ClassDiagram.Attribut>> MapEntity.key:String =>=>=> RelationalSchema.Column>> mapentity.key PRIMARY KEY;
ClassDiagram.Attribut>> MapEntity.localized:Map<String,MapEntityLocal> =>=>=> RelationalSchema.Column>> mapentity.localized;
ClassDiagram.Attribut>> VersionedEntity.id:String =>=>=> RelationalSchema.Column>> versionedentity.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedEntity.name:String =>=>=> RelationalSchema.Column>> versionedentity.name;
ClassDiagram.Attribut>> VersionedEntity.version:int =>=>=> RelationalSchema.Column>> versionedentity.version;
ClassDiagram.Attribut>> Alias.id:String =>=>=> RelationalSchema.Column>> alias.id PRIMARY KEY;
ClassDiagram.Attribut>> Alias.alias:String =>=>=> RelationalSchema.Column>> alias.alias;
ClassDiagram.Attribut>> Alias.noop:Customer =>=>=> RelationalSchema.Column>> alias.noop;
ClassDiagram.Attribut>> LineItem.id:String =>=>=> RelationalSchema.Column>> lineitem.id PRIMARY KEY;
ClassDiagram.Attribut>> LineItem.quantity:int =>=>=> RelationalSchema.Column>> lineitem.quantity;
ClassDiagram.Attribut>> LineItem.GeneratedName:Order =>=>=> RelationalSchema.Column>> lineitem.GeneratedName;
ClassDiagram.Attribut>> LineItem.GeneratedName:Product =>=>=> RelationalSchema.Column>> lineitem.GeneratedName;
ClassDiagram.Attribut>> Spouse.id:String =>=>=> RelationalSchema.Column>> spouse.id PRIMARY KEY;
ClassDiagram.Attribut>> Spouse.first:String =>=>=> RelationalSchema.Column>> spouse.first;
ClassDiagram.Attribut>> Spouse.maiden:String =>=>=> RelationalSchema.Column>> spouse.maiden;
ClassDiagram.Attribut>> Spouse.last:String =>=>=> RelationalSchema.Column>> spouse.last;
ClassDiagram.Attribut>> Spouse.snumber:String =>=>=> RelationalSchema.Column>> spouse.snumber;
ClassDiagram.Attribut>> Spouse.GeneratedName:Info =>=>=> RelationalSchema.Column>> spouse.GeneratedName;
ClassDiagram.Attribut>> Spouse.GeneratedName:Customer =>=>=> RelationalSchema.Column>> spouse.GeneratedName;
ClassDiagram.Attribut>> Entity1.id:long =>=>=> RelationalSchema.Column>> entity1.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity1.value:String =>=>=> RelationalSchema.Column>> entity1.value;
ClassDiagram.Attribut>> Thing.id:String =>=>=> RelationalSchema.Column>> thing.id PRIMARY KEY;
ClassDiagram.Attribut>> Thing.name:String =>=>=> RelationalSchema.Column>> thing.name;
ClassDiagram.Attribut>> Customer.id:String =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.age:Integer =>=>=> RelationalSchema.Column>> customer.age;
ClassDiagram.Attribut>> Customer.GeneratedName:Country =>=>=> RelationalSchema.Column>> customer.GeneratedName;
ClassDiagram.Attribut>> Customer.GeneratedName:Spouse =>=>=> RelationalSchema.Column>> customer.GeneratedName;
ClassDiagram.Attribut>> ThingWithQuantity.quantity:int =>=>=> RelationalSchema.Column>> thingwithquantity.quantity;
ClassDiagram.Attribut>> CreditCard.id:String =>=>=> RelationalSchema.Column>> creditcard.id PRIMARY KEY;
ClassDiagram.Attribut>> CreditCard.number:String =>=>=> RelationalSchema.Column>> creditcard.number;
ClassDiagram.Attribut>> CreditCard.type:String =>=>=> RelationalSchema.Column>> creditcard.type;
ClassDiagram.Attribut>> CreditCard.expires:String =>=>=> RelationalSchema.Column>> creditcard.expires;
ClassDiagram.Attribut>> CreditCard.approved:boolean =>=>=> RelationalSchema.Column>> creditcard.approved;
ClassDiagram.Attribut>> CreditCard.balance:double =>=>=> RelationalSchema.Column>> creditcard.balance;
ClassDiagram.Attribut>> CreditCard.GeneratedName:Order =>=>=> RelationalSchema.Column>> creditcard.GeneratedName;
ClassDiagram.Attribut>> CreditCard.GeneratedName:Customer =>=>=> RelationalSchema.Column>> creditcard.GeneratedName;
ClassDiagram.Attribut>> Phone.id:String =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.area:String =>=>=> RelationalSchema.Column>> phone.area;
ClassDiagram.Attribut>> Phone.number:String =>=>=> RelationalSchema.Column>> phone.number;
ClassDiagram.Attribut>> Phone.GeneratedName:Address =>=>=> RelationalSchema.Column>> phone.GeneratedName;
ClassDiagram.Attribut>> Phone.types:Set<Type> =>=>=> RelationalSchema.Column>> phone.types;
ClassDiagram.Attribut>> Wallet.serial:String =>=>=> RelationalSchema.Column>> wallet.serial PRIMARY KEY;
ClassDiagram.Attribut>> Wallet.model:String =>=>=> RelationalSchema.Column>> wallet.model;
ClassDiagram.Attribut>> Wallet.marketentrance:Date =>=>=> RelationalSchema.Column>> wallet.marketentrance;
ClassDiagram.Attribut>> Wallet.brand:String =>=>=> RelationalSchema.Column>> wallet.brand;
ClassDiagram.Attribut>> Pasta.id:Integer =>=>=> RelationalSchema.Column>> pasta.id PRIMARY KEY;
ClassDiagram.Attribut>> Pasta.type:String =>=>=> RelationalSchema.Column>> pasta.type;
ClassDiagram.Attribut>> Cat.log:Logger =>=>=> RelationalSchema.Column>> cat.log;
ClassDiagram.Attribut>> Cat.//usedforassertionsids:List =>=>=> RelationalSchema.Column>> cat.//usedforassertionsids;
ClassDiagram.Attribut>> Cat.//usedforassertionspostversion:int =>=>=> RelationalSchema.Column>> cat.//usedforassertionspostversion;
ClassDiagram.Attribut>> Cat.id:Integer =>=>=> RelationalSchema.Column>> cat.id PRIMARY KEY;
ClassDiagram.Attribut>> Cat.name:String =>=>=> RelationalSchema.Column>> cat.name;
ClassDiagram.Attribut>> Cat.ofbirth:Date =>=>=> RelationalSchema.Column>> cat.ofbirth;
ClassDiagram.Attribut>> Cat.age:int =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Cat.length:long =>=>=> RelationalSchema.Column>> cat.length;
ClassDiagram.Attribut>> Cat.lastup:Date =>=>=> RelationalSchema.Column>> cat.lastup;
ClassDiagram.Attribut>> Cat.manualversion:int =>=>=> RelationalSchema.Column>> cat.manualversion;
ClassDiagram.Attribut>> TypedValueParametersTest.docid:int =>=>=> RelationalSchema.Column>> typedvalueparameterstest.docid;
ClassDiagram.Attribut>> DateTimeParameterTest.nowcal:GregorianCalendar =>=>=> RelationalSchema.Column>> datetimeparametertest.nowcal;
ClassDiagram.Attribut>> DateTimeParameterTest.now:Date =>=>=> RelationalSchema.Column>> datetimeparametertest.now;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.salary:Double =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Contractor.company:String =>=>=> RelationalSchema.Column>> contractor.company;
ClassDiagram.Attribut>> Conference.id:Long =>=>=> RelationalSchema.Column>> conference.id PRIMARY KEY;
ClassDiagram.Attribut>> Conference.GeneratedName:Date =>=>=> RelationalSchema.Column>> conference.GeneratedName;
ClassDiagram.Attribut>> ExtractionDocument.id:Long =>=>=> RelationalSchema.Column>> extractiondocument.id PRIMARY KEY;
ClassDiagram.Attribut>> ExtractionDocument.body:byte =>=>=> RelationalSchema.Column>> extractiondocument.body;
ClassDiagram.Attribut>> Son.id:Integer =>=>=> RelationalSchema.Column>> son.id PRIMARY KEY;
ClassDiagram.Attribut>> Troop2./*fails:*/id:Integer =>=>=> RelationalSchema.Column>> troop2./*fails:*/id PRIMARY KEY;
ClassDiagram.Attribut>> Troop2.name:String =>=>=> RelationalSchema.Column>> troop2.name;
ClassDiagram.Attribut>> Bottom.id:Long =>=>=> RelationalSchema.Column>> bottom.id PRIMARY KEY;
ClassDiagram.Attribut>> Top.id:Long =>=>=> RelationalSchema.Column>> top.id PRIMARY KEY;
ClassDiagram.Attribut>> Middle.id:Long =>=>=> RelationalSchema.Column>> middle.id PRIMARY KEY;
ClassDiagram.Attribut>> Teacher.id:Long =>=>=> RelationalSchema.Column>> teacher.id PRIMARY KEY;
ClassDiagram.Attribut>> Teacher.name:String =>=>=> RelationalSchema.Column>> teacher.name;
ClassDiagram.Attribut>> Troop.id:Integer =>=>=> RelationalSchema.Column>> troop.id PRIMARY KEY;
ClassDiagram.Attribut>> Troop.name:String =>=>=> RelationalSchema.Column>> troop.name;
ClassDiagram.Attribut>> Grandson.id:Integer =>=>=> RelationalSchema.Column>> grandson.id PRIMARY KEY;
ClassDiagram.Attribut>> Song.id:Long =>=>=> RelationalSchema.Column>> song.id PRIMARY KEY;
ClassDiagram.Attribut>> Soldier2.id:Integer =>=>=> RelationalSchema.Column>> soldier2.id PRIMARY KEY;
ClassDiagram.Attribut>> Soldier2.name:String =>=>=> RelationalSchema.Column>> soldier2.name;
ClassDiagram.Attribut>> ExtractionDocumentInfo.id:Long =>=>=> RelationalSchema.Column>> extractiondocumentinfo.id PRIMARY KEY;
ClassDiagram.Attribut>> ExtractionDocumentInfo.lastmodified:Date =>=>=> RelationalSchema.Column>> extractiondocumentinfo.lastmodified;
ClassDiagram.Attribut>> ExtractionDocumentInfo.GeneratedName:Conference =>=>=> RelationalSchema.Column>> extractiondocumentinfo.GeneratedName;
ClassDiagram.Attribut>> Parent.id:Integer =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Soldier.id:Integer =>=>=> RelationalSchema.Column>> soldier.id PRIMARY KEY;
ClassDiagram.Attribut>> Soldier.name:String =>=>=> RelationalSchema.Column>> soldier.name;
ClassDiagram.Attribut>> Soldier.GeneratedName:Troop =>=>=> RelationalSchema.Column>> soldier.GeneratedName;
ClassDiagram.Attribut>> Student.id:Long =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Author.id:Long =>=>=> RelationalSchema.Column>> author.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.id:Long =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> ProductAttribute.owner:String =>=>=> RelationalSchema.Column>> productattribute.owner PRIMARY KEY;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> CupHolder.//(strategy:Integer =>=>=> RelationalSchema.Column>> cupholder.//(strategy PRIMARY KEY;
ClassDiagram.Attribut>> CupHolder.radius:BigDecimal =>=>=> RelationalSchema.Column>> cupholder.radius;
ClassDiagram.Attribut>> Company.id:long =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.markets:Set<Market> =>=>=> RelationalSchema.Column>> company.markets;
ClassDiagram.Attribut>> Company.phonenumbers:Set<String> =>=>=> RelationalSchema.Column>> company.phonenumbers;
ClassDiagram.Attribut>> Location.id:long =>=>=> RelationalSchema.Column>> location.id PRIMARY KEY;
ClassDiagram.Attribut>> Location.address:String =>=>=> RelationalSchema.Column>> location.address;
ClassDiagram.Attribut>> Location.zip:int =>=>=> RelationalSchema.Column>> location.zip;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.salary:double =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.id:long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> UnversionedLock.id:Integer =>=>=> RelationalSchema.Column>> unversionedlock.id PRIMARY KEY;
ClassDiagram.Attribut>> UnversionedLock.name:String =>=>=> RelationalSchema.Column>> unversionedlock.name;
ClassDiagram.Attribut>> Lock.id:Integer =>=>=> RelationalSchema.Column>> lock.id PRIMARY KEY;
ClassDiagram.Attribut>> Lock.version:Integer =>=>=> RelationalSchema.Column>> lock.version;
ClassDiagram.Attribut>> Lock.name:String =>=>=> RelationalSchema.Column>> lock.name;
ClassDiagram.Attribut>> Lockable.id:Integer =>=>=> RelationalSchema.Column>> lockable.id PRIMARY KEY;
ClassDiagram.Attribut>> Lockable.version:Integer =>=>=> RelationalSchema.Column>> lockable.version;
ClassDiagram.Attribut>> Lockable.name:String =>=>=> RelationalSchema.Column>> lockable.name;
ClassDiagram.Attribut>> Money.id:Integer =>=>=> RelationalSchema.Column>> money.id PRIMARY KEY;
ClassDiagram.Attribut>> ApplicationServer.id:Integer =>=>=> RelationalSchema.Column>> applicationserver.id PRIMARY KEY;
ClassDiagram.Attribut>> ApplicationServer.name:String =>=>=> RelationalSchema.Column>> applicationserver.name;
ClassDiagram.Attribut>> ApplicationServer.GeneratedName:Version =>=>=> RelationalSchema.Column>> applicationserver.GeneratedName;
ClassDiagram.Attribut>> Morito.id:Integer =>=>=> RelationalSchema.Column>> morito.id PRIMARY KEY;
ClassDiagram.Attribut>> Morito.power:String =>=>=> RelationalSchema.Column>> morito.power;
ClassDiagram.Attribut>> Scooter.model:String =>=>=> RelationalSchema.Column>> scooter.model PRIMARY KEY;
ClassDiagram.Attribut>> Scooter.speed:Long =>=>=> RelationalSchema.Column>> scooter.speed;
ClassDiagram.Attribut>> Carpet.id:Integer =>=>=> RelationalSchema.Column>> carpet.id PRIMARY KEY;
ClassDiagram.Attribut>> Carpet.country:String =>=>=> RelationalSchema.Column>> carpet.country;
ClassDiagram.Attribut>> Bug.id:Long =>=>=> RelationalSchema.Column>> bug.id PRIMARY KEY;
ClassDiagram.Attribut>> Bug.subject:String =>=>=> RelationalSchema.Column>> bug.subject;
ClassDiagram.Attribut>> Bug.comment:String =>=>=> RelationalSchema.Column>> bug.comment;
ClassDiagram.Attribut>> ApplicationServer1.id:Integer =>=>=> RelationalSchema.Column>> applicationserver1.id PRIMARY KEY;
ClassDiagram.Attribut>> ApplicationServer1.name:String =>=>=> RelationalSchema.Column>> applicationserver1.name;
ClassDiagram.Attribut>> ApplicationServer1.version:Version1 =>=>=> RelationalSchema.Column>> applicationserver1.version;
ClassDiagram.Attribut>> Money1.id:Integer =>=>=> RelationalSchema.Column>> money1.id PRIMARY KEY;
ClassDiagram.Attribut>> ApplicationServer.id:Integer =>=>=> RelationalSchema.Column>> applicationserver.id PRIMARY KEY;
ClassDiagram.Attribut>> ApplicationServer.name:String =>=>=> RelationalSchema.Column>> applicationserver.name;
ClassDiagram.Attribut>> ApplicationServer.GeneratedName:Version =>=>=> RelationalSchema.Column>> applicationserver.GeneratedName;
ClassDiagram.Attribut>> Money.id:Integer =>=>=> RelationalSchema.Column>> money.id PRIMARY KEY;
ClassDiagram.Attribut>> Caipirinha.id:Integer =>=>=> RelationalSchema.Column>> caipirinha.id PRIMARY KEY;
ClassDiagram.Attribut>> Caipirinha.name:String =>=>=> RelationalSchema.Column>> caipirinha.name;
ClassDiagram.Attribut>> Bug.id:Long =>=>=> RelationalSchema.Column>> bug.id PRIMARY KEY;
ClassDiagram.Attribut>> Bug.subject:String =>=>=> RelationalSchema.Column>> bug.subject;
ClassDiagram.Attribut>> Bug.comment:String =>=>=> RelationalSchema.Column>> bug.comment;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name PRIMARY KEY;
ClassDiagram.Attribut>> Item.descr:String =>=>=> RelationalSchema.Column>> item.descr;
ClassDiagram.Attribut>> Item.intval:Integer =>=>=> RelationalSchema.Column>> item.intval;
ClassDiagram.Attribut>> Translation.id:Integer =>=>=> RelationalSchema.Column>> translation.id PRIMARY KEY;
ClassDiagram.Attribut>> Translation.into:String =>=>=> RelationalSchema.Column>> translation.into;
ClassDiagram.Attribut>> Plant.id:String =>=>=> RelationalSchema.Column>> plant.id PRIMARY KEY;
ClassDiagram.Attribut>> Plant.name:String =>=>=> RelationalSchema.Column>> plant.name;
ClassDiagram.Attribut>> Rythm.id:Integer =>=>=> RelationalSchema.Column>> rythm.id PRIMARY KEY;
ClassDiagram.Attribut>> Television.id:Integer =>=>=> RelationalSchema.Column>> television.id PRIMARY KEY;
ClassDiagram.Attribut>> Television.name:String =>=>=> RelationalSchema.Column>> television.name;
ClassDiagram.Attribut>> Customer.comments:String =>=>=> RelationalSchema.Column>> customer.comments;
ClassDiagram.Attribut>> CommunicationSystem.communication:int =>=>=> RelationalSchema.Column>> communicationsystem.communication;
ClassDiagram.Attribut>> CommunicationSystem.isfirst:boolean =>=>=> RelationalSchema.Column>> communicationsystem.isfirst;
ClassDiagram.Attribut>> CommunicationSystem.islast:boolean =>=>=> RelationalSchema.Column>> communicationsystem.islast;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.address:String =>=>=> RelationalSchema.Column>> person.address;
ClassDiagram.Attribut>> Person.zip:String =>=>=> RelationalSchema.Column>> person.zip;
ClassDiagram.Attribut>> Person.country:String =>=>=> RelationalSchema.Column>> person.country;
ClassDiagram.Attribut>> Person.sex:char =>=>=> RelationalSchema.Column>> person.sex;
ClassDiagram.Attribut>> VideoSystem.transientcounter:int =>=>=> RelationalSchema.Column>> videosystem.transientcounter;
ClassDiagram.Attribut>> Employee.title:String =>=>=> RelationalSchema.Column>> employee.title;
ClassDiagram.Attribut>> Employee.salary:BigDecimal =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> RemoteControl.id:Integer =>=>=> RelationalSchema.Column>> remotecontrol.id PRIMARY KEY;
ClassDiagram.Attribut>> RemoteControl.creation:Date =>=>=> RelationalSchema.Column>> remotecontrol.creation;
ClassDiagram.Attribut>> Kitten.id:Integer =>=>=> RelationalSchema.Column>> kitten.id PRIMARY KEY;
ClassDiagram.Attribut>> Kitten.name:String =>=>=> RelationalSchema.Column>> kitten.name;
ClassDiagram.Attribut>> ImageReader.id:long =>=>=> RelationalSchema.Column>> imagereader.id PRIMARY KEY;
ClassDiagram.Attribut>> ImageReader.image:Blob =>=>=> RelationalSchema.Column>> imagereader.image;
ClassDiagram.Attribut>> ImageReader.text:Clob =>=>=> RelationalSchema.Column>> imagereader.text;
ClassDiagram.Attribut>> Distributor.id:Integer =>=>=> RelationalSchema.Column>> distributor.id PRIMARY KEY;
ClassDiagram.Attribut>> Distributor.name:String =>=>=> RelationalSchema.Column>> distributor.name;
ClassDiagram.Attribut>> Account.id:Long =>=>=> RelationalSchema.Column>> account.id PRIMARY KEY;
ClassDiagram.Attribut>> Account.name:String =>=>=> RelationalSchema.Column>> account.name;
ClassDiagram.Attribut>> Account.regioncode:String =>=>=> RelationalSchema.Column>> account.regioncode;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee./*@embedded@attributeoverrides({@attributeoverride(name:Address =>=>=> RelationalSchema.Column>> employee./*@embedded@attributeoverrides({@attributeoverride(name;
ClassDiagram.Attribut>> Employee./*@embedded@attributeoverrides({@attributeoverride(name:Address =>=>=> RelationalSchema.Column>> employee./*@embedded@attributeoverrides({@attributeoverride(name;
ClassDiagram.Attribut>> Article.id:Integer =>=>=> RelationalSchema.Column>> article.id PRIMARY KEY;
ClassDiagram.Attribut>> Article.name:String =>=>=> RelationalSchema.Column>> article.name;
ClassDiagram.Attribut>> Article.next:Article =>=>=> RelationalSchema.Column>> article.next;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee./*@embedded@attributeoverrides({@attributeoverride(name:Address =>=>=> RelationalSchema.Column>> employee./*@embedded@attributeoverrides({@attributeoverride(name;
ClassDiagram.Attribut>> Employee./*@embedded@attributeoverrides({@attributeoverride(name:Address =>=>=> RelationalSchema.Column>> employee./*@embedded@attributeoverrides({@attributeoverride(name;
ClassDiagram.Attribut>> Article.id:Integer =>=>=> RelationalSchema.Column>> article.id PRIMARY KEY;
ClassDiagram.Attribut>> Article.name:String =>=>=> RelationalSchema.Column>> article.name;
ClassDiagram.Attribut>> Article.next:Article =>=>=> RelationalSchema.Column>> article.next;
ClassDiagram.Attribut>> EntityWithLazyProperty.pre_update_value:byte =>=>=> RelationalSchema.Column>> entitywithlazyproperty.pre_update_value;
ClassDiagram.Attribut>> EntityWithLazyProperty.id:Long =>=>=> RelationalSchema.Column>> entitywithlazyproperty.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityWithLazyProperty.lazydata:byte =>=>=> RelationalSchema.Column>> entitywithlazyproperty.lazydata;
ClassDiagram.Attribut>> EntityWithLazyProperty.somefield:String =>=>=> RelationalSchema.Column>> entitywithlazyproperty.somefield;
ClassDiagram.Attribut>> EntityWithLazyProperty.updatelazyfieldinpreupdate:boolean =>=>=> RelationalSchema.Column>> entitywithlazyproperty.updatelazyfieldinpreupdate;
ClassDiagram.Attribut>> Simple.name:String =>=>=> RelationalSchema.Column>> simple.name;
ClassDiagram.Attribut>> Simple.//haveanadditionalattributethatwillensurethattheenhancedclasses//willseeallclassattributesofanentitywithoutcnfesrelations:Collection<SimpleRelation> =>=>=> RelationalSchema.Column>> simple.//haveanadditionalattributethatwillensurethattheenhancedclasses//willseeallclassattributesofanentitywithoutcnfesrelations;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Feature.id:Long =>=>=> RelationalSchema.Column>> feature.id PRIMARY KEY;
ClassDiagram.Attribut>> Feature.name:String =>=>=> RelationalSchema.Column>> feature.name;
ClassDiagram.Attribut>> A.id:Integer =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.GeneratedName:B =>=>=> RelationalSchema.Column>> a.GeneratedName;
ClassDiagram.Attribut>> B.id:Integer =>=>=> RelationalSchema.Column>> b.id PRIMARY KEY;
ClassDiagram.Attribut>> B.GeneratedName:A =>=>=> RelationalSchema.Column>> b.GeneratedName;
ClassDiagram.Attribut>> X.id:Long =>=>=> RelationalSchema.Column>> x.id PRIMARY KEY;
ClassDiagram.Attribut>> Y.id:Long =>=>=> RelationalSchema.Column>> y.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranchenmodell.id:Long =>=>=> RelationalSchema.Column>> tranchenmodell.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranche.id:Long =>=>=> RelationalSchema.Column>> tranche.id PRIMARY KEY;
ClassDiagram.Attribut>> Preisregelung.id:Long =>=>=> RelationalSchema.Column>> preisregelung.id PRIMARY KEY;
ClassDiagram.Attribut>> Article.id:Integer =>=>=> RelationalSchema.Column>> article.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.id:Long =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.name:String =>=>=> RelationalSchema.Column>> book.name;
ClassDiagram.Attribut>> Author.id:Integer =>=>=> RelationalSchema.Column>> author.id PRIMARY KEY;
ClassDiagram.Attribut>> Umbrella.id:PK =>=>=> RelationalSchema.Column>> umbrella.id;
ClassDiagram.Attribut>> Umbrella.size:int =>=>=> RelationalSchema.Column>> umbrella.size;
ClassDiagram.Attribut>> Sickness.begintime:Date =>=>=> RelationalSchema.Column>> sickness.begintime;
ClassDiagram.Attribut>> Sickness.type:String =>=>=> RelationalSchema.Column>> sickness.type PRIMARY KEY;
ClassDiagram.Attribut>> Sickness.classification:String =>=>=> RelationalSchema.Column>> sickness.classification PRIMARY KEY;
ClassDiagram.Attribut>> Garden.id:Long =>=>=> RelationalSchema.Column>> garden.id PRIMARY KEY;
ClassDiagram.Attribut>> Garden.name:String =>=>=> RelationalSchema.Column>> garden.name;
ClassDiagram.Attribut>> Giant.height:long =>=>=> RelationalSchema.Column>> giant.height;
ClassDiagram.Attribut>> FoodItem.id:Long =>=>=> RelationalSchema.Column>> fooditem.id PRIMARY KEY;
ClassDiagram.Attribut>> FoodItem.name:String =>=>=> RelationalSchema.Column>> fooditem.name;
ClassDiagram.Attribut>> FoodItem.version:Long =>=>=> RelationalSchema.Column>> fooditem.version;
ClassDiagram.Attribut>> WithGenericCollection.id:String =>=>=> RelationalSchema.Column>> withgenericcollection.id PRIMARY KEY;
ClassDiagram.Attribut>> WithGenericCollection.d:double =>=>=> RelationalSchema.Column>> withgenericcollection.d;
ClassDiagram.Attribut>> Parent.id:Integer =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.name:String =>=>=> RelationalSchema.Column>> parent.name;
ClassDiagram.Attribut>> Parent.siblings:Relatives<Child> =>=>=> RelationalSchema.Column>> parent.siblings;
ClassDiagram.Attribut>> DeskWithRawType.id:String =>=>=> RelationalSchema.Column>> deskwithrawtype.id PRIMARY KEY;
ClassDiagram.Attribut>> DeskWithRawType.name:String =>=>=> RelationalSchema.Column>> deskwithrawtype.name;
ClassDiagram.Attribut>> Child.id:Integer =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.name:String =>=>=> RelationalSchema.Column>> child.name;
ClassDiagram.Attribut>> SimpleMedicalHistory.lastup:Date =>=>=> RelationalSchema.Column>> simplemedicalhistory.lastup;
ClassDiagram.Attribut>> SimpleMedicalHistory.patient:SimplePerson =>=>=> RelationalSchema.Column>> simplemedicalhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> Feline.color:String =>=>=> RelationalSchema.Column>> feline.color;
ClassDiagram.Attribut>> House.GeneratedName:Key =>=>=> RelationalSchema.Column>> house.GeneratedName;
ClassDiagram.Attribut>> House.GeneratedName:Address =>=>=> RelationalSchema.Column>> house.GeneratedName;
ClassDiagram.Attribut>> House.rooms:Set<Room> =>=>=> RelationalSchema.Column>> house.rooms;
ClassDiagram.Attribut>> House.roomsbyname:Map<String,Room> =>=>=> RelationalSchema.Column>> house.roomsbyname;
ClassDiagram.Attribut>> House.roomsbysize:List<Room> =>=>=> RelationalSchema.Column>> house.roomsbysize;
ClassDiagram.Attribut>> SimplePerson.ssn:String =>=>=> RelationalSchema.Column>> simpleperson.ssn PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Person.age:Short =>=>=> RelationalSchema.Column>> person.age;
ClassDiagram.Attribut>> EmployeeWithRawType.id:String =>=>=> RelationalSchema.Column>> employeewithrawtype.id PRIMARY KEY;
ClassDiagram.Attribut>> EmployeeWithRawType.name:String =>=>=> RelationalSchema.Column>> employeewithrawtype.name;
ClassDiagram.Attribut>> Dog.name:String =>=>=> RelationalSchema.Column>> dog.name;
ClassDiagram.Attribut>> JoinedManyToOneOwner.id:Long =>=>=> RelationalSchema.Column>> joinedmanytooneowner.id PRIMARY KEY;
ClassDiagram.Attribut>> JoinedManyToOneOwner.GeneratedName:House =>=>=> RelationalSchema.Column>> joinedmanytooneowner.GeneratedName;
ClassDiagram.Attribut>> Cat.nickname:String =>=>=> RelationalSchema.Column>> cat.nickname;
ClassDiagram.Attribut>> Fridge.id:Long =>=>=> RelationalSchema.Column>> fridge.id PRIMARY KEY;
ClassDiagram.Attribut>> Fridge.brand:String =>=>=> RelationalSchema.Column>> fridge.brand;
ClassDiagram.Attribut>> Fridge.temperature:int =>=>=> RelationalSchema.Column>> fridge.temperature;
ClassDiagram.Attribut>> Flower.id:Long =>=>=> RelationalSchema.Column>> flower.id PRIMARY KEY;
ClassDiagram.Attribut>> Flower.name:String =>=>=> RelationalSchema.Column>> flower.name;
ClassDiagram.Attribut>> Cable.id:Integer =>=>=> RelationalSchema.Column>> cable.id PRIMARY KEY;
ClassDiagram.Attribut>> Cable.name:String =>=>=> RelationalSchema.Column>> cable.name;
ClassDiagram.Attribut>> Bell.id:Integer =>=>=> RelationalSchema.Column>> bell.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.id:Integer =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.brandname:String =>=>=> RelationalSchema.Column>> phone.brandname;
ClassDiagram.Attribut>> Phone.price:float =>=>=> RelationalSchema.Column>> phone.price;
ClassDiagram.Attribut>> QueryTest.salary:float =>=>=> RelationalSchema.Column>> querytest.salary;
ClassDiagram.Attribut>> Music.id:Integer =>=>=> RelationalSchema.Column>> music.id PRIMARY KEY;
ClassDiagram.Attribut>> Music.version:Integer =>=>=> RelationalSchema.Column>> music.version;
ClassDiagram.Attribut>> Music.name:String =>=>=> RelationalSchema.Column>> music.name;
ClassDiagram.Attribut>> Instrument.id:int =>=>=> RelationalSchema.Column>> instrument.id PRIMARY KEY;
ClassDiagram.Attribut>> Instrument.name:String =>=>=> RelationalSchema.Column>> instrument.name;
ClassDiagram.Attribut>> Instrument.GeneratedName:Type =>=>=> RelationalSchema.Column>> instrument.GeneratedName;
ClassDiagram.Attribut>> Musician.id:Integer =>=>=> RelationalSchema.Column>> musician.id PRIMARY KEY;
ClassDiagram.Attribut>> Musician.name:String =>=>=> RelationalSchema.Column>> musician.name;
ClassDiagram.Attribut>> Musician.favourite:Music =>=>=> RelationalSchema.Column>> musician.favourite;
ClassDiagram.Attribut>> DateTimeParameterTest.entitymanagerfactory:HibernateEntityManagerFactory =>=>=> RelationalSchema.Column>> datetimeparametertest.entitymanagerfactory;
ClassDiagram.Attribut>> DateTimeParameterTest.nowcal:GregorianCalendar =>=>=> RelationalSchema.Column>> datetimeparametertest.nowcal;
ClassDiagram.Attribut>> DateTimeParameterTest.now:Date =>=>=> RelationalSchema.Column>> datetimeparametertest.now;
ClassDiagram.Attribut>> User.id:int =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> Book.id:Integer =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.name:String =>=>=> RelationalSchema.Column>> book.name;
ClassDiagram.Attribut>> Book.version:Integer =>=>=> RelationalSchema.Column>> book.version;
ClassDiagram.Attribut>> Strawberry.size:Long =>=>=> RelationalSchema.Column>> strawberry.size;
ClassDiagram.Attribut>> Fruit.id:Long =>=>=> RelationalSchema.Column>> fruit.id PRIMARY KEY;
ClassDiagram.Attribut>> NoCacheableAnnotationEntity.id:Long =>=>=> RelationalSchema.Column>> nocacheableannotationentity.id PRIMARY KEY;
ClassDiagram.Attribut>> NoCacheableAnnotationEntity.name:String =>=>=> RelationalSchema.Column>> nocacheableannotationentity.name;
ClassDiagram.Attribut>> ExplicitlyCacheableEntity.id:Long =>=>=> RelationalSchema.Column>> explicitlycacheableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> ExplicitlyCacheableEntity.name:String =>=>=> RelationalSchema.Column>> explicitlycacheableentity.name;
ClassDiagram.Attribut>> ExplicitlyNonCacheableEntity.id:Long =>=>=> RelationalSchema.Column>> explicitlynoncacheableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> ExplicitlyNonCacheableEntity.name:String =>=>=> RelationalSchema.Column>> explicitlynoncacheableentity.name;
ClassDiagram.Attribut>> Order.id:int =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.total:int =>=>=> RelationalSchema.Column>> order.total;
ClassDiagram.Attribut>> SimpleEntity.id:Long =>=>=> RelationalSchema.Column>> simpleentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SimpleEntity.name:String =>=>=> RelationalSchema.Column>> simpleentity.name;
ClassDiagram.Attribut>> Child.id:Integer =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.id:Integer =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.nrofchildren:int =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> BasicCDITest.count:int =>=>=> RelationalSchema.Column>> basiccditest.count;
ClassDiagram.Attribut>> Animal.name:String =>=>=> RelationalSchema.Column>> animal.name;
ClassDiagram.Attribut>> Animal.id:Long =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Reptile.temperature:float =>=>=> RelationalSchema.Column>> reptile.temperature;
ClassDiagram.Attribut>> Mammal.mamalnbr:int =>=>=> RelationalSchema.Column>> mammal.mamalnbr;
ClassDiagram.Attribut>> Workload.id:Integer =>=>=> RelationalSchema.Column>> workload.id PRIMARY KEY;
ClassDiagram.Attribut>> Workload.name:String =>=>=> RelationalSchema.Column>> workload.name;
ClassDiagram.Attribut>> Workload.load:Integer =>=>=> RelationalSchema.Column>> workload.load;
Many-To-One relationship from ClassDiagram.Class>>Animal  to ClassDiagram.Class>>animal represented by ClassDiagram.Atrribute>>mother;
Many-To-One relationship from ClassDiagram.Class>>Animal  to ClassDiagram.Class>>animal represented by ClassDiagram.Atrribute>>father;
Many-To-One relationship from ClassDiagram.Class>>Wall  to ClassDiagram.Class>>wall represented by ClassDiagram.Atrribute>>left;
Many-To-One relationship from ClassDiagram.Class>>Wall  to ClassDiagram.Class>>wall represented by ClassDiagram.Atrribute>>right;
Many-To-One relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>item represented by ClassDiagram.Atrribute>>example;
Many-To-One relationship from ClassDiagram.Class>>Hoarder  to ClassDiagram.Class>>item represented by ClassDiagram.Atrribute>>favorite;
One-To-Many relationship from ClassDiagram.Class>>Hoarder  to ClassDiagram.Class>>Set<Item>;
One-To-Many relationship from ClassDiagram.Class>>Race  to ClassDiagram.Class>>List<Competitor>;
Many-To-One relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>category represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Empire  to ClassDiagram.Class>>Set<Colony>;
Many-To-One relationship from ClassDiagram.Class>>B3  to ClassDiagram.Class>>a represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B1>;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B2>;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B3>;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B4>;
Many-To-One relationship from ClassDiagram.Class>>C2  to ClassDiagram.Class>>b2 represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>B2  to ClassDiagram.Class>>a represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>B2  to ClassDiagram.Class>>Set<C2>;
Many-To-One relationship from ClassDiagram.Class>>B4  to ClassDiagram.Class>>a represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>B1  to ClassDiagram.Class>>a represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>B1  to ClassDiagram.Class>>Set<C1>;
Many-To-One relationship from ClassDiagram.Class>>C1  to ClassDiagram.Class>>b1 represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Competition  and ClassDiagram.Class>>list<competitor>: competition_competitor(Competition_ID:Competition [PK] #FK to Competition,list<competitor>_ID:list<competitor> [PK] #FK to list<competitor>);
One-To-One relationship between ClassDiagram.Class>>Kitchen  to ClassDiagram.Class>>oven represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>IncidentStatus  to ClassDiagram.Class>>incident represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Oven  to ClassDiagram.Class>>kitchen represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Incident  to ClassDiagram.Class>>incidentstatus represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Collection<LineItem>;
One-To-Many relationship from ClassDiagram.Class>>Address  to ClassDiagram.Class>>List<Phone>;
Many-To-One relationship from ClassDiagram.Class>>Entity2  to ClassDiagram.Class>>entity3 represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Alias  and ClassDiagram.Class>>collection<customer>: fks_anoop_cnoop(fk2_for_alias_table:Alias [PK] #FK to Alias,fk8_for_customer_table:collection<customer> [PK] #FK to collection<customer>);
Many-To-Many relationship between ClassDiagram.Class>>Alias  and ClassDiagram.Class>>collection<customer>: fks_anoop_cnoop(fk2_for_alias_table:Alias [PK] #FK to Alias,fk8_for_customer_table:collection<customer> [PK] #FK to collection<customer>);fks_alias_customer(fk_for_alias_table:Alias [PK] #FK to Alias,fk_for_customer_table:collection<customer> [PK] #FK to collection<customer>);
Many-To-One relationship from ClassDiagram.Class>>Entity1  to ClassDiagram.Class>>entity2 represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>home;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>work;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Collection<CreditCard>;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Collection<Order>;
One-To-Many relationship from ClassDiagram.Class>>Cat  to ClassDiagram.Class>>List<Kitten>;
One-To-One relationship between ClassDiagram.Class>>Conference  to ClassDiagram.Class>>extractiondocumentinfo represented by ClassDiagram.Atrribute>>extractiondocument;
One-To-One relationship between ClassDiagram.Class>>ExtractionDocument  to ClassDiagram.Class>>extractiondocumentinfo represented by ClassDiagram.Atrribute>>documentinfo;
Many-To-One relationship from ClassDiagram.Class>>Son  to ClassDiagram.Class>>parent represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Bottom  to ClassDiagram.Class>>middle represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Top  to ClassDiagram.Class>>List<Middle>;
Many-To-One relationship from ClassDiagram.Class>>Middle  to ClassDiagram.Class>>top represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Middle  to ClassDiagram.Class>>bottom represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Teacher  to ClassDiagram.Class>>Set<Student>;
One-To-One relationship between ClassDiagram.Class>>Teacher  to ClassDiagram.Class>>student represented by ClassDiagram.Atrribute>>favorite;
One-To-Many relationship from ClassDiagram.Class>>Troop  to ClassDiagram.Class>>Set<Soldier>;
Many-To-One relationship from ClassDiagram.Class>>Grandson  to ClassDiagram.Class>>son represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>Song  to ClassDiagram.Class>>author represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Soldier2  to ClassDiagram.Class>>troop2 represented by ClassDiagram.Atrribute>>troop;
One-To-Many relationship from ClassDiagram.Class>>ExtractionDocumentInfo  to ClassDiagram.Class>>List<ExtractionDocument>;
Many-To-One relationship from ClassDiagram.Class>>Student  to ClassDiagram.Class>>teacher represented by ClassDiagram.Atrribute>>primary;
One-To-One relationship between ClassDiagram.Class>>Student  to ClassDiagram.Class>>teacher represented by ClassDiagram.Atrribute>>favorite;
One-To-Many relationship from ClassDiagram.Class>>Company  to ClassDiagram.Class>>Set<Employee>;
One-To-One relationship between ClassDiagram.Class>>Company  to ClassDiagram.Class>>location represented by ClassDiagram.Atrribute>>GeneratedName;
set<manager>: employee_set<manager>(employeeID:employee [PK] #FK to employee,set<manager>ID:set<manager> [PK] #FK to set<manager>);
set<employee>: employee_set<manager>(employeeID:employee [PK] #FK to employee,set<manager>ID:set<manager> [PK] #FK to set<manager>);employee_set<employee>(employeeID:employee [PK] #FK to employee,set<employee>ID:set<employee> [PK] #FK to set<employee>);
One-To-Many relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>Set<Distributor>;
One-To-One relationship between ClassDiagram.Class>>Television  to ClassDiagram.Class>>remotecontrol represented by ClassDiagram.Atrribute>>control;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>salesperson;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>manager;
One-To-Many relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>>List<Feature>;
Many-To-One relationship from ClassDiagram.Class>>Feature  to ClassDiagram.Class>>product represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>X  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Y  to ClassDiagram.Class>>tranche represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>List<Tranche>;
One-To-One relationship between ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>preisregelung represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>x represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Tranche  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Tranche  to ClassDiagram.Class>>y represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Preisregelung  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Article  to ClassDiagram.Class>>author represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Garden  to ClassDiagram.Class>>List<Flower>;
Many-To-One relationship from ClassDiagram.Class>>WithGenericCollection  to ClassDiagram.Class>>withgenericcollection<? extends object> represented by ClassDiagram.Atrribute>>parent;
One-To-Many relationship from ClassDiagram.Class>>WithGenericCollection  to ClassDiagram.Class>>List<WithGenericCollection<? extends Object>>;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Set<Child>;
Many-To-Many relationship between ClassDiagram.Class>>DeskWithRawType  and ClassDiagram.Class>>collection: desk_empl(desk_fk:DeskWithRawType [PK] #FK to DeskWithRawType,empl_fk:collection [PK] #FK to collection);
One-To-One relationship between ClassDiagram.Class>>SimpleMedicalHistory  to ClassDiagram.Class>>simpleperson represented by ClassDiagram.Atrribute>>patient;
Many-To-One relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>parent represented by ClassDiagram.Atrribute>>daddy;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Set<Child>;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Pet  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Thing  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Employee   Descriminator>>Employee: String ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Employee  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Person  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Employee  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Fruit  ;
