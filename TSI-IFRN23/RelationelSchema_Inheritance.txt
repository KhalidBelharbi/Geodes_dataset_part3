identitytransactionalentities();

transactionalentities();

inheritancecachetest();

querycachetest();

nonstrictreadwritecacheconcurrencystrategytest();

nonstrictreadwritecacheconcurrencystrategywithconcurrentupdatetest(applyinterceptor:AtomicBoolean, endlatch:CountDownLatch);

readonlycacheconcurrencystrategytest();

sequencereadonlycacheconcurrencystrategytest();

identityreadonlycacheconcurrencystrategytest();

readonlycacheconcurrencystrategyimmutabletest();

collectioncachetest();

hydratedstatebenchmarktest(GeneratedName:MetricRegistry, GeneratedName:Timer, logreporter:Slf4jReporter, insertcount:int);

readwritecacheconcurrencystrategytest();

identityreadwritecacheconcurrencystrategytest();

sequencereadwritecacheconcurrencystrategytest();

repositoryreadwritecacheconcurrencystrategytest(reference:Repository);

readwritecacheconcurrencystrategywithlocktimeouttest(applyinterceptor:AtomicBoolean);

queryhydratedstatetest();

collectionhydratedstatetest();

entityhydratedstatetest();

lazyinitializationexceptionfixwithdtotest();

criteriaapimemberoftest();

nativequerytest();

mysqlscrollableresultsnostreamingtest(GeneratedName:MetricRegistry, GeneratedName:Timer, logreporter:Slf4jReporter, resultsetsize:int);

fetchallassociationstest();

nplusonelazyfetchingwithsubselectmanytoonefindentitytest();

postgresqlquerytofiletest();

postgresqlscrollableresultsstreamingtest(GeneratedName:MetricRegistry, logreporter:Slf4jReporter);

lazyinitializationoutsidetransactiontest();

naturalidtest();

eagerfetchingonetomanybagsfindentitytest();

lazyinitializationexceptionfixtest();

eagerfetchingmanytoonefindentitytest();

lazyattributewithmultipleentitiestest();

fetchentitieswithpaginationtest();

projectiontest();

distincttest();

plancachesizeperformancetest(GeneratedName:MetricRegistry, GeneratedName:Timer, logreporter:Slf4jReporter, plancachemaxsize:int);

nplusonelazyfetchingmanytoonefindentitytest();

mysqlscrollableresultsstreamingtest(GeneratedName:MetricRegistry, GeneratedName:Timer, logreporter:Slf4jReporter, resultsetsize:int);

hibernateproxytest();

eagerfetchingonetomanyfindentitytest();

lazyinitializationexceptiontest();

findentitytest();

namednativequeryparametertest();

defaultoptimisticlockingtest();

optimisticlockingonerootdirtyversioningtest(loadpostlatch:CountDownLatch, alicelatch:CountDownLatch);

cascadelocktest();

allpropertiesoptimisticlockingtest();

entityoptimisticlockingonunidirectionalcollectiontest();

cascadelockelementcollectiontest();

lockmodeoptimisticforceincrementtest();

entityoptimisticlockingonbidirectionalparentowningcollectiontest();

skiplockjobqueuetest();

followonlockingtest();

optimisticlockingonerootoneversiontest(loadpostlatch:CountDownLatch, alicelatch:CountDownLatch);

optimisticlockingchildupdatesrootversiontest();

optimisticlockingbidirectionalchildupdatesrootversiontest();

entityoptimisticlockingoverruleonbidirectionalparentowningcollectiontest();

lockmodepessimisticreadwriteintegrationtest(wait_millis:int, endlatch:CountDownLatch);

cascadelockmanytoonetest();

lockmodepessimisticforceincrementtest(startlatch:CountDownLatch, endlatch:CountDownLatch);

optimisticlockingrepeatablereadtest(loadpostlatch:CountDownLatch, alicelatch:CountDownLatch);

optimisticlockingonerootdirtyversioningselectbeforeupdatetest();

entityoptimisticlockingoncomponentcollectiontest();

abstractlockmodeoptimistictest();

cascadelockunidirectionalonetomanytest();

entityoptimisticlockingonbidirectionalchildowningcollectiontest();

entityfirstlevelcachereusetest();

optimisticlockingonerootentitymultipleversionstest(GeneratedName:ExecutorService, original:Post, GeneratedName:ExpectedException);

oracledeleteglobaltablestoredproceduretest(infoentrycount:int, errorentrycount:int, warnentrycount:int, totalentrycount:int, timestamp:Date, millisstep:long, batchsize:int);

oraclestoredproceduretest(entityprovider:BlogEntityProvider);

oraclecustomsqlwithstoredproceduretest(log:Logger);

oracledeletestoredproceduretest(infoentrycount:int, errorentrycount:int, warnentrycount:int, totalentrycount:int, timestamp:Date, millisstep:long, batchsize:int);

flexypoolentities();

resourcelocaldelayconnectionacquisitiontest(data_file_path:String, GeneratedName:SimpleDateFormat, warmupduration:long, measurementsduration:long, parsecount:int, GeneratedName:FlexyPoolDataSource);

hikaricpcockroachdbconnectionprovidertest();

defaulttimestamptest();

tableperclasstest();

sortindexcollectioninheritance();

singletabletest();

jointablebulkdeletetest();

mappedsuperclasstest();

mysqlsingletabletest();

topictype(id:Byte [PK], name:String, description:String);

topicstatistics(id:Long [PK], GeneratedName:Topic #FK to(Topic), views:long);

post(content:String);

board(id:Long [PK], name:String);

integerdiscriminatordefaulttest();

announcement(validuntil:Date);

jointablediscriminatortest();

jointabletest();

smsnotification(phonenumber:String);

notification(id:Long [PK], firstname:String, lastname:String, createdon:Date);

emailnotification(emailaddress:String);

consistencytest();

post(id:Long [PK], title:String, details:PostDetails #FK to(Post));

post_tag(post_id:Post [PK] #FK to Post,tag_id:Tag [PK] #FK to Tag);

tag(id:Long [PK], name:String);

postdetails(id:Long [PK], createdon:Date, createdby:String, GeneratedName:Post #FK to(Post));

postcomment(id:Long [PK], GeneratedName:Post #FK to(Post), review:String);

refreshtest();

persistidentitytest();

ordertest(postid:Long);

identityordertest(postid:Long);

batchprocessingtest();

alwaysflushtest(log:Logger);

readonlyquerytest();

hibernatesavesequencetest();

sessionalwaysflushtest(log:Logger);

defaultdirtycheckingperformancetest(GeneratedName:MetricRegistry, GeneratedName:Timer, logreporter:Slf4jReporter, entitycount:int, iterationcount:int, postids:List<Long>, enablemetrics:boolean);

persistsequencetest();

defaultnamingtest();

jpacalculatedtest();

jpacalculatedpostloadtest();

formulatest();

mapsidwithonetoonetest();

generatedtest();

fluentsetterstest();

optionalattributetest();

enumpostgresqltest();

enumstringtest();

enumordinaltest();

joinformulatest();

latestchildjoinformulatest();

hydratedstatelistenertest();

jpafluentinterfacetest();

defaultupdatetest();

softdeletetest();

softdeleteversiontest();

dynamicupdatetest();

mapsidwithmanytoonetest();

joinformulacollationtest();

encrypttest();

jmxtest();

criteriafetchaliastest();

criterianestedquerytest();

criteriacountgroupbytest();

bidirectionalonetomanyuniquenesstest();

bidirectionalonetomanyjoincolumntest();

bidirectionalonetoonemapsidtest();

twomapsidstest();

bidirectionalonetomanytest();

unidirectionalonetomanyjoincolumnnotnulltest();

bidirectionalonetoonetest();

unidirectionalonetoonetest();

unidirectionalonetomanysetidequalstest();

bidirectionalmanyasonetomanyextracolumnstestv2();

unidirectionalonetomanyjoincolumnsettest();

elementcollectionnestedtest();

manytoonejoincolumnnonpktest();

elementcollectiontest();

bidirectionalmanytomanylisttest();

bidirectionalmanyasonetomanywithoutembeddedidtest();

bidirectionalmanyasonetomanytest();

unidirectionalmanyasonetomanyextracolumnstest();

unidirectionalorderedonetomanytest();

unidirectionalonetomanysettest();

manytoonetest();

onetoonemapsidtest();

elementcollectionwithcollectiontabletest();

unidirectionalonetomanytest();

introassociationtest();

bidirectionalmanyasonetomanyextracolumnstestv1();

bidirectionalmanytomanytest();

allassociationtest();

bidirectionalmanytomanyordercolumntest();

unidirectionalonetomanyjoincolumntest();

unidirectionalonetomanyjoincolumnandordercolumntest();

bidirectionalmanyasonetomanyextracolumnstest();

unidirectionalmanytomanytest();

bidirectionalmanytomanysettest();

bidirectionalmanyasonetomanyordercolumntest();

flywayentities();

charactertypetest();

mysqljsontypetest();

postgresqljsonnodebinarytypetest();

postgresqljsonstringtypetest();

postgresqljsonbinarytypetest();

longtonumerictypetest();

localdatetimetest();

enumarraytypetest();

arraytypetest();

postgresuuidtest();

datetimetest();

ipv4typetest();

mysqltextstringtest();

enversauditeddefaultstrategytest();

postgresqlcasttest();

updatesubquerytest();

spatialtest();

runningtotaltest();

escapekeywordtest();

windowfunctiongroupingtest();

windowfunctionupdatebygroupingtest();

postcomment(id:Long [PK], parent:PostComment #FK to(Post), description:String, GeneratedName:Status);

postcommentscoretest();

abstractpostcommentscoreperformancetest(GeneratedName:MetricRegistry, timer:com.codahale.metrics.Timer, logreporter:Slf4jReporter, 1:User, 2:User, postcount:int, commentcount:int);

post(id:Long [PK], title:String);

postcomment(id:Long [PK], GeneratedName:Post #FK to(Post), parent:PostComment #FK to(Post), createdon:Date, review:String, score:int);

nativequerywithcustomschematest();

property(id:PropertyId, value:String);

component(name:String [PK]);

service(name:String [PK]);

rowvalueexpressiontest();

escapeliketest();

country(id:Long [PK], name:String, locale:String);

person(id:Long [PK], name:String, locale:String);

post(id:Long [PK], title:String, createdon:Timestamp, createdby:String, updatedon:Timestamp, updatedby:String, version:Integer);

nativequeryentitymappingtest();

naturalidequalitytest();

defaultequalitytest();

properidequalitytest();

defaultidequalitytest();

book(id:Long [PK], title:String, createdby:String, createdon:Timestamp);

updatabletest();

batchexceptiontest();

identitybatchingtest();

batchmergevsupdatetest();

deletingwithsqlcascadebatchingtest();

deletingwithoutcascadebatchingtest();

persistencecontextextendedbatchtest(log:Logger);

batchingtest();

batchtest(log:Logger);

versionedbatchingtest();

sqlstatementcountvalidatorjoinfetchtest();

sqlstatementcountvalidatortest();

hibernateloggingtest();

datasourceproxytest();

p6spytest();

assignedsequencestylegeneratortest();

pooledsequenceidentifiertest();

entityidentifiercockroachdbtest();

sqlserverscopeidentity();

globalidentifiergeneratorscopetest();

uuid2identifiertest();

assigneduuididentifiertest();

uuididentifiertest();

pooledlosequenceidentifiertest();

compositeidmanytoonewithcompanyinidtest();

compositeidonetoonetest();

compositeidmanytoonetest();

compositeidgeneratedidclasstest();

compositeididentitygeneratedtest();

stringsequenceidentifiertest();

embeddablecollectionaccessstrategytest();

overrideaccessstrategytest();

embeddableaccessstrategytest();

table5postentityprovider();

sequence1postentityprovider();

sequence10postentityprovider();

table50postentityprovider();

table10postentityprovider();

sequence50postentityprovider();

sequence5postentityprovider();

table1postentityprovider();

oraclerowidtest();

assignedidentitygeneratortest();

autoidentifiermysqltest();

nativeidentifiermysqltest();

tableallocationsizeidentifiertest();

post(id:Long [PK]);

identitypostentityprovider();

tablepostentityprovider();

sequencepostentityprovider();

tableidentifiertest();

autoidentifierwithsequencegeneratortest();

postgrestablegeneratortest();

sequenceallocationsizeidentifiertest();

assignedtablebatchidentifiertest();

identityidentifiertest();

sequenceidentifiertest();

simplesequenceidentifiertest();

post(id:Long [PK], title:String);

hiloidentifiertest();

pooleddefaultsequenceidentifiertest();

sequencevstablegeneratortest();

entityidentifiertimestampcockroachdbtest();

assignedidentifiertest();

simpletableidentifiertest();

autoincrementbatchentityprovider();

blogentityprovider(instance:EntityProvider);

postdetailscommentsentityprovider();

sequencebatchentityprovider();

taskentityprovider();

bankentityprovider();

indexentityprovider();

abstractlinearizabilityphenomenatest();

mvccpostgresqltest(alicelatch:CountDownLatch, boblatch:CountDownLatch, endlatch:CountDownLatch);

abstractpredicatelocktest(wait_millis:int, alicelatch:CountDownLatch, boblatch:CountDownLatch);

abstracttablelocktest(insert_department:String, insert_employee:String);

post(id:Long [PK], title:String, details:PostDetails #FK to(Post));

post_tag(post_id:Post [PK] #FK to Post,tag_id:Tag [PK] #FK to Tag);

postdetails(id:Long [PK], createdon:Date, createdby:String, GeneratedName:Post #FK to(Post));

attachment(id:Long [PK], name:String, GeneratedName:MediaType, content:byte);

tag(id:Long [PK], name:String);

postcomment(id:Long [PK], GeneratedName:Post #FK to(Post), review:String);

event(GeneratedName:Location);

participant(GeneratedName:Ticket, GeneratedName:Event #FK to(event));

topic(id:Long [PK], title:String, owner:String, createdon:Date, GeneratedName:Board #FK to(Board), type:TopicType #FK to(Topic), topic_type_id: String);



** PROGRAM TYPE: JPA+Hibernate(Hybrid)