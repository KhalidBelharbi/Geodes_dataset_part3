ClassDiagram.Class>> GeneratedValueTest =>=>=> RelationalSchema.Table>> generatedvaluetest;
ClassDiagram.Class>> ProxyInterfaceClassLoaderTest =>=>=> RelationalSchema.Table>> proxyinterfaceclassloadertest;
ClassDiagram.Class>> BatchingBatchFailureTest =>=>=> RelationalSchema.Table>> batchingbatchfailuretest;
ClassDiagram.Class>> NonBatchingBatchFailureTest =>=>=> RelationalSchema.Table>> nonbatchingbatchfailuretest;
ClassDiagram.Class>> Matrix =>=>=> RelationalSchema.Table>> matrix;
ClassDiagram.Class>> Child2 =>=>=> RelationalSchema.Table>> child2;
ClassDiagram.Class>> Child1 =>=>=> RelationalSchema.Table>> child1;
ClassDiagram.Class>> Parent1 =>=>=> RelationalSchema.Table>> parent1;
ClassDiagram.Class>> TableA =>=>=> RelationalSchema.Table>> tablea;
ClassDiagram.Class>> TableB =>=>=> RelationalSchema.Table>> tableb;
ClassDiagram.Class>> ATable =>=>=> RelationalSchema.Table>> atable;
ClassDiagram.Class>> VariousTypesEntity =>=>=> RelationalSchema.Table>> varioustypesentity;
ClassDiagram.Class>> Issue =>=>=> RelationalSchema.Table>> issue;
ClassDiagram.Class>> ExplicitlyNamedConverterClassesTest =>=>=> RelationalSchema.Table>> explicitlynamedconverterclassestest;
ClassDiagram.Class>> NullHandlingTests =>=>=> RelationalSchema.Table>> nullhandlingtests;
ClassDiagram.Class>> QueryTest =>=>=> RelationalSchema.Table>> querytest;
ClassDiagram.Class>> AttributeConverterTest =>=>=> RelationalSchema.Table>> attributeconvertertest;
ClassDiagram.Class>> SimpleConvertsAnnotationTest =>=>=> RelationalSchema.Table>> simpleconvertsannotationtest;
ClassDiagram.Class>> XmlWithExplicitConvertAnnotationsTest =>=>=> RelationalSchema.Table>> xmlwithexplicitconvertannotationstest;
ClassDiagram.Class>> ExplicitDateConvertersTest =>=>=> RelationalSchema.Table>> explicitdateconverterstest;
ClassDiagram.Class>> ExplicitEnumConvertersTest =>=>=> RelationalSchema.Table>> explicitenumconverterstest;
ClassDiagram.Class>> ElementCollectionTests =>=>=> RelationalSchema.Table>> elementcollectiontests;
ClassDiagram.Class>> CollectionElementExplicitConversionTest =>=>=> RelationalSchema.Table>> collectionelementexplicitconversiontest;
ClassDiagram.Class>> CollectionElementConversionTest =>=>=> RelationalSchema.Table>> collectionelementconversiontest;
ClassDiagram.Class>> CollectionCompositeElementConversionTest =>=>=> RelationalSchema.Table>> collectioncompositeelementconversiontest;
ClassDiagram.Class>> AndNationalizedTests =>=>=> RelationalSchema.Table>> andnationalizedtests;
ClassDiagram.Class>> SimpleXmlOverriddenTest =>=>=> RelationalSchema.Table>> simplexmloverriddentest;
ClassDiagram.Class>> SimpleOverriddenConverterTest =>=>=> RelationalSchema.Table>> simpleoverriddenconvertertest;
ClassDiagram.Class>> SimpleConvertAnnotationTest =>=>=> RelationalSchema.Table>> simpleconvertannotationtest;
ClassDiagram.Class>> DirtyCheckingTest =>=>=> RelationalSchema.Table>> dirtycheckingtest;
ClassDiagram.Class>> BasicJodaTimeConversionTest =>=>=> RelationalSchema.Table>> basicjodatimeconversiontest;
ClassDiagram.Class>> MapKeyAttributeConverterTest =>=>=> RelationalSchema.Table>> mapkeyattributeconvertertest;
ClassDiagram.Class>> MapKeyConversionTest =>=>=> RelationalSchema.Table>> mapkeyconversiontest;
ClassDiagram.Class>> MapElementConversionTest =>=>=> RelationalSchema.Table>> mapelementconversiontest;
ClassDiagram.Class>> SimpleEmbeddableOverriddenConverterTest =>=>=> RelationalSchema.Table>> simpleembeddableoverriddenconvertertest;
ClassDiagram.Class>> Component =>=>=> RelationalSchema.Table>> component;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> BatchLoadableEntity =>=>=> RelationalSchema.Table>> batchloadableentity;
ClassDiagram.Class>> StoredProcedureResultSetMappingTest =>=>=> RelationalSchema.Table>> storedprocedureresultsetmappingtest;
ClassDiagram.Class>> PostgresRefCursorSupportTest =>=>=> RelationalSchema.Table>> postgresrefcursorsupporttest;
ClassDiagram.Class>> NativeQuerySyncSpaceCachingTest =>=>=> RelationalSchema.Table>> nativequerysyncspacecachingtest;
ClassDiagram.Class>> NumValue =>=>=> RelationalSchema.Table>> numvalue;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Group =>=>=> RelationalSchema.Table>> group;
ClassDiagram.Class>> Membership =>=>=> RelationalSchema.Table>> membership;
ClassDiagram.Class>> SimpleNationalizedTest =>=>=> RelationalSchema.Table>> simplenationalizedtest;
ClassDiagram.Class>> NationalizedLobFieldTest =>=>=> RelationalSchema.Table>> nationalizedlobfieldtest;
ClassDiagram.Class>> SchemaExportWithIndexAndDefaultSchema =>=>=> RelationalSchema.Table>> schemaexportwithindexanddefaultschema;
ClassDiagram.Class>> SchemaUpdateWithViewsTest =>=>=> RelationalSchema.Table>> schemaupdatewithviewstest;
ClassDiagram.Class>> SequenceReadingTest =>=>=> RelationalSchema.Table>> sequencereadingtest;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Group =>=>=> RelationalSchema.Table>> group;
ClassDiagram.Class>> UserSetting =>=>=> RelationalSchema.Table>> usersetting;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> SchemaOneEntity =>=>=> RelationalSchema.Table>> schemaoneentity;
ClassDiagram.Class>> SchemaTwoEntity =>=>=> RelationalSchema.Table>> schematwoentity;
ClassDiagram.Class>> ForeignKeyMigrationTest =>=>=> RelationalSchema.Table>> foreignkeymigrationtest;
ClassDiagram.Class>> SchemaUpdateFormatterTest =>=>=> RelationalSchema.Table>> schemaupdateformattertest;
ClassDiagram.Class>> SchemaUpdateWithFunctionIndexTest =>=>=> RelationalSchema.Table>> schemaupdatewithfunctionindextest;
ClassDiagram.Class>> SchemaExportWithGlobalQuotingEnabledTest =>=>=> RelationalSchema.Table>> schemaexportwithglobalquotingenabledtest;
ClassDiagram.Class>> Step =>=>=> RelationalSchema.Table>> step;
ClassDiagram.Class>> GroupStep =>=>=> RelationalSchema.Table>> groupstep;
ClassDiagram.Class>> SchemaUpdateGeneratingOnlyScriptFileTest =>=>=> RelationalSchema.Table>> schemaupdategeneratingonlyscriptfiletest;
ClassDiagram.Class>> TestFkUpdating =>=>=> RelationalSchema.Table>> testfkupdating;
ClassDiagram.Class>> MixedFieldPropertyAnnotationTest =>=>=> RelationalSchema.Table>> mixedfieldpropertyannotationtest;
ClassDiagram.Class>> ImplicitCompositeKeyJoinTest =>=>=> RelationalSchema.Table>> implicitcompositekeyjointest;
ClassDiagram.Class>> MigrationTest =>=>=> RelationalSchema.Table>> migrationtest;
ClassDiagram.Class>> SchemaUpdateDelimiterTest =>=>=> RelationalSchema.Table>> schemaupdatedelimitertest;
ClassDiagram.Class>> AnnotatedDetail =>=>=> RelationalSchema.Table>> annotateddetail;
ClassDiagram.Class>> AnnotatedMaster =>=>=> RelationalSchema.Table>> annotatedmaster;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> ListActionRole =>=>=> RelationalSchema.Table>> listactionrole;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Bid =>=>=> RelationalSchema.Table>> bid;
ClassDiagram.Class>> Building =>=>=> RelationalSchema.Table>> building;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> D =>=>=> RelationalSchema.Table>> d;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> Another =>=>=> RelationalSchema.Table>> another;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> AllCached =>=>=> RelationalSchema.Table>> allcached;
ClassDiagram.Class>> Principal =>=>=> RelationalSchema.Table>> principal;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Principal =>=>=> RelationalSchema.Table>> principal;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> SimpleEntity =>=>=> RelationalSchema.Table>> simpleentity;
ClassDiagram.Class>> ExtendedAssociationManagementTestTasK =>=>=> RelationalSchema.Table>> extendedassociationmanagementtesttask;
ClassDiagram.Class>> ExtendedEnhancementTestTask =>=>=> RelationalSchema.Table>> extendedenhancementtesttask;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Inventory =>=>=> RelationalSchema.Table>> inventory;
ClassDiagram.Class>> HHH9529TestTask =>=>=> RelationalSchema.Table>> hhh9529testtask;
ClassDiagram.Class>> SimpleEntity =>=>=> RelationalSchema.Table>> simpleentity;
ClassDiagram.Class>> MyEntity =>=>=> RelationalSchema.Table>> myentity;
ClassDiagram.Class>> WorkOrder =>=>=> RelationalSchema.Table>> workorder;
ClassDiagram.Class>> Group =>=>=> RelationalSchema.Table>> group;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> CustomerInventory =>=>=> RelationalSchema.Table>> customerinventory;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Vehicle =>=>=> RelationalSchema.Table>> vehicle;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> CompositeMergeTestTask =>=>=> RelationalSchema.Table>> compositemergetesttask;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> EntityWithStringCompositeKey =>=>=> RelationalSchema.Table>> entitywithstringcompositekey;
ClassDiagram.Class>> EntityWithCompositeKey =>=>=> RelationalSchema.Table>> entitywithcompositekey;
ClassDiagram.Class>> LobEntity =>=>=> RelationalSchema.Table>> lobentity;
ClassDiagram.Class>> InvalidEnumeratedJavaTypeTest =>=>=> RelationalSchema.Table>> invalidenumeratedjavatypetest;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Door =>=>=> RelationalSchema.Table>> door;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> ListAddTest =>=>=> RelationalSchema.Table>> listaddtest;
ClassDiagram.Class>> MultipleSessionCollectionTest =>=>=> RelationalSchema.Table>> multiplesessioncollectiontest;
ClassDiagram.Class>> MultipleSessionCollectionWarningTest =>=>=> RelationalSchema.Table>> multiplesessioncollectionwarningtest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Contact =>=>=> RelationalSchema.Table>> contact;
ClassDiagram.Class>> ListIndexReferenceFromListElementTest =>=>=> RelationalSchema.Table>> listindexreferencefromlistelementtest;
ClassDiagram.Class>> VersionedCascadeOne =>=>=> RelationalSchema.Table>> versionedcascadeone;
ClassDiagram.Class>> UnversionedCascadeOne =>=>=> RelationalSchema.Table>> unversionedcascadeone;
ClassDiagram.Class>> UnversionedNoCascadeOne =>=>=> RelationalSchema.Table>> unversionednocascadeone;
ClassDiagram.Class>> VersionedNoCascadeOne =>=>=> RelationalSchema.Table>> versionednocascadeone;
ClassDiagram.Class>> Many =>=>=> RelationalSchema.Table>> many;
ClassDiagram.Class>> Email =>=>=> RelationalSchema.Table>> email;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Lion =>=>=> RelationalSchema.Table>> lion;
ClassDiagram.Class>> Tiger =>=>=> RelationalSchema.Table>> tiger;
ClassDiagram.Class>> Zoo =>=>=> RelationalSchema.Table>> zoo;
ClassDiagram.Class>> MapHolder =>=>=> RelationalSchema.Table>> mapholder;
ClassDiagram.Class>> MapKey =>=>=> RelationalSchema.Table>> mapkey;
ClassDiagram.Class>> MapValue =>=>=> RelationalSchema.Table>> mapvalue;
ClassDiagram.Class>> PersistentMapTest =>=>=> RelationalSchema.Table>> persistentmaptest;
ClassDiagram.Class>> QualifiedTableNamingTest =>=>=> RelationalSchema.Table>> qualifiedtablenamingtest;
ClassDiagram.Class>> ConstraintTest =>=>=> RelationalSchema.Table>> constrainttest;
ClassDiagram.Class>> InsertOrderingWithInheritance =>=>=> RelationalSchema.Table>> insertorderingwithinheritance;
ClassDiagram.Class>> ConfEntity =>=>=> RelationalSchema.Table>> confentity;
ClassDiagram.Class>> UserConfEntity =>=>=> RelationalSchema.Table>> userconfentity;
ClassDiagram.Class>> Table1 =>=>=> RelationalSchema.Table>> table1;
ClassDiagram.Class>> UserEntity =>=>=> RelationalSchema.Table>> userentity;
ClassDiagram.Class>> Table2 =>=>=> RelationalSchema.Table>> table2;
ClassDiagram.Class>> A320 =>=>=> RelationalSchema.Table>> a320;
ClassDiagram.Class>> Port =>=>=> RelationalSchema.Table>> port;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Class>> SavingsAccount =>=>=> RelationalSchema.Table>> savingsaccount;
ClassDiagram.Class>> A320b =>=>=> RelationalSchema.Table>> a320b;
ClassDiagram.Class>> PowerDrill =>=>=> RelationalSchema.Table>> powerdrill;
ClassDiagram.Class>> Topic =>=>=> RelationalSchema.Table>> topic;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> Narrative =>=>=> RelationalSchema.Table>> narrative;
ClassDiagram.Class>> Peugot =>=>=> RelationalSchema.Table>> peugot;
ClassDiagram.Class>> Forest =>=>=> RelationalSchema.Table>> forest;
ClassDiagram.Class>> Player =>=>=> RelationalSchema.Table>> player;
ClassDiagram.Class>> ContactDetails =>=>=> RelationalSchema.Table>> contactdetails;
ClassDiagram.Class>> Flight =>=>=> RelationalSchema.Table>> flight;
ClassDiagram.Class>> Month =>=>=> RelationalSchema.Table>> month;
ClassDiagram.Class>> Tree =>=>=> RelationalSchema.Table>> tree;
ClassDiagram.Class>> Forest2 =>=>=> RelationalSchema.Table>> forest2;
ClassDiagram.Class>> Name =>=>=> RelationalSchema.Table>> name;
ClassDiagram.Class>> CommunityBid =>=>=> RelationalSchema.Table>> communitybid;
ClassDiagram.Class>> SoccerTeam =>=>=> RelationalSchema.Table>> soccerteam;
ClassDiagram.Class>> FormalLastName =>=>=> RelationalSchema.Table>> formallastname;
ClassDiagram.Class>> Drill =>=>=> RelationalSchema.Table>> drill;
ClassDiagram.Class>> Ransom =>=>=> RelationalSchema.Table>> ransom;
ClassDiagram.Class>> Race =>=>=> RelationalSchema.Table>> race;
ClassDiagram.Class>> ZipCode =>=>=> RelationalSchema.Table>> zipcode;
ClassDiagram.Class>> Bid =>=>=> RelationalSchema.Table>> bid;
ClassDiagram.Class>> LocalContactDetails =>=>=> RelationalSchema.Table>> localcontactdetails;
ClassDiagram.Class>> WashingMachine =>=>=> RelationalSchema.Table>> washingmachine;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Mother =>=>=> RelationalSchema.Table>> mother;
ClassDiagram.Class>> Father =>=>=> RelationalSchema.Table>> father;
ClassDiagram.Class>> Son =>=>=> RelationalSchema.Table>> son;
ClassDiagram.Class>> Country =>=>=> RelationalSchema.Table>> country;
ClassDiagram.Class>> EntityWithAnElementCollection =>=>=> RelationalSchema.Table>> entitywithanelementcollection;
ClassDiagram.Class>> BugSystem =>=>=> RelationalSchema.Table>> bugsystem;
ClassDiagram.Class>> Products =>=>=> RelationalSchema.Table>> products;
ClassDiagram.Class>> Query =>=>=> RelationalSchema.Table>> query;
ClassDiagram.Class>> Matrix =>=>=> RelationalSchema.Table>> matrix;
ClassDiagram.Class>> Owner =>=>=> RelationalSchema.Table>> owner;
ClassDiagram.Class>> Boy =>=>=> RelationalSchema.Table>> boy;
ClassDiagram.Class>> TestCourse =>=>=> RelationalSchema.Table>> testcourse;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Sale =>=>=> RelationalSchema.Table>> sale;
ClassDiagram.Class>> Widgets =>=>=> RelationalSchema.Table>> widgets;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> RaceExecution =>=>=> RelationalSchema.Table>> raceexecution;
ClassDiagram.Class>> Poi =>=>=> RelationalSchema.Table>> poi;
ClassDiagram.Class>> Show =>=>=> RelationalSchema.Table>> show;
ClassDiagram.Class>> PersonAddress =>=>=> RelationalSchema.Table>> personaddress;
ClassDiagram.Class>> Computer =>=>=> RelationalSchema.Table>> computer;
ClassDiagram.Class>> ShowDescription =>=>=> RelationalSchema.Table>> showdescription;
ClassDiagram.Class>> Hardware =>=>=> RelationalSchema.Table>> hardware;
ClassDiagram.Class>> Device =>=>=> RelationalSchema.Table>> device;
ClassDiagram.Class>> DeviceGroupConfig =>=>=> RelationalSchema.Table>> devicegroupconfig;
ClassDiagram.Class>> ManagedDevice =>=>=> RelationalSchema.Table>> manageddevice;
ClassDiagram.Class>> Owner =>=>=> RelationalSchema.Table>> owner;
ClassDiagram.Class>> TrousersZip =>=>=> RelationalSchema.Table>> trouserszip;
ClassDiagram.Class>> Owner =>=>=> RelationalSchema.Table>> owner;
ClassDiagram.Class>> Client =>=>=> RelationalSchema.Table>> client;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Trousers =>=>=> RelationalSchema.Table>> trousers;
ClassDiagram.Class>> Heart =>=>=> RelationalSchema.Table>> heart;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> SerialNumber =>=>=> RelationalSchema.Table>> serialnumber;
ClassDiagram.Class>> PartyAffiliate =>=>=> RelationalSchema.Table>> partyaffiliate;
ClassDiagram.Class>> Body =>=>=> RelationalSchema.Table>> body;
ClassDiagram.Class>> Party =>=>=> RelationalSchema.Table>> party;
ClassDiagram.Class>> OwnerAddress =>=>=> RelationalSchema.Table>> owneraddress;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Shipment =>=>=> RelationalSchema.Table>> shipment;
ClassDiagram.Class>> PropertyList =>=>=> RelationalSchema.Table>> propertylist;
ClassDiagram.Class>> PropertySet =>=>=> RelationalSchema.Table>> propertyset;
ClassDiagram.Class>> LongProperty =>=>=> RelationalSchema.Table>> longproperty;
ClassDiagram.Class>> PropertyMap =>=>=> RelationalSchema.Table>> propertymap;
ClassDiagram.Class>> CharProperty =>=>=> RelationalSchema.Table>> charproperty;
ClassDiagram.Class>> IntegerProperty =>=>=> RelationalSchema.Table>> integerproperty;
ClassDiagram.Class>> StringProperty =>=>=> RelationalSchema.Table>> stringproperty;
ClassDiagram.Class>> TvMagazin =>=>=> RelationalSchema.Table>> tvmagazin;
ClassDiagram.Class>> Channel =>=>=> RelationalSchema.Table>> channel;
ClassDiagram.Class>> SomeEntity =>=>=> RelationalSchema.Table>> someentity;
ClassDiagram.Class>> CardField =>=>=> RelationalSchema.Table>> cardfield;
ClassDiagram.Class>> Card =>=>=> RelationalSchema.Table>> card;
ClassDiagram.Class>> Key =>=>=> RelationalSchema.Table>> key;
ClassDiagram.Class>> OrderLine =>=>=> RelationalSchema.Table>> orderline;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Presenter =>=>=> RelationalSchema.Table>> presenter;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> LittleGenius =>=>=> RelationalSchema.Table>> littlegenius;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> TvProgramIdClass =>=>=> RelationalSchema.Table>> tvprogramidclass;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> TvProgram =>=>=> RelationalSchema.Table>> tvprogram;
ClassDiagram.Class>> JoinColumnOrFormulaTest =>=>=> RelationalSchema.Table>> joincolumnorformulatest;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> TennisMatch =>=>=> RelationalSchema.Table>> tennismatch;
ClassDiagram.Class>> SocialSecurityPhysicalAccount =>=>=> RelationalSchema.Table>> socialsecurityphysicalaccount;
ClassDiagram.Class>> Administration =>=>=> RelationalSchema.Table>> administration;
ClassDiagram.Class>> BusTrip =>=>=> RelationalSchema.Table>> bustrip;
ClassDiagram.Class>> JPAOverriddenAnnotationReaderTest =>=>=> RelationalSchema.Table>> jpaoverriddenannotationreadertest;
ClassDiagram.Class>> SocialSecurityMoralAccount =>=>=> RelationalSchema.Table>> socialsecuritymoralaccount;
ClassDiagram.Class>> Match =>=>=> RelationalSchema.Table>> match;
ClassDiagram.Class>> Staff =>=>=> RelationalSchema.Table>> staff;
ClassDiagram.Class>> ProfessionalAgreement =>=>=> RelationalSchema.Table>> professionalagreement;
ClassDiagram.Class>> Antenna =>=>=> RelationalSchema.Table>> antenna;
ClassDiagram.Class>> DBTimestamped =>=>=> RelationalSchema.Table>> dbtimestamped;
ClassDiagram.Class>> VMTimestamped =>=>=> RelationalSchema.Table>> vmtimestamped;
ClassDiagram.Class>> Truck =>=>=> RelationalSchema.Table>> truck;
ClassDiagram.Class>> Conductor =>=>=> RelationalSchema.Table>> conductor;
ClassDiagram.Class>> Vehicule =>=>=> RelationalSchema.Table>> vehicule;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> FavoriteThings =>=>=> RelationalSchema.Table>> favoritethings;
ClassDiagram.Class>> EntityWithNestedEmbeddables =>=>=> RelationalSchema.Table>> entitywithnestedembeddables;
ClassDiagram.Class>> WealthyPerson =>=>=> RelationalSchema.Table>> wealthyperson;
ClassDiagram.Class>> SpreadDeal =>=>=> RelationalSchema.Table>> spreaddeal;
ClassDiagram.Class>> RegionalArticle =>=>=> RelationalSchema.Table>> regionalarticle;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Alias =>=>=> RelationalSchema.Table>> alias;
ClassDiagram.Class>> VanillaSwap =>=>=> RelationalSchema.Table>> vanillaswap;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Country =>=>=> RelationalSchema.Table>> country;
ClassDiagram.Class>> InternetProvider =>=>=> RelationalSchema.Table>> internetprovider;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> AddressType =>=>=> RelationalSchema.Table>> addresstype;
ClassDiagram.Class>> Manager =>=>=> RelationalSchema.Table>> manager;
ClassDiagram.Class>> CorpType =>=>=> RelationalSchema.Table>> corptype;
ClassDiagram.Class>> Nationality =>=>=> RelationalSchema.Table>> nationality;
ClassDiagram.Class>> Passport =>=>=> RelationalSchema.Table>> passport;
ClassDiagram.Class>> Dummy =>=>=> RelationalSchema.Table>> dummy;
ClassDiagram.Class>> Paper =>=>=> RelationalSchema.Table>> paper;
ClassDiagram.Class>> SomeGuy =>=>=> RelationalSchema.Table>> someguy;
ClassDiagram.Class>> Price =>=>=> RelationalSchema.Table>> price;
ClassDiagram.Class>> WildEntity =>=>=> RelationalSchema.Table>> wildentity;
ClassDiagram.Class>> PaperType =>=>=> RelationalSchema.Table>> papertype;
ClassDiagram.Class>> DNA =>=>=> RelationalSchema.Table>> dna;
ClassDiagram.Class>> Classes =>=>=> RelationalSchema.Table>> classes;
ClassDiagram.Class>> Gene =>=>=> RelationalSchema.Table>> gene;
ClassDiagram.Class>> Contest =>=>=> RelationalSchema.Table>> contest;
ClassDiagram.Class>> Competitor =>=>=> RelationalSchema.Table>> competitor;
ClassDiagram.Class>> IncorrectEntity =>=>=> RelationalSchema.Table>> incorrectentity;
ClassDiagram.Class>> Boat =>=>=> RelationalSchema.Table>> boat;
ClassDiagram.Class>> VersionedCompiledCode =>=>=> RelationalSchema.Table>> versionedcompiledcode;
ClassDiagram.Class>> LobTestEntity =>=>=> RelationalSchema.Table>> lobtestentity;
ClassDiagram.Class>> LobHolder =>=>=> RelationalSchema.Table>> lobholder;
ClassDiagram.Class>> Document =>=>=> RelationalSchema.Table>> document;
ClassDiagram.Class>> EntitySerialize =>=>=> RelationalSchema.Table>> entityserialize;
ClassDiagram.Class>> MaterializedBlobEntity =>=>=> RelationalSchema.Table>> materializedblobentity;
ClassDiagram.Class>> CompiledCode =>=>=> RelationalSchema.Table>> compiledcode;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> VersionedBook =>=>=> RelationalSchema.Table>> versionedbook;
ClassDiagram.Class>> LongStringHolder =>=>=> RelationalSchema.Table>> longstringholder;
ClassDiagram.Class>> ImageHolder =>=>=> RelationalSchema.Table>> imageholder;
ClassDiagram.Class>> ClassB =>=>=> RelationalSchema.Table>> classb;
ClassDiagram.Class>> D =>=>=> RelationalSchema.Table>> d;
ClassDiagram.Class>> ClassC =>=>=> RelationalSchema.Table>> classc;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> ClassA =>=>=> RelationalSchema.Table>> classa;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> ClassD =>=>=> RelationalSchema.Table>> classd;
ClassDiagram.Class>> NaturalIdOnManyToOne =>=>=> RelationalSchema.Table>> naturalidonmanytoone;
ClassDiagram.Class>> State =>=>=> RelationalSchema.Table>> state;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> D =>=>=> RelationalSchema.Table>> d;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Citizen =>=>=> RelationalSchema.Table>> citizen;
ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> StoreCustomer =>=>=> RelationalSchema.Table>> storecustomer;
ClassDiagram.Class>> BasketItems =>=>=> RelationalSchema.Table>> basketitems;
ClassDiagram.Class>> CardKey =>=>=> RelationalSchema.Table>> cardkey;
ClassDiagram.Class>> Benefserv =>=>=> RelationalSchema.Table>> benefserv;
ClassDiagram.Class>> Acces =>=>=> RelationalSchema.Table>> acces;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Service =>=>=> RelationalSchema.Table>> service;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> Droitacces =>=>=> RelationalSchema.Table>> droitacces;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> CourseStudent =>=>=> RelationalSchema.Table>> coursestudent;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Course =>=>=> RelationalSchema.Table>> course;
ClassDiagram.Class>> Card =>=>=> RelationalSchema.Table>> card;
ClassDiagram.Class>> ShoppingBaskets =>=>=> RelationalSchema.Table>> shoppingbaskets;
ClassDiagram.Class>> Customers =>=>=> RelationalSchema.Table>> customers;
ClassDiagram.Class>> CardField =>=>=> RelationalSchema.Table>> cardfield;
ClassDiagram.Class>> Foobar =>=>=> RelationalSchema.Table>> foobar;
ClassDiagram.Class>> Gardenshed =>=>=> RelationalSchema.Table>> gardenshed;
ClassDiagram.Class>> Tourist =>=>=> RelationalSchema.Table>> tourist;
ClassDiagram.Class>> Boy =>=>=> RelationalSchema.Table>> boy;
ClassDiagram.Class>> Driver =>=>=> RelationalSchema.Table>> driver;
ClassDiagram.Class>> Waiter =>=>=> RelationalSchema.Table>> waiter;
ClassDiagram.Class>> Cook =>=>=> RelationalSchema.Table>> cook;
ClassDiagram.Class>> RentalCar =>=>=> RelationalSchema.Table>> rentalcar;
ClassDiagram.Class>> Gardenshed =>=>=> RelationalSchema.Table>> gardenshed;
ClassDiagram.Class>> Shape =>=>=> RelationalSchema.Table>> shape;
ClassDiagram.Class>> Horse =>=>=> RelationalSchema.Table>> horse;
ClassDiagram.Class>> Course6 =>=>=> RelationalSchema.Table>> course6;
ClassDiagram.Class>> Bed =>=>=> RelationalSchema.Table>> bed;
ClassDiagram.Class>> Course2 =>=>=> RelationalSchema.Table>> course2;
ClassDiagram.Class>> Course7 =>=>=> RelationalSchema.Table>> course7;
ClassDiagram.Class>> Circle =>=>=> RelationalSchema.Table>> circle;
ClassDiagram.Class>> Course3 =>=>=> RelationalSchema.Table>> course3;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Course5 =>=>=> RelationalSchema.Table>> course5;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Chair =>=>=> RelationalSchema.Table>> chair;
ClassDiagram.Class>> Course1 =>=>=> RelationalSchema.Table>> course1;
ClassDiagram.Class>> Course8 =>=>=> RelationalSchema.Table>> course8;
ClassDiagram.Class>> Furniture =>=>=> RelationalSchema.Table>> furniture;
ClassDiagram.Class>> Course4 =>=>=> RelationalSchema.Table>> course4;
ClassDiagram.Class>> BigBed =>=>=> RelationalSchema.Table>> bigbed;
ClassDiagram.Class>> Being =>=>=> RelationalSchema.Table>> being;
ClassDiagram.Class>> Square =>=>=> RelationalSchema.Table>> square;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Bed =>=>=> RelationalSchema.Table>> bed;
ClassDiagram.Class>> BigBed =>=>=> RelationalSchema.Table>> bigbed;
ClassDiagram.Class>> Furniture =>=>=> RelationalSchema.Table>> furniture;
ClassDiagram.Class>> Chair =>=>=> RelationalSchema.Table>> chair;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Tomato =>=>=> RelationalSchema.Table>> tomato;
ClassDiagram.Class>> File =>=>=> RelationalSchema.Table>> file;
ClassDiagram.Class>> SymbolicLink =>=>=> RelationalSchema.Table>> symboliclink;
ClassDiagram.Class>> Document =>=>=> RelationalSchema.Table>> document;
ClassDiagram.Class>> Folder =>=>=> RelationalSchema.Table>> folder;
ClassDiagram.Class>> Apple =>=>=> RelationalSchema.Table>> apple;
ClassDiagram.Class>> Fruit =>=>=> RelationalSchema.Table>> fruit;
ClassDiagram.Class>> Carrot =>=>=> RelationalSchema.Table>> carrot;
ClassDiagram.Class>> BaseClass2 =>=>=> RelationalSchema.Table>> baseclass2;
ClassDiagram.Class>> SubClass =>=>=> RelationalSchema.Table>> subclass;
ClassDiagram.Class>> BaseClass =>=>=> RelationalSchema.Table>> baseclass;
ClassDiagram.Class>> SubClass2 =>=>=> RelationalSchema.Table>> subclass2;
ClassDiagram.Class>> ProgramExecution =>=>=> RelationalSchema.Table>> programexecution;
ClassDiagram.Class>> Alarm =>=>=> RelationalSchema.Table>> alarm;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Pool =>=>=> RelationalSchema.Table>> pool;
ClassDiagram.Class>> Document =>=>=> RelationalSchema.Table>> document;
ClassDiagram.Class>> Clothing =>=>=> RelationalSchema.Table>> clothing;
ClassDiagram.Class>> Asset =>=>=> RelationalSchema.Table>> asset;
ClassDiagram.Class>> FinancialAsset =>=>=> RelationalSchema.Table>> financialasset;
ClassDiagram.Class>> SymbolicLink =>=>=> RelationalSchema.Table>> symboliclink;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Class>> SwimmingPool =>=>=> RelationalSchema.Table>> swimmingpool;
ClassDiagram.Class>> File =>=>=> RelationalSchema.Table>> file;
ClassDiagram.Class>> Folder =>=>=> RelationalSchema.Table>> folder;
ClassDiagram.Class>> PropertyAsset =>=>=> RelationalSchema.Table>> propertyasset;
ClassDiagram.Class>> Sweater =>=>=> RelationalSchema.Table>> sweater;
ClassDiagram.Class>> EventInformation =>=>=> RelationalSchema.Table>> eventinformation;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Client =>=>=> RelationalSchema.Table>> client;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> SymbolicLink =>=>=> RelationalSchema.Table>> symboliclink;
ClassDiagram.Class>> Folder =>=>=> RelationalSchema.Table>> folder;
ClassDiagram.Class>> File =>=>=> RelationalSchema.Table>> file;
ClassDiagram.Class>> Document =>=>=> RelationalSchema.Table>> document;
ClassDiagram.Class>> Vegetable =>=>=> RelationalSchema.Table>> vegetable;
ClassDiagram.Class>> House =>=>=> RelationalSchema.Table>> house;
ClassDiagram.Class>> DuplicatedDiscriminatorValueTest =>=>=> RelationalSchema.Table>> duplicateddiscriminatorvaluetest;
ClassDiagram.Class>> Noise =>=>=> RelationalSchema.Table>> noise;
ClassDiagram.Class>> Trash =>=>=> RelationalSchema.Table>> trash;
ClassDiagram.Class>> Rock =>=>=> RelationalSchema.Table>> rock;
ClassDiagram.Class>> Funk =>=>=> RelationalSchema.Table>> funk;
ClassDiagram.Class>> Music =>=>=> RelationalSchema.Table>> music;
ClassDiagram.Class>> PaperTrash =>=>=> RelationalSchema.Table>> papertrash;
ClassDiagram.Class>> Building =>=>=> RelationalSchema.Table>> building;
ClassDiagram.Class>> SomeOtherEntity =>=>=> RelationalSchema.Table>> someotherentity;
ClassDiagram.Class>> SomeEntity =>=>=> RelationalSchema.Table>> someentity;
ClassDiagram.Class>> Player =>=>=> RelationalSchema.Table>> player;
ClassDiagram.Class>> Team =>=>=> RelationalSchema.Table>> team;
ClassDiagram.Class>> Deck =>=>=> RelationalSchema.Table>> deck;
ClassDiagram.Class>> Card =>=>=> RelationalSchema.Table>> card;
ClassDiagram.Class>> Flight =>=>=> RelationalSchema.Table>> flight;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Tower =>=>=> RelationalSchema.Table>> tower;
ClassDiagram.Class>> TwinkleToes =>=>=> RelationalSchema.Table>> twinkletoes;
ClassDiagram.Class>> Home =>=>=> RelationalSchema.Table>> home;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> Computer =>=>=> RelationalSchema.Table>> computer;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> FirTree =>=>=> RelationalSchema.Table>> firtree;
ClassDiagram.Class>> Ball =>=>=> RelationalSchema.Table>> ball;
ClassDiagram.Class>> Shoe =>=>=> RelationalSchema.Table>> shoe;
ClassDiagram.Class>> Bunny =>=>=> RelationalSchema.Table>> bunny;
ClassDiagram.Class>> PlanetCheatSheet =>=>=> RelationalSchema.Table>> planetcheatsheet;
ClassDiagram.Class>> Footballer =>=>=> RelationalSchema.Table>> footballer;
ClassDiagram.Class>> Furniture =>=>=> RelationalSchema.Table>> furniture;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> PointyTooth =>=>=> RelationalSchema.Table>> pointytooth;
ClassDiagram.Class>> Monkey =>=>=> RelationalSchema.Table>> monkey;
ClassDiagram.Class>> GoalKeeper =>=>=> RelationalSchema.Table>> goalkeeper;
ClassDiagram.Class>> Hotel =>=>=> RelationalSchema.Table>> hotel;
ClassDiagram.Class>> SoundSystem =>=>=> RelationalSchema.Table>> soundsystem;
ClassDiagram.Class>> BreakDance =>=>=> RelationalSchema.Table>> breakdance;
ClassDiagram.Class>> AutoEntity =>=>=> RelationalSchema.Table>> autoentity;
ClassDiagram.Class>> MinimalTableEntity =>=>=> RelationalSchema.Table>> minimaltableentity;
ClassDiagram.Class>> MinimalSequenceEntity =>=>=> RelationalSchema.Table>> minimalsequenceentity;
ClassDiagram.Class>> CompleteSequenceEntity =>=>=> RelationalSchema.Table>> completesequenceentity;
ClassDiagram.Class>> DedicatedSequenceEntity1 =>=>=> RelationalSchema.Table>> dedicatedsequenceentity1;
ClassDiagram.Class>> DedicatedSequenceEntity2 =>=>=> RelationalSchema.Table>> dedicatedsequenceentity2;
ClassDiagram.Class>> Tower =>=>=> RelationalSchema.Table>> tower;
ClassDiagram.Class>> SoundSystem =>=>=> RelationalSchema.Table>> soundsystem;
ClassDiagram.Class>> HibernateSequenceEntity =>=>=> RelationalSchema.Table>> hibernatesequenceentity;
ClassDiagram.Class>> BreakDance =>=>=> RelationalSchema.Table>> breakdance;
ClassDiagram.Class>> Home =>=>=> RelationalSchema.Table>> home;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> PointyTooth =>=>=> RelationalSchema.Table>> pointytooth;
ClassDiagram.Class>> GoalKeeper =>=>=> RelationalSchema.Table>> goalkeeper;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> Bunny =>=>=> RelationalSchema.Table>> bunny;
ClassDiagram.Class>> Footballer =>=>=> RelationalSchema.Table>> footballer;
ClassDiagram.Class>> Furniture =>=>=> RelationalSchema.Table>> furniture;
ClassDiagram.Class>> Shoe =>=>=> RelationalSchema.Table>> shoe;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Ball =>=>=> RelationalSchema.Table>> ball;
ClassDiagram.Class>> FirTree =>=>=> RelationalSchema.Table>> firtree;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> PlanetCheatSheet =>=>=> RelationalSchema.Table>> planetcheatsheet;
ClassDiagram.Class>> Computer =>=>=> RelationalSchema.Table>> computer;
ClassDiagram.Class>> TwinkleToes =>=>=> RelationalSchema.Table>> twinkletoes;
ClassDiagram.Class>> Monkey =>=>=> RelationalSchema.Table>> monkey;
ClassDiagram.Class>> Mark =>=>=> RelationalSchema.Table>> mark;
ClassDiagram.Class>> Captain =>=>=> RelationalSchema.Table>> captain;
ClassDiagram.Class>> Dictionary =>=>=> RelationalSchema.Table>> dictionary;
ClassDiagram.Class>> Night =>=>=> RelationalSchema.Table>> night;
ClassDiagram.Class>> Employeegroup =>=>=> RelationalSchema.Table>> employeegroup;
ClassDiagram.Class>> Twilight =>=>=> RelationalSchema.Table>> twilight;
ClassDiagram.Class>> AllTables =>=>=> RelationalSchema.Table>> alltables;
ClassDiagram.Class>> Chaos =>=>=> RelationalSchema.Table>> chaos;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> CasimirParticle =>=>=> RelationalSchema.Table>> casimirparticle;
ClassDiagram.Class>> Area =>=>=> RelationalSchema.Table>> area;
ClassDiagram.Class>> Attrvalue =>=>=> RelationalSchema.Table>> attrvalue;
ClassDiagram.Class>> SynonymousDictionary =>=>=> RelationalSchema.Table>> synonymousdictionary;
ClassDiagram.Class>> SpaceShip =>=>=> RelationalSchema.Table>> spaceship;
ClassDiagram.Class>> Attrset =>=>=> RelationalSchema.Table>> attrset;
ClassDiagram.Class>> Discount =>=>=> RelationalSchema.Table>> discount;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Policy =>=>=> RelationalSchema.Table>> policy;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Policy =>=>=> RelationalSchema.Table>> policy;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Employer =>=>=> RelationalSchema.Table>> employer;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> FinancialHistory =>=>=> RelationalSchema.Table>> financialhistory;
ClassDiagram.Class>> Simple =>=>=> RelationalSchema.Table>> simple;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> FinancialHistory =>=>=> RelationalSchema.Table>> financialhistory;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> CustomerInventory =>=>=> RelationalSchema.Table>> customerinventory;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> CustomerInventoryTwo =>=>=> RelationalSchema.Table>> customerinventorytwo;
ClassDiagram.Class>> CustomerTwo =>=>=> RelationalSchema.Table>> customertwo;
ClassDiagram.Class>> CustomerInventory =>=>=> RelationalSchema.Table>> customerinventory;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> ExclusiveDependent =>=>=> RelationalSchema.Table>> exclusivedependent;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> PersonInfo =>=>=> RelationalSchema.Table>> personinfo;
ClassDiagram.Class>> OrderLine =>=>=> RelationalSchema.Table>> orderline;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Bar =>=>=> RelationalSchema.Table>> bar;
ClassDiagram.Class>> Foo =>=>=> RelationalSchema.Table>> foo;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Plane =>=>=> RelationalSchema.Table>> plane;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Machine =>=>=> RelationalSchema.Table>> machine;
ClassDiagram.Class>> Component =>=>=> RelationalSchema.Table>> component;
ClassDiagram.Class>> T800 =>=>=> RelationalSchema.Table>> t800;
ClassDiagram.Class>> Robot =>=>=> RelationalSchema.Table>> robot;
ClassDiagram.Class>> AmericaCupClass =>=>=> RelationalSchema.Table>> americacupclass;
ClassDiagram.Class>> Ticket =>=>=> RelationalSchema.Table>> ticket;
ClassDiagram.Class>> Drawer =>=>=> RelationalSchema.Table>> drawer;
ClassDiagram.Class>> ExchangeOffice =>=>=> RelationalSchema.Table>> exchangeoffice;
ClassDiagram.Class>> Wardrobe =>=>=> RelationalSchema.Table>> wardrobe;
ClassDiagram.Class>> Atmosphere =>=>=> RelationalSchema.Table>> atmosphere;
ClassDiagram.Class>> Newspaper =>=>=> RelationalSchema.Table>> newspaper;
ClassDiagram.Class>> Training =>=>=> RelationalSchema.Table>> training;
ClassDiagram.Class>> GenerationUser =>=>=> RelationalSchema.Table>> generationuser;
ClassDiagram.Class>> PressReleaseAgency =>=>=> RelationalSchema.Table>> pressreleaseagency;
ClassDiagram.Class>> Gas =>=>=> RelationalSchema.Table>> gas;
ClassDiagram.Class>> GasKey =>=>=> RelationalSchema.Table>> gaskey;
ClassDiagram.Class>> Dress =>=>=> RelationalSchema.Table>> dress;
ClassDiagram.Class>> AddressEntry =>=>=> RelationalSchema.Table>> addressentry;
ClassDiagram.Class>> Painting =>=>=> RelationalSchema.Table>> painting;
ClassDiagram.Class>> AlphabeticalDirectory =>=>=> RelationalSchema.Table>> alphabeticaldirectory;
ClassDiagram.Class>> News =>=>=> RelationalSchema.Table>> news;
ClassDiagram.Class>> ExchangeRate =>=>=> RelationalSchema.Table>> exchangerate;
ClassDiagram.Class>> Version =>=>=> RelationalSchema.Table>> version;
ClassDiagram.Class>> Painter =>=>=> RelationalSchema.Table>> painter;
ClassDiagram.Class>> AddressBook =>=>=> RelationalSchema.Table>> addressbook;
ClassDiagram.Class>> GenerationGroup =>=>=> RelationalSchema.Table>> generationgroup;
ClassDiagram.Class>> Software =>=>=> RelationalSchema.Table>> software;
ClassDiagram.Class>> Atmosphere =>=>=> RelationalSchema.Table>> atmosphere;
ClassDiagram.Class>> Trainee =>=>=> RelationalSchema.Table>> trainee;
ClassDiagram.Class>> Currency =>=>=> RelationalSchema.Table>> currency;
ClassDiagram.Class>> House =>=>=> RelationalSchema.Table>> house;
ClassDiagram.Class>> UniqueConstraintValidationTest =>=>=> RelationalSchema.Table>> uniqueconstraintvalidationtest;
ClassDiagram.Class>> Room =>=>=> RelationalSchema.Table>> room;
ClassDiagram.Class>> UniqueConstraintUnitTests =>=>=> RelationalSchema.Table>> uniqueconstraintunittests;
ClassDiagram.Class>> HighestBid =>=>=> RelationalSchema.Table>> highestbid;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Bid =>=>=> RelationalSchema.Table>> bid;
ClassDiagram.Class>> Cuisine =>=>=> RelationalSchema.Table>> cuisine;
ClassDiagram.Class>> EntityEnum =>=>=> RelationalSchema.Table>> entityenum;
ClassDiagram.Class>> EntityMapEnum =>=>=> RelationalSchema.Table>> entitymapenum;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> SocialNetworkProfile =>=>=> RelationalSchema.Table>> socialnetworkprofile;
ClassDiagram.Class>> Ferry =>=>=> RelationalSchema.Table>> ferry;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Menu =>=>=> RelationalSchema.Table>> menu;
ClassDiagram.Class>> Contract =>=>=> RelationalSchema.Table>> contract;
ClassDiagram.Class>> Message =>=>=> RelationalSchema.Table>> message;
ClassDiagram.Class>> ProductSqlServer =>=>=> RelationalSchema.Table>> productsqlserver;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Model =>=>=> RelationalSchema.Table>> model;
ClassDiagram.Class>> Manufacturer =>=>=> RelationalSchema.Table>> manufacturer;
ClassDiagram.Class>> FoodItem =>=>=> RelationalSchema.Table>> fooditem;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Language =>=>=> RelationalSchema.Table>> language;
ClassDiagram.Class>> KnownClient =>=>=> RelationalSchema.Table>> knownclient;
ClassDiagram.Class>> Supplier =>=>=> RelationalSchema.Table>> supplier;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> ProgramManager =>=>=> RelationalSchema.Table>> programmanager;
ClassDiagram.Class>> Woman =>=>=> RelationalSchema.Table>> woman;
ClassDiagram.Class>> Employer =>=>=> RelationalSchema.Table>> employer;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Man =>=>=> RelationalSchema.Table>> man;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> PhoneNumber =>=>=> RelationalSchema.Table>> phonenumber;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> City =>=>=> RelationalSchema.Table>> city;
ClassDiagram.Class>> KnownClient =>=>=> RelationalSchema.Table>> knownclient;
ClassDiagram.Class>> BuildingCompany =>=>=> RelationalSchema.Table>> buildingcompany;
ClassDiagram.Class>> Inspector =>=>=> RelationalSchema.Table>> inspector;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Building =>=>=> RelationalSchema.Table>> building;
ClassDiagram.Class>> PhoneNumber =>=>=> RelationalSchema.Table>> phonenumber;
ClassDiagram.Class>> GroupWithSet =>=>=> RelationalSchema.Table>> groupwithset;
ClassDiagram.Class>> Friend =>=>=> RelationalSchema.Table>> friend;
ClassDiagram.Class>> City =>=>=> RelationalSchema.Table>> city;
ClassDiagram.Class>> Permission =>=>=> RelationalSchema.Table>> permission;
ClassDiagram.Class>> InspectorPrefixes =>=>=> RelationalSchema.Table>> inspectorprefixes;
ClassDiagram.Class>> Group =>=>=> RelationalSchema.Table>> group;
ClassDiagram.Class>> Zone =>=>=> RelationalSchema.Table>> zone;
ClassDiagram.Class>> Contractor =>=>=> RelationalSchema.Table>> contractor;
ClassDiagram.Class>> MinMax =>=>=> RelationalSchema.Table>> minmax;
ClassDiagram.Class>> Rock =>=>=> RelationalSchema.Table>> rock;
ClassDiagram.Class>> Screen =>=>=> RelationalSchema.Table>> screen;
ClassDiagram.Class>> Color =>=>=> RelationalSchema.Table>> color;
ClassDiagram.Class>> Display =>=>=> RelationalSchema.Table>> display;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Music =>=>=> RelationalSchema.Table>> music;
ClassDiagram.Class>> CupHolder =>=>=> RelationalSchema.Table>> cupholder;
ClassDiagram.Class>> Range =>=>=> RelationalSchema.Table>> range;
ClassDiagram.Class>> TvOwner =>=>=> RelationalSchema.Table>> tvowner;
ClassDiagram.Class>> PowerSupply =>=>=> RelationalSchema.Table>> powersupply;
ClassDiagram.Class>> Tv =>=>=> RelationalSchema.Table>> tv;
ClassDiagram.Class>> Importer =>=>=> RelationalSchema.Table>> importer;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> Coin =>=>=> RelationalSchema.Table>> coin;
ClassDiagram.Class>> Currency =>=>=> RelationalSchema.Table>> currency;
ClassDiagram.Class>> Voice =>=>=> RelationalSchema.Table>> voice;
ClassDiagram.Class>> GSM =>=>=> RelationalSchema.Table>> gsm;
ClassDiagram.Class>> Comment =>=>=> RelationalSchema.Table>> comment;
ClassDiagram.Class>> Tiger =>=>=> RelationalSchema.Table>> tiger;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> OrderItem =>=>=> RelationalSchema.Table>> orderitem;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Box =>=>=> RelationalSchema.Table>> box;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Organisation =>=>=> RelationalSchema.Table>> organisation;
ClassDiagram.Class>> Asset =>=>=> RelationalSchema.Table>> asset;
ClassDiagram.Class>> Visitor =>=>=> RelationalSchema.Table>> visitor;
ClassDiagram.Class>> Post =>=>=> RelationalSchema.Table>> post;
ClassDiagram.Class>> Soldier =>=>=> RelationalSchema.Table>> soldier;
ClassDiagram.Class>> Street =>=>=> RelationalSchema.Table>> street;
ClassDiagram.Class>> Troop =>=>=> RelationalSchema.Table>> troop;
ClassDiagram.Class>> BankAccount =>=>=> RelationalSchema.Table>> bankaccount;
ClassDiagram.Class>> Computer =>=>=> RelationalSchema.Table>> computer;
ClassDiagram.Class>> City =>=>=> RelationalSchema.Table>> city;
ClassDiagram.Class>> Forum =>=>=> RelationalSchema.Table>> forum;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> Trainer =>=>=> RelationalSchema.Table>> trainer;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Model =>=>=> RelationalSchema.Table>> model;
ClassDiagram.Class>> Politician =>=>=> RelationalSchema.Table>> politician;
ClassDiagram.Class>> PoliticalParty =>=>=> RelationalSchema.Table>> politicalparty;
ClassDiagram.Class>> Zoo =>=>=> RelationalSchema.Table>> zoo;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> OrganisationUser =>=>=> RelationalSchema.Table>> organisationuser;
ClassDiagram.Class>> Transaction =>=>=> RelationalSchema.Table>> transaction;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Monkey =>=>=> RelationalSchema.Table>> monkey;
ClassDiagram.Class>> MarketRegion =>=>=> RelationalSchema.Table>> marketregion;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> SportCar =>=>=> RelationalSchema.Table>> sportcar;
ClassDiagram.Class>> House =>=>=> RelationalSchema.Table>> house;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Luggage =>=>=> RelationalSchema.Table>> luggage;
ClassDiagram.Class>> Rambler =>=>=> RelationalSchema.Table>> rambler;
ClassDiagram.Class>> Clothes =>=>=> RelationalSchema.Table>> clothes;
ClassDiagram.Class>> HousePlaces =>=>=> RelationalSchema.Table>> houseplaces;
ClassDiagram.Class>> Inhabitant =>=>=> RelationalSchema.Table>> inhabitant;
ClassDiagram.Class>> Place =>=>=> RelationalSchema.Table>> place;
ClassDiagram.Class>> Postman =>=>=> RelationalSchema.Table>> postman;
ClassDiagram.Class>> ItemCost =>=>=> RelationalSchema.Table>> itemcost;
ClassDiagram.Class>> Vendor =>=>=> RelationalSchema.Table>> vendor;
ClassDiagram.Class>> Bag =>=>=> RelationalSchema.Table>> bag;
ClassDiagram.Class>> WarehouseItem =>=>=> RelationalSchema.Table>> warehouseitem;
ClassDiagram.Class>> Customer4 =>=>=> RelationalSchema.Table>> customer4;
ClassDiagram.Class>> Customer5 =>=>=> RelationalSchema.Table>> customer5;
ClassDiagram.Class>> SupportTickets =>=>=> RelationalSchema.Table>> supporttickets;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Customer3 =>=>=> RelationalSchema.Table>> customer3;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Customer2 =>=>=> RelationalSchema.Table>> customer2;
ClassDiagram.Class>> Country =>=>=> RelationalSchema.Table>> country;
ClassDiagram.Class>> Flight =>=>=> RelationalSchema.Table>> flight;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Human =>=>=> RelationalSchema.Table>> human;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Mammal =>=>=> RelationalSchema.Table>> mammal;
ClassDiagram.Class>> Human =>=>=> RelationalSchema.Table>> human;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Club =>=>=> RelationalSchema.Table>> club;
ClassDiagram.Class>> Mammal =>=>=> RelationalSchema.Table>> mammal;
ClassDiagram.Class>> Human =>=>=> RelationalSchema.Table>> human;
ClassDiagram.Class>> Mammal =>=>=> RelationalSchema.Table>> mammal;
ClassDiagram.Class>> Mammal =>=>=> RelationalSchema.Table>> mammal;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Human =>=>=> RelationalSchema.Table>> human;
ClassDiagram.Class>> Printer =>=>=> RelationalSchema.Table>> printer;
ClassDiagram.Class>> Bug =>=>=> RelationalSchema.Table>> bug;
ClassDiagram.Class>> PrinterCable =>=>=> RelationalSchema.Table>> printercable;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> SocialSite =>=>=> RelationalSchema.Table>> socialsite;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> BlogEntry =>=>=> RelationalSchema.Table>> blogentry;
ClassDiagram.Class>> Location =>=>=> RelationalSchema.Table>> location;
ClassDiagram.Class>> Trip =>=>=> RelationalSchema.Table>> trip;
ClassDiagram.Class>> PhoneNumber =>=>=> RelationalSchema.Table>> phonenumber;
ClassDiagram.Class>> PropertyRecord =>=>=> RelationalSchema.Table>> propertyrecord;
ClassDiagram.Class>> Addr =>=>=> RelationalSchema.Table>> addr;
ClassDiagram.Class>> UserImpl =>=>=> RelationalSchema.Table>> userimpl;
ClassDiagram.Class>> ContactImpl =>=>=> RelationalSchema.Table>> contactimpl;
ClassDiagram.Class>> Entity2 =>=>=> RelationalSchema.Table>> entity2;
ClassDiagram.Class>> Entity1 =>=>=> RelationalSchema.Table>> entity1;
ClassDiagram.Class>> Dvd =>=>=> RelationalSchema.Table>> dvd;
ClassDiagram.Class>> DomainAdmin =>=>=> RelationalSchema.Table>> domainadmin;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> TreeType =>=>=> RelationalSchema.Table>> treetype;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> Lotz =>=>=> RelationalSchema.Table>> lotz;
ClassDiagram.Class>> OrderLine =>=>=> RelationalSchema.Table>> orderline;
ClassDiagram.Class>> Deal =>=>=> RelationalSchema.Table>> deal;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> BiggestForest =>=>=> RelationalSchema.Table>> biggestforest;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> DistrictUser =>=>=> RelationalSchema.Table>> districtuser;
ClassDiagram.Class>> ZItemCost =>=>=> RelationalSchema.Table>> zitemcost;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> WarehouseItem =>=>=> RelationalSchema.Table>> warehouseitem;
ClassDiagram.Class>> Vendor =>=>=> RelationalSchema.Table>> vendor;
ClassDiagram.Class>> Color =>=>=> RelationalSchema.Table>> color;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> ForestType =>=>=> RelationalSchema.Table>> foresttype;
ClassDiagram.Class>> Carz =>=>=> RelationalSchema.Table>> carz;
ClassDiagram.Class>> Node =>=>=> RelationalSchema.Table>> node;
ClassDiagram.Class>> Lens =>=>=> RelationalSchema.Table>> lens;
ClassDiagram.Class>> Frame =>=>=> RelationalSchema.Table>> frame;
ClassDiagram.Class>> Passport =>=>=> RelationalSchema.Table>> passport;
ClassDiagram.Class>> Stamp =>=>=> RelationalSchema.Table>> stamp;
ClassDiagram.Class>> Branch =>=>=> RelationalSchema.Table>> branch;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Leaf =>=>=> RelationalSchema.Table>> leaf;
ClassDiagram.Class>> Stay =>=>=> RelationalSchema.Table>> stay;
ClassDiagram.Class>> BImpl =>=>=> RelationalSchema.Table>> bimpl;
ClassDiagram.Class>> ZImpl =>=>=> RelationalSchema.Table>> zimpl;
ClassDiagram.Class>> PrimeMinister =>=>=> RelationalSchema.Table>> primeminister;
ClassDiagram.Class>> Sky =>=>=> RelationalSchema.Table>> sky;
ClassDiagram.Class>> AImpl =>=>=> RelationalSchema.Table>> aimpl;
ClassDiagram.Class>> Manufacturer =>=>=> RelationalSchema.Table>> manufacturer;
ClassDiagram.Class>> Multiple =>=>=> RelationalSchema.Table>> multiple;
ClassDiagram.Class>> Simple2 =>=>=> RelationalSchema.Table>> simple2;
ClassDiagram.Class>> Simple =>=>=> RelationalSchema.Table>> simple;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Investor =>=>=> RelationalSchema.Table>> investor;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> Life =>=>=> RelationalSchema.Table>> life;
ClassDiagram.Class>> SysGroupsOrm =>=>=> RelationalSchema.Table>> sysgroupsorm;
ClassDiagram.Class>> Death =>=>=> RelationalSchema.Table>> death;
ClassDiagram.Class>> SimpleCat =>=>=> RelationalSchema.Table>> simplecat;
ClassDiagram.Class>> Life =>=>=> RelationalSchema.Table>> life;
ClassDiagram.Class>> SysUserOrm =>=>=> RelationalSchema.Table>> sysuserorm;
ClassDiagram.Class>> CollectionAsBasicTest =>=>=> RelationalSchema.Table>> collectionasbasictest;
ClassDiagram.Class>> State =>=>=> RelationalSchema.Table>> state;
ClassDiagram.Class>> Foobar =>=>=> RelationalSchema.Table>> foobar;
ClassDiagram.Class>> Country =>=>=> RelationalSchema.Table>> country;
ClassDiagram.Class>> ParentHierarchy1 =>=>=> RelationalSchema.Table>> parenthierarchy1;
ClassDiagram.Class>> ChildHierarchy22 =>=>=> RelationalSchema.Table>> childhierarchy22;
ClassDiagram.Class>> ChildHierarchy1 =>=>=> RelationalSchema.Table>> childhierarchy1;
ClassDiagram.Class>> ParentHierarchy22 =>=>=> RelationalSchema.Table>> parenthierarchy22;
ClassDiagram.Class>> Sky =>=>=> RelationalSchema.Table>> sky;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> CodedPairHolder =>=>=> RelationalSchema.Table>> codedpairholder;
ClassDiagram.Class>> Tooth =>=>=> RelationalSchema.Table>> tooth;
ClassDiagram.Class>> Mouth =>=>=> RelationalSchema.Table>> mouth;
ClassDiagram.Class>> CodedPairSetHolder =>=>=> RelationalSchema.Table>> codedpairsetholder;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> ListMappingTest =>=>=> RelationalSchema.Table>> listmappingtest;
ClassDiagram.Class>> Storm =>=>=> RelationalSchema.Table>> storm;
ClassDiagram.Class>> MyEntity =>=>=> RelationalSchema.Table>> myentity;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Invoice =>=>=> RelationalSchema.Table>> invoice;
ClassDiagram.Class>> WrongCircularityDetectionTest =>=>=> RelationalSchema.Table>> wrongcircularitydetectiontest;
ClassDiagram.Class>> Palmtree =>=>=> RelationalSchema.Table>> palmtree;
ClassDiagram.Class>> Window =>=>=> RelationalSchema.Table>> window;
ClassDiagram.Class>> Tree =>=>=> RelationalSchema.Table>> tree;
ClassDiagram.Class>> Gate =>=>=> RelationalSchema.Table>> gate;
ClassDiagram.Class>> Portal =>=>=> RelationalSchema.Table>> portal;
ClassDiagram.Class>> OptimizerTest =>=>=> RelationalSchema.Table>> optimizertest;
ClassDiagram.Class>> LegacySequenceExportTest =>=>=> RelationalSchema.Table>> legacysequenceexporttest;
ClassDiagram.Class>> SequenceExportTest =>=>=> RelationalSchema.Table>> sequenceexporttest;
ClassDiagram.Class>> PooledHiLoSequenceIdentifierTest =>=>=> RelationalSchema.Table>> pooledhilosequenceidentifiertest;
ClassDiagram.Class>> IsolatedEvictableEntity =>=>=> RelationalSchema.Table>> isolatedevictableentity;
ClassDiagram.Class>> DefaultGeneratedValueTest =>=>=> RelationalSchema.Table>> defaultgeneratedvaluetest;
ClassDiagram.Class>> UnrelatedEntity =>=>=> RelationalSchema.Table>> unrelatedentity;
ClassDiagram.Class>> BookStore =>=>=> RelationalSchema.Table>> bookstore;
ClassDiagram.Class>> Author =>=>=> RelationalSchema.Table>> author;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Publisher =>=>=> RelationalSchema.Table>> publisher;
ClassDiagram.Class>> Y =>=>=> RelationalSchema.Table>> y;
ClassDiagram.Class>> Preisregelung =>=>=> RelationalSchema.Table>> preisregelung;
ClassDiagram.Class>> X =>=>=> RelationalSchema.Table>> x;
ClassDiagram.Class>> Tranche =>=>=> RelationalSchema.Table>> tranche;
ClassDiagram.Class>> Tranchenmodell =>=>=> RelationalSchema.Table>> tranchenmodell;
ClassDiagram.Class>> Tranche =>=>=> RelationalSchema.Table>> tranche;
ClassDiagram.Class>> Preisregelung =>=>=> RelationalSchema.Table>> preisregelung;
ClassDiagram.Class>> Tranchenmodell =>=>=> RelationalSchema.Table>> tranchenmodell;
ClassDiagram.Class>> Feature =>=>=> RelationalSchema.Table>> feature;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> BeforeCompletionFailureTest =>=>=> RelationalSchema.Table>> beforecompletionfailuretest;
ClassDiagram.Class>> Alias =>=>=> RelationalSchema.Table>> alias;
ClassDiagram.Class>> MultipleCollectionRefEntity1 =>=>=> RelationalSchema.Table>> multiplecollectionrefentity1;
ClassDiagram.Class>> Character =>=>=> RelationalSchema.Table>> character;
ClassDiagram.Class>> MultipleCollectionRefEntity2 =>=>=> RelationalSchema.Table>> multiplecollectionrefentity2;
ClassDiagram.Class>> MultipleCollectionEntity =>=>=> RelationalSchema.Table>> multiplecollectionentity;
ClassDiagram.Class>> SynonymValidationTest =>=>=> RelationalSchema.Table>> synonymvalidationtest;
ClassDiagram.Class>> ConcreteEntity =>=>=> RelationalSchema.Table>> concreteentity;
ClassDiagram.Class>> AbstractEntity =>=>=> RelationalSchema.Table>> abstractentity;
ClassDiagram.Class>> LazyAbstractEntityReference =>=>=> RelationalSchema.Table>> lazyabstractentityreference;
ClassDiagram.Class>> JoinedSubclassWithImplicitDiscriminatorTest =>=>=> RelationalSchema.Table>> joinedsubclasswithimplicitdiscriminatortest;
ClassDiagram.Class>> JoinedSubclassWithIgnoredExplicitDiscriminatorTest =>=>=> RelationalSchema.Table>> joinedsubclasswithignoredexplicitdiscriminatortest;
ClassDiagram.Class>> JoinedSubclassWithExplicitDiscriminatorTest =>=>=> RelationalSchema.Table>> joinedsubclasswithexplicitdiscriminatortest;
ClassDiagram.Class>> IAmAFoo =>=>=> RelationalSchema.Table>> iamafoo;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> EmployeeGroup =>=>=> RelationalSchema.Table>> employeegroup;
ClassDiagram.Class>> ManyToManyOwner =>=>=> RelationalSchema.Table>> manytomanyowner;
ClassDiagram.Class>> ManyToManyTarget =>=>=> RelationalSchema.Table>> manytomanytarget;
ClassDiagram.Class>> Quadrilateral =>=>=> RelationalSchema.Table>> quadrilateral;
ClassDiagram.Class>> Polygon =>=>=> RelationalSchema.Table>> polygon;
ClassDiagram.Class>> InheritingEntity =>=>=> RelationalSchema.Table>> inheritingentity;
ClassDiagram.Class>> RootEntity =>=>=> RelationalSchema.Table>> rootentity;
ClassDiagram.Class>> SubSubEntity =>=>=> RelationalSchema.Table>> subsubentity;
ClassDiagram.Class>> SubSubSubEntity =>=>=> RelationalSchema.Table>> subsubsubentity;
ClassDiagram.Class>> SubEntity =>=>=> RelationalSchema.Table>> subentity;
ClassDiagram.Class>> ParentEntity =>=>=> RelationalSchema.Table>> parententity;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> QuoteTest =>=>=> RelationalSchema.Table>> quotetest;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> House =>=>=> RelationalSchema.Table>> house;
ClassDiagram.Class>> TableGeneratorQuotingTest =>=>=> RelationalSchema.Table>> tablegeneratorquotingtest;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> DoesNotWork =>=>=> RelationalSchema.Table>> doesnotwork;
ClassDiagram.Class>> Sub =>=>=> RelationalSchema.Table>> sub;
ClassDiagram.Class>> Super =>=>=> RelationalSchema.Table>> super;
ClassDiagram.Class>> SaveEntityTest =>=>=> RelationalSchema.Table>> saveentitytest;
ClassDiagram.Class>> QueryHintTest =>=>=> RelationalSchema.Table>> queryhinttest;
ClassDiagram.Class>> QueryHintSQLServer2012Test =>=>=> RelationalSchema.Table>> queryhintsqlserver2012test;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> RemoveOrderingTest =>=>=> RelationalSchema.Table>> removeorderingtest;
ClassDiagram.Class>> ProxiedGetLoadAccessTest =>=>=> RelationalSchema.Table>> proxiedgetloadaccesstest;
ClassDiagram.Class>> BasicGetLoadAccessTest =>=>=> RelationalSchema.Table>> basicgetloadaccesstest;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> Workflow =>=>=> RelationalSchema.Table>> workflow;
ClassDiagram.Class>> Language =>=>=> RelationalSchema.Table>> language;
ClassDiagram.Class>> CollectionJoinTableNamingTest =>=>=> RelationalSchema.Table>> collectionjointablenamingtest;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Container =>=>=> RelationalSchema.Table>> container;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Industry =>=>=> RelationalSchema.Table>> industry;
ClassDiagram.Class>> ZipCode =>=>=> RelationalSchema.Table>> zipcode;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Product2 =>=>=> RelationalSchema.Table>> product2;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> Folder =>=>=> RelationalSchema.Table>> folder;
ClassDiagram.Class>> Contact =>=>=> RelationalSchema.Table>> contact;
ClassDiagram.Class>> Farm =>=>=> RelationalSchema.Table>> farm;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> TrtPanel =>=>=> RelationalSchema.Table>> trtpanel;
ClassDiagram.Class>> SizeAttributeReferenceTest =>=>=> RelationalSchema.Table>> sizeattributereferencetest;
ClassDiagram.Class>> MapFunctionExpressionsTest =>=>=> RelationalSchema.Table>> mapfunctionexpressionstest;
ClassDiagram.Class>> Entity1 =>=>=> RelationalSchema.Table>> entity1;
ClassDiagram.Class>> GrandChild =>=>=> RelationalSchema.Table>> grandchild;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Entity2 =>=>=> RelationalSchema.Table>> entity2;
ClassDiagram.Class>> Entity3 =>=>=> RelationalSchema.Table>> entity3;
ClassDiagram.Class>> CastFunctionTest =>=>=> RelationalSchema.Table>> castfunctiontest;
ClassDiagram.Class>> QuerySplitterTest =>=>=> RelationalSchema.Table>> querysplittertest;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> SubQueryTest =>=>=> RelationalSchema.Table>> subquerytest;
ClassDiagram.Class>> Crop =>=>=> RelationalSchema.Table>> crop;
ClassDiagram.Class>> TupleSupportTest =>=>=> RelationalSchema.Table>> tuplesupporttest;
ClassDiagram.Class>> Panel =>=>=> RelationalSchema.Table>> panel;
ClassDiagram.Class>> CaseStatementTest =>=>=> RelationalSchema.Table>> casestatementtest;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Title =>=>=> RelationalSchema.Table>> title;
ClassDiagram.Class>> SortTest =>=>=> RelationalSchema.Table>> sorttest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> ByteCodeEnhancedImmutableReferenceCacheTest =>=>=> RelationalSchema.Table>> bytecodeenhancedimmutablereferencecachetest;
ClassDiagram.Class>> ItWithPkClass =>=>=> RelationalSchema.Table>> itwithpkclass;
ClassDiagram.Class>> It =>=>=> RelationalSchema.Table>> it;
ClassDiagram.Class>> CachedItem1 =>=>=> RelationalSchema.Table>> cacheditem1;
ClassDiagram.Class>> AbstractCachedItem =>=>=> RelationalSchema.Table>> abstractcacheditem;
ClassDiagram.Class>> CachedItem2 =>=>=> RelationalSchema.Table>> cacheditem2;
ClassDiagram.Class>> CacheableItem =>=>=> RelationalSchema.Table>> cacheableitem;
ClassDiagram.Class>> ReferenceCacheTest =>=>=> RelationalSchema.Table>> referencecachetest;
ClassDiagram.Class>> CollectionCacheEvictionWithoutMappedByTest =>=>=> RelationalSchema.Table>> collectioncacheevictionwithoutmappedbytest;
ClassDiagram.Class>> Inventory =>=>=> RelationalSchema.Table>> inventory;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> LoadPlanBuilderTest =>=>=> RelationalSchema.Table>> loadplanbuildertest;
ClassDiagram.Class>> BasicWalkingTest =>=>=> RelationalSchema.Table>> basicwalkingtest;
ClassDiagram.Class>> EncapsulatedCompositeAttributeResultSetProcessorTest =>=>=> RelationalSchema.Table>> encapsulatedcompositeattributeresultsetprocessortest;
ClassDiagram.Class>> EntityWithNonLazyOneToManySetResultSetProcessorTest =>=>=> RelationalSchema.Table>> entitywithnonlazyonetomanysetresultsetprocessortest;
ClassDiagram.Class>> EntityAssociationResultSetProcessorTest =>=>=> RelationalSchema.Table>> entityassociationresultsetprocessortest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Contractor =>=>=> RelationalSchema.Table>> contractor;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> EntityWithNonLazyOneToManyListResultSetProcessorTest =>=>=> RelationalSchema.Table>> entitywithnonlazyonetomanylistresultsetprocessortest;
ClassDiagram.Class>> SimpleResultSetProcessorTest =>=>=> RelationalSchema.Table>> simpleresultsetprocessortest;
ClassDiagram.Class>> EncapsulatedCompositeIdResultSetProcessorTest =>=>=> RelationalSchema.Table>> encapsulatedcompositeidresultsetprocessortest;
ClassDiagram.Class>> EntityWithNonLazyCollectionResultSetProcessorTest =>=>=> RelationalSchema.Table>> entitywithnonlazycollectionresultsetprocessortest;
ClassDiagram.Class>> ClassWithIdentityColumn =>=>=> RelationalSchema.Table>> classwithidentitycolumn;
ClassDiagram.Class>> Group =>=>=> RelationalSchema.Table>> group;
ClassDiagram.Class>> IdentificationVariablesTest =>=>=> RelationalSchema.Table>> identificationvariablestest;
ClassDiagram.Class>> FromEntity =>=>=> RelationalSchema.Table>> fromentity;
ClassDiagram.Class>> TreatKeywordTest =>=>=> RelationalSchema.Table>> treatkeywordtest;
ClassDiagram.Class>> DestinationEntity =>=>=> RelationalSchema.Table>> destinationentity;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Thing =>=>=> RelationalSchema.Table>> thing;
ClassDiagram.Class>> ExtraStateTest =>=>=> RelationalSchema.Table>> extrastatetest;
ClassDiagram.Class>> GetAndIsVariantGetterTest =>=>=> RelationalSchema.Table>> getandisvariantgettertest;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> IrrelevantEntity =>=>=> RelationalSchema.Table>> irrelevantentity;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> MergeContextTest =>=>=> RelationalSchema.Table>> mergecontexttest;
ClassDiagram.Class>> EntityBinder =>=>=> RelationalSchema.Table>> entitybinder;
ClassDiagram.Class>> ResultsetMappingSecondPass =>=>=> RelationalSchema.Table>> resultsetmappingsecondpass;
ClassDiagram.Class>> ClassPropertyHolder =>=>=> RelationalSchema.Table>> classpropertyholder;
ClassDiagram.Class>> AnnotationBinder =>=>=> RelationalSchema.Table>> annotationbinder;
ClassDiagram.Class>> DefaultEnhancementContext =>=>=> RelationalSchema.Table>> defaultenhancementcontext;
ClassDiagram.Class>> EnhancementTask =>=>=> RelationalSchema.Table>> enhancementtask;
ClassDiagram.Attribut>> Matrix.id:Integer =>=>=> RelationalSchema.Column>> matrix.id PRIMARY KEY;
ClassDiagram.Attribut>> Matrix.mvalues:Set<Integer> =>=>=> RelationalSchema.Column>> matrix.mvalues;
ClassDiagram.Attribut>> Child2.id:Long =>=>=> RelationalSchema.Column>> child2.id PRIMARY KEY;
ClassDiagram.Attribut>> Child1.id:Long =>=>=> RelationalSchema.Column>> child1.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent1.id:Long =>=>=> RelationalSchema.Column>> parent1.id PRIMARY KEY;
ClassDiagram.Attribut>> TableA.id:int =>=>=> RelationalSchema.Column>> tablea.id PRIMARY KEY;
ClassDiagram.Attribut>> TableA.test:String =>=>=> RelationalSchema.Column>> tablea.test;
ClassDiagram.Attribut>> TableA.test2:String =>=>=> RelationalSchema.Column>> tablea.test2;
ClassDiagram.Attribut>> TableB.id:TableBId =>=>=> RelationalSchema.Column>> tableb.id;
ClassDiagram.Attribut>> ATable.firstid:Integer =>=>=> RelationalSchema.Column>> atable.firstid PRIMARY KEY;
ClassDiagram.Attribut>> VariousTypesEntity.id:Integer =>=>=> RelationalSchema.Column>> varioustypesentity.id PRIMARY KEY;
ClassDiagram.Attribut>> VariousTypesEntity.data:byte =>=>=> RelationalSchema.Column>> varioustypesentity.data;
ClassDiagram.Attribut>> Issue.id:Long =>=>=> RelationalSchema.Column>> issue.id PRIMARY KEY;
ClassDiagram.Attribut>> Issue.description:String =>=>=> RelationalSchema.Column>> issue.description;
ClassDiagram.Attribut>> Issue.issuenumber:String =>=>=> RelationalSchema.Column>> issue.issuenumber;
ClassDiagram.Attribut>> QueryTest.salary:float =>=>=> RelationalSchema.Column>> querytest.salary;
ClassDiagram.Attribut>> SimpleConvertsAnnotationTest.converttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> simpleconvertsannotationtest.converttodatabasecolumncalled;
ClassDiagram.Attribut>> SimpleConvertsAnnotationTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> simpleconvertsannotationtest.converttoentityattributecalled;
ClassDiagram.Attribut>> XmlWithExplicitConvertAnnotationsTest.//note:essentiallythesameexacttestasexplicitdateconverterstest,butherewewillmixannotationsandxmlconverttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> xmlwithexplicitconvertannotationstest.//note:essentiallythesameexacttestasexplicitdateconverterstest,butherewewillmixannotationsandxmlconverttodatabasecolumncalled;
ClassDiagram.Attribut>> XmlWithExplicitConvertAnnotationsTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> xmlwithexplicitconvertannotationstest.converttoentityattributecalled;
ClassDiagram.Attribut>> ExplicitDateConvertersTest.//note:initiallyunabletoreproducethereportedproblemconverttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> explicitdateconverterstest.//note:initiallyunabletoreproducethereportedproblemconverttodatabasecolumncalled;
ClassDiagram.Attribut>> ExplicitDateConvertersTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> explicitdateconverterstest.converttoentityattributecalled;
ClassDiagram.Attribut>> ExplicitEnumConvertersTest.converttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> explicitenumconverterstest.converttodatabasecolumncalled;
ClassDiagram.Attribut>> ExplicitEnumConvertersTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> explicitenumconverterstest.converttoentityattributecalled;
ClassDiagram.Attribut>> SimpleXmlOverriddenTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> simplexmloverriddentest.ssr;
ClassDiagram.Attribut>> SimpleConvertAnnotationTest.converttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> simpleconvertannotationtest.converttodatabasecolumncalled;
ClassDiagram.Attribut>> SimpleConvertAnnotationTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> simpleconvertannotationtest.converttoentityattributecalled;
ClassDiagram.Attribut>> BasicJodaTimeConversionTest.converttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> basicjodatimeconversiontest.converttodatabasecolumncalled;
ClassDiagram.Attribut>> BasicJodaTimeConversionTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> basicjodatimeconversiontest.converttoentityattributecalled;
ClassDiagram.Attribut>> Component.id:Long =>=>=> RelationalSchema.Column>> component.id PRIMARY KEY;
ClassDiagram.Attribut>> Component.emb:Component.Emb =>=>=> RelationalSchema.Column>> component.emb;
ClassDiagram.Attribut>> Person.id:int =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.GeneratedName:Name =>=>=> RelationalSchema.Column>> person.GeneratedName;
ClassDiagram.Attribut>> A.id:Integer =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.otherproperty:String =>=>=> RelationalSchema.Column>> a.otherproperty;
ClassDiagram.Attribut>> B.idpart1:Integer =>=>=> RelationalSchema.Column>> b.idpart1 PRIMARY KEY;
ClassDiagram.Attribut>> B.idpart2:Integer =>=>=> RelationalSchema.Column>> b.idpart2 PRIMARY KEY;
ClassDiagram.Attribut>> B.otherproperty:String =>=>=> RelationalSchema.Column>> b.otherproperty;
ClassDiagram.Attribut>> BatchLoadableEntity.id:Integer =>=>=> RelationalSchema.Column>> batchloadableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> BatchLoadableEntity.name:String =>=>=> RelationalSchema.Column>> batchloadableentity.name;
ClassDiagram.Attribut>> PostgresRefCursorSupportTest.sf:SessionFactory =>=>=> RelationalSchema.Column>> postgresrefcursorsupporttest.sf;
ClassDiagram.Attribut>> NumValue.num:long =>=>=> RelationalSchema.Column>> numvalue.num PRIMARY KEY;
ClassDiagram.Attribut>> NumValue.value:String =>=>=> RelationalSchema.Column>> numvalue.value;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> Group.id:Long =>=>=> RelationalSchema.Column>> group.id PRIMARY KEY;
ClassDiagram.Attribut>> Group.name:String =>=>=> RelationalSchema.Column>> group.name;
ClassDiagram.Attribut>> Membership.id:Long =>=>=> RelationalSchema.Column>> membership.id PRIMARY KEY;
ClassDiagram.Attribut>> Membership.GeneratedName:Group =>=>=> RelationalSchema.Column>> membership.GeneratedName;
ClassDiagram.Attribut>> Membership.join:Date =>=>=> RelationalSchema.Column>> membership.join;
ClassDiagram.Attribut>> Membership.dues:Float =>=>=> RelationalSchema.Column>> membership.dues;
ClassDiagram.Attribut>> SchemaExportWithIndexAndDefaultSchema.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> schemaexportwithindexanddefaultschema.GeneratedName;
ClassDiagram.Attribut>> SchemaExportWithIndexAndDefaultSchema.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaexportwithindexanddefaultschema.metadata;
ClassDiagram.Attribut>> SchemaUpdateWithViewsTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> schemaupdatewithviewstest.GeneratedName;
ClassDiagram.Attribut>> SchemaUpdateWithViewsTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaupdatewithviewstest.metadata;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Group.id:Long =>=>=> RelationalSchema.Column>> group.id PRIMARY KEY;
ClassDiagram.Attribut>> UserSetting.id:long =>=>=> RelationalSchema.Column>> usersetting.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> User.id:long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> Project.id:Long =>=>=> RelationalSchema.Column>> project.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.id:Long =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.number:String =>=>=> RelationalSchema.Column>> phone.number;
ClassDiagram.Attribut>> SchemaOneEntity.id:String =>=>=> RelationalSchema.Column>> schemaoneentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SchemaTwoEntity.id:String =>=>=> RelationalSchema.Column>> schematwoentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SchemaUpdateFormatterTest.after_format:String =>=>=> RelationalSchema.Column>> schemaupdateformattertest.after_format;
ClassDiagram.Attribut>> SchemaUpdateFormatterTest.delimiter:String =>=>=> RelationalSchema.Column>> schemaupdateformattertest.delimiter;
ClassDiagram.Attribut>> SchemaUpdateWithFunctionIndexTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> schemaupdatewithfunctionindextest.GeneratedName;
ClassDiagram.Attribut>> SchemaUpdateWithFunctionIndexTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaupdatewithfunctionindextest.metadata;
ClassDiagram.Attribut>> SchemaExportWithGlobalQuotingEnabledTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> schemaexportwithglobalquotingenabledtest.GeneratedName;
ClassDiagram.Attribut>> SchemaExportWithGlobalQuotingEnabledTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaexportwithglobalquotingenabledtest.metadata;
ClassDiagram.Attribut>> Step.id:Integer =>=>=> RelationalSchema.Column>> step.id PRIMARY KEY;
ClassDiagram.Attribut>> TestFkUpdating.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> testfkupdating.GeneratedName;
ClassDiagram.Attribut>> TestFkUpdating.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> testfkupdating.metadata;
ClassDiagram.Attribut>> MixedFieldPropertyAnnotationTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> mixedfieldpropertyannotationtest.GeneratedName;
ClassDiagram.Attribut>> MixedFieldPropertyAnnotationTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> mixedfieldpropertyannotationtest.metadata;
ClassDiagram.Attribut>> ImplicitCompositeKeyJoinTest.GeneratedName:Logger =>=>=> RelationalSchema.Column>> implicitcompositekeyjointest.GeneratedName;
ClassDiagram.Attribut>> MigrationTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> migrationtest.GeneratedName;
ClassDiagram.Attribut>> SchemaUpdateDelimiterTest.expected_delimiter:String =>=>=> RelationalSchema.Column>> schemaupdatedelimitertest.expected_delimiter;
ClassDiagram.Attribut>> AnnotatedDetail.id:Integer =>=>=> RelationalSchema.Column>> annotateddetail.id PRIMARY KEY;
ClassDiagram.Attribut>> AnnotatedDetail.name:String =>=>=> RelationalSchema.Column>> annotateddetail.name;
ClassDiagram.Attribut>> AnnotatedDetail.//becauseotherwiseschemaexportwouldnotknowaboutit...domain:String =>=>=> RelationalSchema.Column>> annotateddetail.//becauseotherwiseschemaexportwouldnotknowaboutit...domain;
ClassDiagram.Attribut>> AnnotatedMaster.id:Integer =>=>=> RelationalSchema.Column>> annotatedmaster.id PRIMARY KEY;
ClassDiagram.Attribut>> AnnotatedMaster.name:String =>=>=> RelationalSchema.Column>> annotatedmaster.name;
ClassDiagram.Attribut>> Role.GeneratedName:Code =>=>=> RelationalSchema.Column>> role.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> ListActionRole.role:Code =>=>=> RelationalSchema.Column>> listactionrole.role PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name PRIMARY KEY;
ClassDiagram.Attribut>> Bid.amount:float =>=>=> RelationalSchema.Column>> bid.amount PRIMARY KEY;
ClassDiagram.Attribut>> Bid.GeneratedName:Item =>=>=> RelationalSchema.Column>> bid.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> Building.id:Integer =>=>=> RelationalSchema.Column>> building.id PRIMARY KEY;
ClassDiagram.Attribut>> Building.name:String =>=>=> RelationalSchema.Column>> building.name;
ClassDiagram.Attribut>> Building.address:String =>=>=> RelationalSchema.Column>> building.address;
ClassDiagram.Attribut>> Building.city:String =>=>=> RelationalSchema.Column>> building.city;
ClassDiagram.Attribut>> Building.state:String =>=>=> RelationalSchema.Column>> building.state;
ClassDiagram.Attribut>> A.oid:long =>=>=> RelationalSchema.Column>> a.oid PRIMARY KEY;
ClassDiagram.Attribut>> A.myname:String =>=>=> RelationalSchema.Column>> a.myname;
ClassDiagram.Attribut>> D.oid:long =>=>=> RelationalSchema.Column>> d.oid PRIMARY KEY;
ClassDiagram.Attribut>> D.name:String =>=>=> RelationalSchema.Column>> d.name;
ClassDiagram.Attribut>> B.oid:long =>=>=> RelationalSchema.Column>> b.oid PRIMARY KEY;
ClassDiagram.Attribut>> B.naturalid:int =>=>=> RelationalSchema.Column>> b.naturalid;
ClassDiagram.Attribut>> C.oid:long =>=>=> RelationalSchema.Column>> c.oid PRIMARY KEY;
ClassDiagram.Attribut>> C.name:String =>=>=> RelationalSchema.Column>> c.name;
ClassDiagram.Attribut>> B.oid:long =>=>=> RelationalSchema.Column>> b.oid PRIMARY KEY;
ClassDiagram.Attribut>> B.naturalid:int =>=>=> RelationalSchema.Column>> b.naturalid;
ClassDiagram.Attribut>> Another.id:Integer =>=>=> RelationalSchema.Column>> another.id PRIMARY KEY;
ClassDiagram.Attribut>> Another.name:String =>=>=> RelationalSchema.Column>> another.name;
ClassDiagram.Attribut>> Another.surname:String =>=>=> RelationalSchema.Column>> another.surname;
ClassDiagram.Attribut>> A.oid:long =>=>=> RelationalSchema.Column>> a.oid PRIMARY KEY;
ClassDiagram.Attribut>> A.myname:String =>=>=> RelationalSchema.Column>> a.myname;
ClassDiagram.Attribut>> AllCached.id:Integer =>=>=> RelationalSchema.Column>> allcached.id PRIMARY KEY;
ClassDiagram.Attribut>> AllCached.name:String =>=>=> RelationalSchema.Column>> allcached.name;
ClassDiagram.Attribut>> Principal.id:Long =>=>=> RelationalSchema.Column>> principal.id PRIMARY KEY;
ClassDiagram.Attribut>> Principal.uid:String =>=>=> RelationalSchema.Column>> principal.uid;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> Principal.id:Long =>=>=> RelationalSchema.Column>> principal.id PRIMARY KEY;
ClassDiagram.Attribut>> Principal.uid:String =>=>=> RelationalSchema.Column>> principal.uid;
ClassDiagram.Attribut>> SimpleEntity.id:Long =>=>=> RelationalSchema.Column>> simpleentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SimpleEntity.name:String =>=>=> RelationalSchema.Column>> simpleentity.name;
ClassDiagram.Attribut>> SimpleEntity.active:boolean =>=>=> RelationalSchema.Column>> simpleentity.active;
ClassDiagram.Attribut>> SimpleEntity.somenumber:long =>=>=> RelationalSchema.Column>> simpleentity.somenumber;
ClassDiagram.Attribut>> SimpleEntity.somestrings:List<String> =>=>=> RelationalSchema.Column>> simpleentity.somestrings;
ClassDiagram.Attribut>> SimpleEntity.GeneratedName:Address =>=>=> RelationalSchema.Column>> simpleentity.GeneratedName;
ClassDiagram.Attribut>> Store.id:int =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.name:String =>=>=> RelationalSchema.Column>> store.name;
ClassDiagram.Attribut>> Store.version:int =>=>=> RelationalSchema.Column>> store.version;
ClassDiagram.Attribut>> Product.id:String =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> Product.msrp:BigDecimal =>=>=> RelationalSchema.Column>> product.msrp;
ClassDiagram.Attribut>> Product.version:int =>=>=> RelationalSchema.Column>> product.version;
ClassDiagram.Attribut>> Inventory.id:int =>=>=> RelationalSchema.Column>> inventory.id PRIMARY KEY;
ClassDiagram.Attribut>> Inventory.GeneratedName:Store =>=>=> RelationalSchema.Column>> inventory.GeneratedName;
ClassDiagram.Attribut>> Inventory.GeneratedName:Product =>=>=> RelationalSchema.Column>> inventory.GeneratedName;
ClassDiagram.Attribut>> Inventory.quantity:Long =>=>=> RelationalSchema.Column>> inventory.quantity;
ClassDiagram.Attribut>> Inventory.storeprice:BigDecimal =>=>=> RelationalSchema.Column>> inventory.storeprice;
ClassDiagram.Attribut>> SimpleEntity.id:Long =>=>=> RelationalSchema.Column>> simpleentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SimpleEntity.name:String =>=>=> RelationalSchema.Column>> simpleentity.name;
ClassDiagram.Attribut>> SimpleEntity.active:boolean =>=>=> RelationalSchema.Column>> simpleentity.active;
ClassDiagram.Attribut>> SimpleEntity.somenumber:long =>=>=> RelationalSchema.Column>> simpleentity.somenumber;
ClassDiagram.Attribut>> SimpleEntity.anunspecified:Object =>=>=> RelationalSchema.Column>> simpleentity.anunspecified;
ClassDiagram.Attribut>> SimpleEntity.somestrings:List<String> =>=>=> RelationalSchema.Column>> simpleentity.somestrings;
ClassDiagram.Attribut>> MyEntity.transient:EntityEntry =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> MyEntity.transientprevious:ManagedEntity =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> MyEntity.transientnext:ManagedEntity =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> MyEntity.id:Long =>=>=> RelationalSchema.Column>> myentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MyEntity.name:String =>=>=> RelationalSchema.Column>> myentity.name;
ClassDiagram.Attribut>> WorkOrder.id:int =>=>=> RelationalSchema.Column>> workorder.id PRIMARY KEY;
ClassDiagram.Attribut>> WorkOrder.location:int =>=>=> RelationalSchema.Column>> workorder.location PRIMARY KEY;
ClassDiagram.Attribut>> WorkOrder.originalquantity:int =>=>=> RelationalSchema.Column>> workorder.originalquantity;
ClassDiagram.Attribut>> WorkOrder.completedquantity:int =>=>=> RelationalSchema.Column>> workorder.completedquantity;
ClassDiagram.Attribut>> WorkOrder.duedate:Calendar =>=>=> RelationalSchema.Column>> workorder.duedate;
ClassDiagram.Attribut>> WorkOrder.startdate:Calendar =>=>=> RelationalSchema.Column>> workorder.startdate;
ClassDiagram.Attribut>> WorkOrder.assemblyid:String =>=>=> RelationalSchema.Column>> workorder.assemblyid;
ClassDiagram.Attribut>> WorkOrder.version:int =>=>=> RelationalSchema.Column>> workorder.version;
ClassDiagram.Attribut>> Group.id:int =>=>=> RelationalSchema.Column>> group.id PRIMARY KEY;
ClassDiagram.Attribut>> Group.name:String =>=>=> RelationalSchema.Column>> group.name;
ClassDiagram.Attribut>> Customer.id:int =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.firstname:String =>=>=> RelationalSchema.Column>> customer.firstname;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.version:int =>=>=> RelationalSchema.Column>> customer.version;
ClassDiagram.Attribut>> User.id:int =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.login:String =>=>=> RelationalSchema.Column>> user.login;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> CustomerInventory.id:Long =>=>=> RelationalSchema.Column>> customerinventory.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventory.custid:int =>=>=> RelationalSchema.Column>> customerinventory.custid PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventory.version:int =>=>=> RelationalSchema.Column>> customerinventory.version;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Vehicle.id:Integer =>=>=> RelationalSchema.Column>> vehicle.id PRIMARY KEY;
ClassDiagram.Attribut>> Vehicle.name:String =>=>=> RelationalSchema.Column>> vehicle.name;
ClassDiagram.Attribut>> Parent.id:Long =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.id:Long =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.name:String =>=>=> RelationalSchema.Column>> child.name;
ClassDiagram.Attribut>> CompositeMergeTestTask.entityid:long =>=>=> RelationalSchema.Column>> compositemergetesttask.entityid;
ClassDiagram.Attribut>> Child.id:Long =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.id:Long =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.name:String =>=>=> RelationalSchema.Column>> parent.name;
ClassDiagram.Attribut>> Parent.lazy:String =>=>=> RelationalSchema.Column>> parent.lazy;
ClassDiagram.Attribut>> EntityWithStringCompositeKey.pk:StringCompositeKey =>=>=> RelationalSchema.Column>> entitywithstringcompositekey.pk;
ClassDiagram.Attribut>> EntityWithCompositeKey.pk:CompositeKey =>=>=> RelationalSchema.Column>> entitywithcompositekey.pk;
ClassDiagram.Attribut>> LobEntity.blob_length:int =>=>=> RelationalSchema.Column>> lobentity.blob_length;
ClassDiagram.Attribut>> LobEntity.id:Long =>=>=> RelationalSchema.Column>> lobentity.id PRIMARY KEY;
ClassDiagram.Attribut>> LobEntity.GeneratedName:Blob =>=>=> RelationalSchema.Column>> lobentity.GeneratedName;
ClassDiagram.Attribut>> A.id:Long =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.value:String =>=>=> RelationalSchema.Column>> a.value;
ClassDiagram.Attribut>> Door.id:Integer =>=>=> RelationalSchema.Column>> door.id PRIMARY KEY;
ClassDiagram.Attribut>> Door.name:String =>=>=> RelationalSchema.Column>> door.name;
ClassDiagram.Attribut>> Employee.fetch_profile_tree:String =>=>=> RelationalSchema.Column>> employee.fetch_profile_tree;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> MultipleSessionCollectionTest.log:Logger =>=>=> RelationalSchema.Column>> multiplesessioncollectiontest.log;
ClassDiagram.Attribut>> MultipleSessionCollectionWarningTest.log:CoreMessageLogger =>=>=> RelationalSchema.Column>> multiplesessioncollectionwarningtest.log;
ClassDiagram.Attribut>> MultipleSessionCollectionWarningTest.loginspection:LoggerInspectionRule =>=>=> RelationalSchema.Column>> multiplesessioncollectionwarningtest.loginspection;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.GeneratedName:Contact =>=>=> RelationalSchema.Column>> user.GeneratedName;
ClassDiagram.Attribut>> Contact.serialversionuid:long =>=>=> RelationalSchema.Column>> contact.serialversionuid;
ClassDiagram.Attribut>> Contact.id:Long =>=>=> RelationalSchema.Column>> contact.id PRIMARY KEY;
ClassDiagram.Attribut>> Contact.name:String =>=>=> RelationalSchema.Column>> contact.name;
ClassDiagram.Attribut>> Contact.emailaddresses:Set<EmailAddress> =>=>=> RelationalSchema.Column>> contact.emailaddresses;
ClassDiagram.Attribut>> Contact.emailaddresses2:Set<EmailAddress> =>=>=> RelationalSchema.Column>> contact.emailaddresses2;
ClassDiagram.Attribut>> VersionedCascadeOne.id:long =>=>=> RelationalSchema.Column>> versionedcascadeone.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedCascadeOne.version:long =>=>=> RelationalSchema.Column>> versionedcascadeone.version;
ClassDiagram.Attribut>> UnversionedCascadeOne.id:long =>=>=> RelationalSchema.Column>> unversionedcascadeone.id PRIMARY KEY;
ClassDiagram.Attribut>> UnversionedNoCascadeOne.id:long =>=>=> RelationalSchema.Column>> unversionednocascadeone.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedNoCascadeOne.id:long =>=>=> RelationalSchema.Column>> versionednocascadeone.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedNoCascadeOne.version:long =>=>=> RelationalSchema.Column>> versionednocascadeone.version;
ClassDiagram.Attribut>> Many.id:long =>=>=> RelationalSchema.Column>> many.id PRIMARY KEY;
ClassDiagram.Attribut>> Email.id:Long =>=>=> RelationalSchema.Column>> email.id PRIMARY KEY;
ClassDiagram.Attribut>> Email.address:String =>=>=> RelationalSchema.Column>> email.address;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username PRIMARY KEY;
ClassDiagram.Attribut>> User.sessiondata:Map =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Animal.id:Long =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.weight:long =>=>=> RelationalSchema.Column>> animal.weight;
ClassDiagram.Attribut>> Tiger.numberofstripes:int =>=>=> RelationalSchema.Column>> tiger.numberofstripes;
ClassDiagram.Attribut>> Zoo.id:Long =>=>=> RelationalSchema.Column>> zoo.id PRIMARY KEY;
ClassDiagram.Attribut>> Zoo.name:String =>=>=> RelationalSchema.Column>> zoo.name;
ClassDiagram.Attribut>> Zoo.city:String =>=>=> RelationalSchema.Column>> zoo.city;
ClassDiagram.Attribut>> Zoo.animals:Set<Animal> =>=>=> RelationalSchema.Column>> zoo.animals;
ClassDiagram.Attribut>> MapHolder.id:Long =>=>=> RelationalSchema.Column>> mapholder.id PRIMARY KEY;
ClassDiagram.Attribut>> MapKey.log:Logger =>=>=> RelationalSchema.Column>> mapkey.log;
ClassDiagram.Attribut>> MapKey.id:Long =>=>=> RelationalSchema.Column>> mapkey.id PRIMARY KEY;
ClassDiagram.Attribut>> MapKey.name:String =>=>=> RelationalSchema.Column>> mapkey.name;
ClassDiagram.Attribut>> MapKey.previoushashcode:int =>=>=> RelationalSchema.Column>> mapkey.previoushashcode;
ClassDiagram.Attribut>> MapValue.log:Logger =>=>=> RelationalSchema.Column>> mapvalue.log;
ClassDiagram.Attribut>> MapValue.id:Long =>=>=> RelationalSchema.Column>> mapvalue.id PRIMARY KEY;
ClassDiagram.Attribut>> MapValue.name:String =>=>=> RelationalSchema.Column>> mapvalue.name;
ClassDiagram.Attribut>> MapValue.previoushashcode:int =>=>=> RelationalSchema.Column>> mapvalue.previoushashcode;
ClassDiagram.Attribut>> ConstraintTest.max_name_length:int =>=>=> RelationalSchema.Column>> constrainttest.max_name_length;
ClassDiagram.Attribut>> ConstraintTest.explicit_fk_name_native:String =>=>=> RelationalSchema.Column>> constrainttest.explicit_fk_name_native;
ClassDiagram.Attribut>> ConstraintTest.explicit_fk_name_jpa:String =>=>=> RelationalSchema.Column>> constrainttest.explicit_fk_name_jpa;
ClassDiagram.Attribut>> ConstraintTest.explicit_uk_name:String =>=>=> RelationalSchema.Column>> constrainttest.explicit_uk_name;
ClassDiagram.Attribut>> ConfEntity.serialversionuid:long =>=>=> RelationalSchema.Column>> confentity.serialversionuid;
ClassDiagram.Attribut>> ConfEntity.confkey:String =>=>=> RelationalSchema.Column>> confentity.confkey PRIMARY KEY;
ClassDiagram.Attribut>> ConfEntity.confvalue:String =>=>=> RelationalSchema.Column>> confentity.confvalue PRIMARY KEY;
ClassDiagram.Attribut>> UserConfEntity.serialversionuid:long =>=>=> RelationalSchema.Column>> userconfentity.serialversionuid;
ClassDiagram.Attribut>> UserConfEntity.user:UserEntity =>=>=> RelationalSchema.Column>> userconfentity.user PRIMARY KEY;
ClassDiagram.Attribut>> UserConfEntity.conf:ConfEntity =>=>=> RelationalSchema.Column>> userconfentity.conf PRIMARY KEY;
ClassDiagram.Attribut>> Table1.id:long =>=>=> RelationalSchema.Column>> table1.id PRIMARY KEY;
ClassDiagram.Attribut>> UserEntity.serialversionuid:long =>=>=> RelationalSchema.Column>> userentity.serialversionuid;
ClassDiagram.Attribut>> UserEntity.id:Long =>=>=> RelationalSchema.Column>> userentity.id PRIMARY KEY;
ClassDiagram.Attribut>> UserEntity.name:String =>=>=> RelationalSchema.Column>> userentity.name;
ClassDiagram.Attribut>> Table2.id:long =>=>=> RelationalSchema.Column>> table2.id PRIMARY KEY;
ClassDiagram.Attribut>> A320.javaembeddedversion:String =>=>=> RelationalSchema.Column>> a320.javaembeddedversion;
ClassDiagram.Attribut>> Port.id:Long =>=>=> RelationalSchema.Column>> port.id PRIMARY KEY;
ClassDiagram.Attribut>> Topic.id:int =>=>=> RelationalSchema.Column>> topic.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.id:int =>=>=> RelationalSchema.Column>> car.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.name:String =>=>=> RelationalSchema.Column>> car.name;
ClassDiagram.Attribut>> Narrative.id:int =>=>=> RelationalSchema.Column>> narrative.id PRIMARY KEY;
ClassDiagram.Attribut>> Narrative.state:String =>=>=> RelationalSchema.Column>> narrative.state;
ClassDiagram.Attribut>> Narrative.GeneratedName:Topic =>=>=> RelationalSchema.Column>> narrative.GeneratedName;
ClassDiagram.Attribut>> Forest.id:Integer =>=>=> RelationalSchema.Column>> forest.id PRIMARY KEY;
ClassDiagram.Attribut>> Forest.name:String =>=>=> RelationalSchema.Column>> forest.name;
ClassDiagram.Attribut>> Forest.length:long =>=>=> RelationalSchema.Column>> forest.length;
ClassDiagram.Attribut>> Forest.longdescription:String =>=>=> RelationalSchema.Column>> forest.longdescription;
ClassDiagram.Attribut>> Forest.smalltext:String =>=>=> RelationalSchema.Column>> forest.smalltext;
ClassDiagram.Attribut>> Forest.bigtext:String =>=>=> RelationalSchema.Column>> forest.bigtext;
ClassDiagram.Attribut>> Forest.GeneratedName:Country =>=>=> RelationalSchema.Column>> forest.GeneratedName;
ClassDiagram.Attribut>> Forest.near:Set =>=>=> RelationalSchema.Column>> forest.near;
ClassDiagram.Attribut>> Player.id:int =>=>=> RelationalSchema.Column>> player.id PRIMARY KEY;
ClassDiagram.Attribut>> Player.name:String =>=>=> RelationalSchema.Column>> player.name;
ClassDiagram.Attribut>> Player.//fortheworldcupofoneversusonematches,wehave//teamswithoneplayer(1v1team).onevoneteam:SoccerTeam =>=>=> RelationalSchema.Column>> player.//fortheworldcupofoneversusonematches,wehave//teamswithoneplayer(1v1team).onevoneteam;
ClassDiagram.Attribut>> ContactDetails.id:int =>=>=> RelationalSchema.Column>> contactdetails.id PRIMARY KEY;
ClassDiagram.Attribut>> ContactDetails.local:PhoneNumber =>=>=> RelationalSchema.Column>> contactdetails.local;
ClassDiagram.Attribut>> ContactDetails.GeneratedName:OverseasPhoneNumber =>=>=> RelationalSchema.Column>> contactdetails.GeneratedName;
ClassDiagram.Attribut>> Flight.id:Long =>=>=> RelationalSchema.Column>> flight.id PRIMARY KEY;
ClassDiagram.Attribut>> Flight.maxaltitudeinmilimeter:long =>=>=> RelationalSchema.Column>> flight.maxaltitudeinmilimeter;
ClassDiagram.Attribut>> Flight.maxaltitude:long =>=>=> RelationalSchema.Column>> flight.maxaltitude;
ClassDiagram.Attribut>> Month.id:int =>=>=> RelationalSchema.Column>> month.id PRIMARY KEY;
ClassDiagram.Attribut>> Month.year:int =>=>=> RelationalSchema.Column>> month.year;
ClassDiagram.Attribut>> Month.month:int =>=>=> RelationalSchema.Column>> month.month;
ClassDiagram.Attribut>> Tree.id:Integer =>=>=> RelationalSchema.Column>> tree.id PRIMARY KEY;
ClassDiagram.Attribut>> Tree.name:String =>=>=> RelationalSchema.Column>> tree.name;
ClassDiagram.Attribut>> Forest2.id:Integer =>=>=> RelationalSchema.Column>> forest2.id PRIMARY KEY;
ClassDiagram.Attribut>> Forest2.name:String =>=>=> RelationalSchema.Column>> forest2.name;
ClassDiagram.Attribut>> Forest2.longdescription:String =>=>=> RelationalSchema.Column>> forest2.longdescription;
ClassDiagram.Attribut>> Name.id:Integer =>=>=> RelationalSchema.Column>> name.id PRIMARY KEY;
ClassDiagram.Attribut>> Name.GeneratedName:LastName =>=>=> RelationalSchema.Column>> name.GeneratedName;
ClassDiagram.Attribut>> CommunityBid.communitynote:Starred =>=>=> RelationalSchema.Column>> communitybid.communitynote;
ClassDiagram.Attribut>> SoccerTeam.id:int =>=>=> RelationalSchema.Column>> soccerteam.id PRIMARY KEY;
ClassDiagram.Attribut>> SoccerTeam.name:String =>=>=> RelationalSchema.Column>> soccerteam.name;
ClassDiagram.Attribut>> FormalLastName.id:Integer =>=>=> RelationalSchema.Column>> formallastname.id PRIMARY KEY;
ClassDiagram.Attribut>> FormalLastName.GeneratedName:LastName =>=>=> RelationalSchema.Column>> formallastname.GeneratedName;
ClassDiagram.Attribut>> FormalLastName.designation:String =>=>=> RelationalSchema.Column>> formallastname.designation;
ClassDiagram.Attribut>> Drill.id:int =>=>=> RelationalSchema.Column>> drill.id PRIMARY KEY;
ClassDiagram.Attribut>> Ransom.id:Integer =>=>=> RelationalSchema.Column>> ransom.id PRIMARY KEY;
ClassDiagram.Attribut>> Ransom.kidnappername:String =>=>=> RelationalSchema.Column>> ransom.kidnappername;
ClassDiagram.Attribut>> Ransom.amount:MonetaryAmount =>=>=> RelationalSchema.Column>> ransom.amount;
ClassDiagram.Attribut>> Ransom.GeneratedName:Date =>=>=> RelationalSchema.Column>> ransom.GeneratedName;
ClassDiagram.Attribut>> Race.length:Long =>=>=> RelationalSchema.Column>> race.length;
ClassDiagram.Attribut>> Race.id:Integer =>=>=> RelationalSchema.Column>> race.id PRIMARY KEY;
ClassDiagram.Attribut>> ZipCode.code:String =>=>=> RelationalSchema.Column>> zipcode.code PRIMARY KEY;
ClassDiagram.Attribut>> Bid.id:Integer =>=>=> RelationalSchema.Column>> bid.id PRIMARY KEY;
ClassDiagram.Attribut>> Bid.description:String =>=>=> RelationalSchema.Column>> bid.description;
ClassDiagram.Attribut>> Bid.note:Starred =>=>=> RelationalSchema.Column>> bid.note;
ClassDiagram.Attribut>> Bid.editorsnote:Starred =>=>=> RelationalSchema.Column>> bid.editorsnote;
ClassDiagram.Attribut>> Bid.approved:Boolean =>=>=> RelationalSchema.Column>> bid.approved;
ClassDiagram.Attribut>> LocalContactDetails.id:int =>=>=> RelationalSchema.Column>> localcontactdetails.id PRIMARY KEY;
ClassDiagram.Attribut>> LocalContactDetails.local:PhoneNumber =>=>=> RelationalSchema.Column>> localcontactdetails.local;
ClassDiagram.Attribut>> LocalContactDetails.GeneratedName:OverseasPhoneNumber =>=>=> RelationalSchema.Column>> localcontactdetails.GeneratedName;
ClassDiagram.Attribut>> WashingMachine.id:Integer =>=>=> RelationalSchema.Column>> washingmachine.id PRIMARY KEY;
ClassDiagram.Attribut>> WashingMachine.transientisactive:boolean =>=>=> RelationalSchema.Column>> washingmachine.transientisactive;
ClassDiagram.Attribut>> Address.id:Integer =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.GeneratedName:Country =>=>=> RelationalSchema.Column>> address.GeneratedName;
ClassDiagram.Attribut>> Mother.id:Integer =>=>=> RelationalSchema.Column>> mother.id PRIMARY KEY;
ClassDiagram.Attribut>> Father.id:Integer =>=>=> RelationalSchema.Column>> father.id PRIMARY KEY;
ClassDiagram.Attribut>> Son.id:Integer =>=>=> RelationalSchema.Column>> son.id PRIMARY KEY;
ClassDiagram.Attribut>> Son.GeneratedName:Father =>=>=> RelationalSchema.Column>> son.GeneratedName;
ClassDiagram.Attribut>> Son.GeneratedName:Mother =>=>=> RelationalSchema.Column>> son.GeneratedName;
ClassDiagram.Attribut>> Country.id:Integer =>=>=> RelationalSchema.Column>> country.id PRIMARY KEY;
ClassDiagram.Attribut>> Country.name:String =>=>=> RelationalSchema.Column>> country.name;
ClassDiagram.Attribut>> EntityWithAnElementCollection.id:Long =>=>=> RelationalSchema.Column>> entitywithanelementcollection.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityWithAnElementCollection.somestrings:Set<String> =>=>=> RelationalSchema.Column>> entitywithanelementcollection.somestrings;
ClassDiagram.Attribut>> BugSystem.id:Integer =>=>=> RelationalSchema.Column>> bugsystem.id PRIMARY KEY;
ClassDiagram.Attribut>> BugSystem.bugs:Set<Bug> =>=>=> RelationalSchema.Column>> bugsystem.bugs;
ClassDiagram.Attribut>> Products.id:Integer =>=>=> RelationalSchema.Column>> products.id PRIMARY KEY;
ClassDiagram.Attribut>> Products.widgets:Set<Widgets> =>=>=> RelationalSchema.Column>> products.widgets;
ClassDiagram.Attribut>> Query.id:Long =>=>=> RelationalSchema.Column>> query.id PRIMARY KEY;
ClassDiagram.Attribut>> Query.includedlocations:Set<Location> =>=>=> RelationalSchema.Column>> query.includedlocations;
ClassDiagram.Attribut>> Matrix.id:Integer =>=>=> RelationalSchema.Column>> matrix.id PRIMARY KEY;
ClassDiagram.Attribut>> Matrix.mvalues:SortedMap<Integer,Float> =>=>=> RelationalSchema.Column>> matrix.mvalues;
ClassDiagram.Attribut>> Owner.id:Integer =>=>=> RelationalSchema.Column>> owner.id PRIMARY KEY;
ClassDiagram.Attribut>> Owner.elements:Set<String> =>=>=> RelationalSchema.Column>> owner.elements;
ClassDiagram.Attribut>> Boy.id:Integer =>=>=> RelationalSchema.Column>> boy.id PRIMARY KEY;
ClassDiagram.Attribut>> Boy.firstname:String =>=>=> RelationalSchema.Column>> boy.firstname;
ClassDiagram.Attribut>> Boy.lastname:String =>=>=> RelationalSchema.Column>> boy.lastname;
ClassDiagram.Attribut>> Boy.nicknames:Set<String> =>=>=> RelationalSchema.Column>> boy.nicknames;
ClassDiagram.Attribut>> Boy.hatednames:Set<String> =>=>=> RelationalSchema.Column>> boy.hatednames;
ClassDiagram.Attribut>> Boy.preferrednames:Set<String> =>=>=> RelationalSchema.Column>> boy.preferrednames;
ClassDiagram.Attribut>> Boy.scorepernickname:Map<String,Integer> =>=>=> RelationalSchema.Column>> boy.scorepernickname;
ClassDiagram.Attribut>> Boy.scoreperpreferredname:Map<String,Integer> =>=>=> RelationalSchema.Column>> boy.scoreperpreferredname;
ClassDiagram.Attribut>> Boy.favoritenumbers:int =>=>=> RelationalSchema.Column>> boy.favoritenumbers;
ClassDiagram.Attribut>> Boy.favoritetoys:Set<Toy> =>=>=> RelationalSchema.Column>> boy.favoritetoys;
ClassDiagram.Attribut>> Boy.characters:Set<Character> =>=>=> RelationalSchema.Column>> boy.characters;
ClassDiagram.Attribut>> Boy.foods:Map<String,FavoriteFood> =>=>=> RelationalSchema.Column>> boy.foods;
ClassDiagram.Attribut>> Boy.countryattitudes:Set<CountryAttitude> =>=>=> RelationalSchema.Column>> boy.countryattitudes;
ClassDiagram.Attribut>> TestCourse.testcourseid:Long =>=>=> RelationalSchema.Column>> testcourse.testcourseid PRIMARY KEY;
ClassDiagram.Attribut>> TestCourse.title:LocalizedString =>=>=> RelationalSchema.Column>> testcourse.title;
ClassDiagram.Attribut>> C.id:int =>=>=> RelationalSchema.Column>> c.id PRIMARY KEY;
ClassDiagram.Attribut>> C.comment:String =>=>=> RelationalSchema.Column>> c.comment;
ClassDiagram.Attribut>> A.id:int =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.listofb:List<B> =>=>=> RelationalSchema.Column>> a.listofb;
ClassDiagram.Attribut>> Sale.id:Integer =>=>=> RelationalSchema.Column>> sale.id PRIMARY KEY;
ClassDiagram.Attribut>> Sale.contacts:List<Contact> =>=>=> RelationalSchema.Column>> sale.contacts;
ClassDiagram.Attribut>> Widgets.name:String =>=>=> RelationalSchema.Column>> widgets.name;
ClassDiagram.Attribut>> Widgets.id:int =>=>=> RelationalSchema.Column>> widgets.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.nicknamesascendingnaturalsort:Set<String> =>=>=> RelationalSchema.Column>> person.nicknamesascendingnaturalsort;
ClassDiagram.Attribut>> Person.nicknamesdescendingnaturalsort:Set<String> =>=>=> RelationalSchema.Column>> person.nicknamesdescendingnaturalsort;
ClassDiagram.Attribut>> Person.addressesascendingnaturalsort:Set<Address> =>=>=> RelationalSchema.Column>> person.addressesascendingnaturalsort;
ClassDiagram.Attribut>> Person.addressesdescendingnaturalsort:Set<Address> =>=>=> RelationalSchema.Column>> person.addressesdescendingnaturalsort;
ClassDiagram.Attribut>> Person.addressescityascendingsort:Set<Address> =>=>=> RelationalSchema.Column>> person.addressescityascendingsort;
ClassDiagram.Attribut>> Person.addressescitydescendingsort:Set<Address> =>=>=> RelationalSchema.Column>> person.addressescitydescendingsort;
ClassDiagram.Attribut>> RaceExecution.id:Integer =>=>=> RelationalSchema.Column>> raceexecution.id PRIMARY KEY;
ClassDiagram.Attribut>> RaceExecution.poiarrival:Map<Poi,PoiArrival> =>=>=> RelationalSchema.Column>> raceexecution.poiarrival;
ClassDiagram.Attribut>> Poi.id:Integer =>=>=> RelationalSchema.Column>> poi.id PRIMARY KEY;
ClassDiagram.Attribut>> Poi.name:String =>=>=> RelationalSchema.Column>> poi.name;
ClassDiagram.Attribut>> Show.id:Integer =>=>=> RelationalSchema.Column>> show.id PRIMARY KEY;
ClassDiagram.Attribut>> PersonAddress.id:Integer =>=>=> RelationalSchema.Column>> personaddress.id PRIMARY KEY;
ClassDiagram.Attribut>> Computer.id:ComputerPk =>=>=> RelationalSchema.Column>> computer.id;
ClassDiagram.Attribut>> Computer.cpu:String =>=>=> RelationalSchema.Column>> computer.cpu;
ClassDiagram.Attribut>> ShowDescription.id:Integer =>=>=> RelationalSchema.Column>> showdescription.id PRIMARY KEY;
ClassDiagram.Attribut>> Device.GeneratedName:ManagedDevice =>=>=> RelationalSchema.Column>> device.GeneratedName;
ClassDiagram.Attribut>> Device.tag:String =>=>=> RelationalSchema.Column>> device.tag;
ClassDiagram.Attribut>> DeviceGroupConfig.name:String =>=>=> RelationalSchema.Column>> devicegroupconfig.name;
ClassDiagram.Attribut>> ManagedDevice.name:String =>=>=> RelationalSchema.Column>> manageddevice.name;
ClassDiagram.Attribut>> ManagedDevice.GeneratedName:Device =>=>=> RelationalSchema.Column>> manageddevice.GeneratedName;
ClassDiagram.Attribut>> ManagedDevice.GeneratedName:DeviceGroupConfig =>=>=> RelationalSchema.Column>> manageddevice.GeneratedName;
ClassDiagram.Attribut>> Owner.deleted:boolean =>=>=> RelationalSchema.Column>> owner.deleted;
ClassDiagram.Attribut>> Owner.id:Long =>=>=> RelationalSchema.Column>> owner.id PRIMARY KEY;
ClassDiagram.Attribut>> Owner.name:String =>=>=> RelationalSchema.Column>> owner.name;
ClassDiagram.Attribut>> Owner.version:Integer =>=>=> RelationalSchema.Column>> owner.version;
ClassDiagram.Attribut>> TrousersZip.id:Integer =>=>=> RelationalSchema.Column>> trouserszip.id PRIMARY KEY;
ClassDiagram.Attribut>> Owner.id:Integer =>=>=> RelationalSchema.Column>> owner.id PRIMARY KEY;
ClassDiagram.Attribut>> Client.id:Integer =>=>=> RelationalSchema.Column>> client.id PRIMARY KEY;
ClassDiagram.Attribut>> Client.name:String =>=>=> RelationalSchema.Column>> client.name;
ClassDiagram.Attribut>> Client.GeneratedName:Address =>=>=> RelationalSchema.Column>> client.GeneratedName;
ClassDiagram.Attribut>> Client.secondary:Address =>=>=> RelationalSchema.Column>> client.secondary;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Trousers.id:Integer =>=>=> RelationalSchema.Column>> trousers.id PRIMARY KEY;
ClassDiagram.Attribut>> Heart.id:Integer =>=>=> RelationalSchema.Column>> heart.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.id:long =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.id:Integer =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> SerialNumber.id:SerialNumberPk =>=>=> RelationalSchema.Column>> serialnumber.id PRIMARY KEY;
ClassDiagram.Attribut>> SerialNumber.value:String =>=>=> RelationalSchema.Column>> serialnumber.value;
ClassDiagram.Attribut>> PartyAffiliate.partyid:String =>=>=> RelationalSchema.Column>> partyaffiliate.partyid PRIMARY KEY;
ClassDiagram.Attribut>> PartyAffiliate.affiliatename:String =>=>=> RelationalSchema.Column>> partyaffiliate.affiliatename;
ClassDiagram.Attribut>> Body.id:Integer =>=>=> RelationalSchema.Column>> body.id PRIMARY KEY;
ClassDiagram.Attribut>> Body.GeneratedName:Heart =>=>=> RelationalSchema.Column>> body.GeneratedName;
ClassDiagram.Attribut>> Party.partyid:String =>=>=> RelationalSchema.Column>> party.partyid PRIMARY KEY;
ClassDiagram.Attribut>> OwnerAddress.id:Integer =>=>=> RelationalSchema.Column>> owneraddress.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Shipment.id:Long =>=>=> RelationalSchema.Column>> shipment.id PRIMARY KEY;
ClassDiagram.Attribut>> Shipment.createdon:Date =>=>=> RelationalSchema.Column>> shipment.createdon;
ClassDiagram.Attribut>> Shipment.GeneratedName:ShipmentState =>=>=> RelationalSchema.Column>> shipment.GeneratedName;
ClassDiagram.Attribut>> PropertyList.id:Integer =>=>=> RelationalSchema.Column>> propertylist.id PRIMARY KEY;
ClassDiagram.Attribut>> PropertyList.name:String =>=>=> RelationalSchema.Column>> propertylist.name;
ClassDiagram.Attribut>> PropertyList.somepropery:T =>=>=> RelationalSchema.Column>> propertylist.somepropery;
ClassDiagram.Attribut>> PropertyList.generalproperties:List<T> =>=>=> RelationalSchema.Column>> propertylist.generalproperties;
ClassDiagram.Attribut>> PropertySet.id:Integer =>=>=> RelationalSchema.Column>> propertyset.id PRIMARY KEY;
ClassDiagram.Attribut>> PropertySet.name:String =>=>=> RelationalSchema.Column>> propertyset.name;
ClassDiagram.Attribut>> PropertySet.some:Property =>=>=> RelationalSchema.Column>> propertyset.some;
ClassDiagram.Attribut>> PropertySet.generalproperties:List<Property> =>=>=> RelationalSchema.Column>> propertyset.generalproperties;
ClassDiagram.Attribut>> LongProperty.id:Integer =>=>=> RelationalSchema.Column>> longproperty.id PRIMARY KEY;
ClassDiagram.Attribut>> LongProperty.name:String =>=>=> RelationalSchema.Column>> longproperty.name;
ClassDiagram.Attribut>> LongProperty.value:Long =>=>=> RelationalSchema.Column>> longproperty.value;
ClassDiagram.Attribut>> PropertyMap.id:Integer =>=>=> RelationalSchema.Column>> propertymap.id PRIMARY KEY;
ClassDiagram.Attribut>> PropertyMap.name:String =>=>=> RelationalSchema.Column>> propertymap.name;
ClassDiagram.Attribut>> PropertyMap.properties:Map<String,Property> =>=>=> RelationalSchema.Column>> propertymap.properties;
ClassDiagram.Attribut>> CharProperty.id:Integer =>=>=> RelationalSchema.Column>> charproperty.id PRIMARY KEY;
ClassDiagram.Attribut>> CharProperty.name:String =>=>=> RelationalSchema.Column>> charproperty.name;
ClassDiagram.Attribut>> CharProperty.value:Character =>=>=> RelationalSchema.Column>> charproperty.value;
ClassDiagram.Attribut>> IntegerProperty.id:Integer =>=>=> RelationalSchema.Column>> integerproperty.id PRIMARY KEY;
ClassDiagram.Attribut>> IntegerProperty.name:String =>=>=> RelationalSchema.Column>> integerproperty.name;
ClassDiagram.Attribut>> IntegerProperty.value:Integer =>=>=> RelationalSchema.Column>> integerproperty.value;
ClassDiagram.Attribut>> StringProperty.id:Integer =>=>=> RelationalSchema.Column>> stringproperty.id PRIMARY KEY;
ClassDiagram.Attribut>> StringProperty.name:String =>=>=> RelationalSchema.Column>> stringproperty.name;
ClassDiagram.Attribut>> StringProperty.value:String =>=>=> RelationalSchema.Column>> stringproperty.value;
ClassDiagram.Attribut>> TvMagazin.id:TvMagazinPk =>=>=> RelationalSchema.Column>> tvmagazin.id;
ClassDiagram.Attribut>> TvMagazin.time:Date =>=>=> RelationalSchema.Column>> tvmagazin.time;
ClassDiagram.Attribut>> Channel.id:Integer =>=>=> RelationalSchema.Column>> channel.id PRIMARY KEY;
ClassDiagram.Attribut>> SomeEntity.id:SomeEntityId =>=>=> RelationalSchema.Column>> someentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SomeEntity.prop:String =>=>=> RelationalSchema.Column>> someentity.prop;
ClassDiagram.Attribut>> CardField.GeneratedName:PrimaryKey =>=>=> RelationalSchema.Column>> cardfield.GeneratedName;
ClassDiagram.Attribut>> Card.id:String =>=>=> RelationalSchema.Column>> card.id PRIMARY KEY;
ClassDiagram.Attribut>> Key.id:String =>=>=> RelationalSchema.Column>> key.id PRIMARY KEY;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Order =>=>=> RelationalSchema.Column>> orderline.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Product =>=>=> RelationalSchema.Column>> orderline.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name PRIMARY KEY;
ClassDiagram.Attribut>> A.GeneratedName:AId =>=>=> RelationalSchema.Column>> a.GeneratedName;
ClassDiagram.Attribut>> Presenter.name:String =>=>=> RelationalSchema.Column>> presenter.name PRIMARY KEY;
ClassDiagram.Attribut>> Parent.id:ParentPk =>=>=> RelationalSchema.Column>> parent.id;
ClassDiagram.Attribut>> C.id:Long =>=>=> RelationalSchema.Column>> c.id PRIMARY KEY;
ClassDiagram.Attribut>> LittleGenius.particularskill:String =>=>=> RelationalSchema.Column>> littlegenius.particularskill;
ClassDiagram.Attribut>> Order.id:Integer =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> TvProgramIdClass.GeneratedName:Channel =>=>=> RelationalSchema.Column>> tvprogramidclass.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> TvProgramIdClass.GeneratedName:Presenter =>=>=> RelationalSchema.Column>> tvprogramidclass.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> TvProgramIdClass.time:Date =>=>=> RelationalSchema.Column>> tvprogramidclass.time;
ClassDiagram.Attribut>> TvProgramIdClass.text:String =>=>=> RelationalSchema.Column>> tvprogramidclass.text;
ClassDiagram.Attribut>> Child.id:ChildPk =>=>=> RelationalSchema.Column>> child.id;
ClassDiagram.Attribut>> B.id:Long =>=>=> RelationalSchema.Column>> b.id PRIMARY KEY;
ClassDiagram.Attribut>> TvProgram.id:TvMagazinPk =>=>=> RelationalSchema.Column>> tvprogram.id;
ClassDiagram.Attribut>> TvProgram.time:Date =>=>=> RelationalSchema.Column>> tvprogram.time;
ClassDiagram.Attribut>> TvProgram.text:String =>=>=> RelationalSchema.Column>> tvprogram.text;
ClassDiagram.Attribut>> JoinColumnOrFormulaTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> joincolumnorformulatest.ssr;
ClassDiagram.Attribut>> Company.id:Integer =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.name:String =>=>=> RelationalSchema.Column>> company.name;
ClassDiagram.Attribut>> SocialSecurityPhysicalAccount.number:String =>=>=> RelationalSchema.Column>> socialsecurityphysicalaccount.number;
ClassDiagram.Attribut>> SocialSecurityPhysicalAccount.countrycode:String =>=>=> RelationalSchema.Column>> socialsecurityphysicalaccount.countrycode;
ClassDiagram.Attribut>> Administration.id:Integer =>=>=> RelationalSchema.Column>> administration.id PRIMARY KEY;
ClassDiagram.Attribut>> Administration.firstname:String =>=>=> RelationalSchema.Column>> administration.firstname;
ClassDiagram.Attribut>> Administration.lastname:String =>=>=> RelationalSchema.Column>> administration.lastname;
ClassDiagram.Attribut>> Administration.address:String =>=>=> RelationalSchema.Column>> administration.address;
ClassDiagram.Attribut>> Administration.version:Integer =>=>=> RelationalSchema.Column>> administration.version;
ClassDiagram.Attribut>> Administration.transientfield:String =>=>=> RelationalSchema.Column>> administration.transientfield;
ClassDiagram.Attribut>> BusTrip.id:BusTripPk =>=>=> RelationalSchema.Column>> bustrip.id;
ClassDiagram.Attribut>> BusTrip.status:Availability =>=>=> RelationalSchema.Column>> bustrip.status;
ClassDiagram.Attribut>> BusTrip.serial:byte =>=>=> RelationalSchema.Column>> bustrip.serial;
ClassDiagram.Attribut>> BusTrip.terminustime:Date =>=>=> RelationalSchema.Column>> bustrip.terminustime;
ClassDiagram.Attribut>> BusTrip.players:Map<String,SocialSecurityPhysicalAccount> =>=>=> RelationalSchema.Column>> bustrip.players;
ClassDiagram.Attribut>> BusTrip.roads:List =>=>=> RelationalSchema.Column>> bustrip.roads;
ClassDiagram.Attribut>> SocialSecurityMoralAccount.number:String =>=>=> RelationalSchema.Column>> socialsecuritymoralaccount.number;
ClassDiagram.Attribut>> SocialSecurityMoralAccount.countrycode:String =>=>=> RelationalSchema.Column>> socialsecuritymoralaccount.countrycode;
ClassDiagram.Attribut>> Match.competitor1point:String =>=>=> RelationalSchema.Column>> match.competitor1point;
ClassDiagram.Attribut>> Match.version:Integer =>=>=> RelationalSchema.Column>> match.version;
ClassDiagram.Attribut>> Match.playerassn:SocialSecurityNumber =>=>=> RelationalSchema.Column>> match.playerassn;
ClassDiagram.Attribut>> Staff.id:Integer =>=>=> RelationalSchema.Column>> staff.id PRIMARY KEY;
ClassDiagram.Attribut>> Staff.sizeininches:double =>=>=> RelationalSchema.Column>> staff.sizeininches;
ClassDiagram.Attribut>> Staff.radiuss:double =>=>=> RelationalSchema.Column>> staff.radiuss;
ClassDiagram.Attribut>> Staff.diameter:double =>=>=> RelationalSchema.Column>> staff.diameter;
ClassDiagram.Attribut>> ProfessionalAgreement.id:Integer =>=>=> RelationalSchema.Column>> professionalagreement.id PRIMARY KEY;
ClassDiagram.Attribut>> ProfessionalAgreement.expiration:Date =>=>=> RelationalSchema.Column>> professionalagreement.expiration;
ClassDiagram.Attribut>> Antenna.id:Integer =>=>=> RelationalSchema.Column>> antenna.id PRIMARY KEY;
ClassDiagram.Attribut>> Antenna.longitude:String =>=>=> RelationalSchema.Column>> antenna.longitude;
ClassDiagram.Attribut>> Antenna.latitude:String =>=>=> RelationalSchema.Column>> antenna.latitude;
ClassDiagram.Attribut>> Antenna.power:Double =>=>=> RelationalSchema.Column>> antenna.power;
ClassDiagram.Attribut>> DBTimestamped.id:int =>=>=> RelationalSchema.Column>> dbtimestamped.id PRIMARY KEY;
ClassDiagram.Attribut>> DBTimestamped.lastup:Date =>=>=> RelationalSchema.Column>> dbtimestamped.lastup;
ClassDiagram.Attribut>> VMTimestamped.id:int =>=>=> RelationalSchema.Column>> vmtimestamped.id PRIMARY KEY;
ClassDiagram.Attribut>> VMTimestamped.lastup:Date =>=>=> RelationalSchema.Column>> vmtimestamped.lastup;
ClassDiagram.Attribut>> Truck.weight:int =>=>=> RelationalSchema.Column>> truck.weight;
ClassDiagram.Attribut>> Conductor.id:Integer =>=>=> RelationalSchema.Column>> conductor.id PRIMARY KEY;
ClassDiagram.Attribut>> Conductor.name:String =>=>=> RelationalSchema.Column>> conductor.name;
ClassDiagram.Attribut>> Conductor.version:Long =>=>=> RelationalSchema.Column>> conductor.version;
ClassDiagram.Attribut>> Vehicule.id:String =>=>=> RelationalSchema.Column>> vehicule.id PRIMARY KEY;
ClassDiagram.Attribut>> Vehicule.registrationnumber:String =>=>=> RelationalSchema.Column>> vehicule.registrationnumber;
ClassDiagram.Attribut>> Vehicule.year:Integer =>=>=> RelationalSchema.Column>> vehicule.year;
ClassDiagram.Attribut>> Book.isbn:String =>=>=> RelationalSchema.Column>> book.isbn PRIMARY KEY;
ClassDiagram.Attribut>> Book.name:String =>=>=> RelationalSchema.Column>> book.name;
ClassDiagram.Attribut>> Book.GeneratedName:Summary =>=>=> RelationalSchema.Column>> book.GeneratedName;
ClassDiagram.Attribut>> FavoriteThings.id:int =>=>=> RelationalSchema.Column>> favoritethings.id PRIMARY KEY;
ClassDiagram.Attribut>> FavoriteThings.web:InternetFavorites =>=>=> RelationalSchema.Column>> favoritethings.web;
ClassDiagram.Attribut>> EntityWithNestedEmbeddables.id:Integer =>=>=> RelationalSchema.Column>> entitywithnestedembeddables.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityWithNestedEmbeddables.embeda:EmbeddableA =>=>=> RelationalSchema.Column>> entitywithnestedembeddables.embeda;
ClassDiagram.Attribut>> WealthyPerson.vacationhomes:Set<Address> =>=>=> RelationalSchema.Column>> wealthyperson.vacationhomes;
ClassDiagram.Attribut>> WealthyPerson.legacyvacationhomes:Set<Address> =>=>=> RelationalSchema.Column>> wealthyperson.legacyvacationhomes;
ClassDiagram.Attribut>> WealthyPerson.explicitvacationhomes:Set<Address> =>=>=> RelationalSchema.Column>> wealthyperson.explicitvacationhomes;
ClassDiagram.Attribut>> SpreadDeal./***withthetenor.*/long:Swap =>=>=> RelationalSchema.Column>> spreaddeal./***withthetenor.*/long;
ClassDiagram.Attribut>> SpreadDeal./***withthelongertenor.*/short:Swap =>=>=> RelationalSchema.Column>> spreaddeal./***withthelongertenor.*/short;
ClassDiagram.Attribut>> RegionalArticle.pk:RegionalArticlePk =>=>=> RelationalSchema.Column>> regionalarticle.pk PRIMARY KEY;
ClassDiagram.Attribut>> RegionalArticle.name:String =>=>=> RelationalSchema.Column>> regionalarticle.name;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:PersonName =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Alias.id:Long =>=>=> RelationalSchema.Column>> alias.id PRIMARY KEY;
ClassDiagram.Attribut>> Alias.GeneratedName:Name =>=>=> RelationalSchema.Column>> alias.GeneratedName;
ClassDiagram.Attribut>> Alias.source:String =>=>=> RelationalSchema.Column>> alias.source;
ClassDiagram.Attribut>> VanillaSwap./***identifieroftheinterestrateswap*/instrumentid:String =>=>=> RelationalSchema.Column>> vanillaswap./***identifieroftheinterestrateswap*/instrumentid;
ClassDiagram.Attribut>> VanillaSwap./***oftheswap(andofbothlegs).*/:Currency =>=>=> RelationalSchema.Column>> vanillaswap./***oftheswap(andofbothlegs).*/;
ClassDiagram.Attribut>> VanillaSwap./***fixedleg(cashflowswiththefixedrate).*/:FixedLeg =>=>=> RelationalSchema.Column>> vanillaswap./***fixedleg(cashflowswiththefixedrate).*/;
ClassDiagram.Attribut>> VanillaSwap./***floatingleg(cashflowsboundtoafinancialindex).*/:FloatLeg =>=>=> RelationalSchema.Column>> vanillaswap./***floatingleg(cashflowsboundtoafinancialindex).*/;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.GeneratedName:Address =>=>=> RelationalSchema.Column>> person.GeneratedName;
ClassDiagram.Attribut>> Country.iso2:String =>=>=> RelationalSchema.Column>> country.iso2 PRIMARY KEY;
ClassDiagram.Attribut>> Country.name:String =>=>=> RelationalSchema.Column>> country.name;
ClassDiagram.Attribut>> InternetProvider.id:Integer =>=>=> RelationalSchema.Column>> internetprovider.id PRIMARY KEY;
ClassDiagram.Attribut>> InternetProvider.brandname:String =>=>=> RelationalSchema.Column>> internetprovider.brandname;
ClassDiagram.Attribut>> InternetProvider.owner:LegalStructure =>=>=> RelationalSchema.Column>> internetprovider.owner;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.GeneratedName:Address =>=>=> RelationalSchema.Column>> person.GeneratedName;
ClassDiagram.Attribut>> Person.bornin:Country =>=>=> RelationalSchema.Column>> person.bornin;
ClassDiagram.Attribut>> AddressType.id:Integer =>=>=> RelationalSchema.Column>> addresstype.id PRIMARY KEY;
ClassDiagram.Attribut>> AddressType.name:String =>=>=> RelationalSchema.Column>> addresstype.name;
ClassDiagram.Attribut>> Manager.id:Integer =>=>=> RelationalSchema.Column>> manager.id PRIMARY KEY;
ClassDiagram.Attribut>> Manager.name:String =>=>=> RelationalSchema.Column>> manager.name;
ClassDiagram.Attribut>> CorpType.id:Integer =>=>=> RelationalSchema.Column>> corptype.id PRIMARY KEY;
ClassDiagram.Attribut>> CorpType.type:String =>=>=> RelationalSchema.Column>> corptype.type;
ClassDiagram.Attribut>> Nationality.id:Integer =>=>=> RelationalSchema.Column>> nationality.id PRIMARY KEY;
ClassDiagram.Attribut>> Nationality.name:String =>=>=> RelationalSchema.Column>> nationality.name;
ClassDiagram.Attribut>> Passport.id:Long =>=>=> RelationalSchema.Column>> passport.id PRIMARY KEY;
ClassDiagram.Attribut>> Passport.number:String =>=>=> RelationalSchema.Column>> passport.number;
ClassDiagram.Attribut>> Dummy.id:Long =>=>=> RelationalSchema.Column>> dummy.id PRIMARY KEY;
ClassDiagram.Attribut>> Dummy.transientdummyfield:K =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> SomeGuy.id:Integer =>=>=> RelationalSchema.Column>> someguy.id PRIMARY KEY;
ClassDiagram.Attribut>> Price.id:Integer =>=>=> RelationalSchema.Column>> price.id PRIMARY KEY;
ClassDiagram.Attribut>> Price.amount:Double =>=>=> RelationalSchema.Column>> price.amount;
ClassDiagram.Attribut>> Price.currency:String =>=>=> RelationalSchema.Column>> price.currency;
ClassDiagram.Attribut>> WildEntity.serialversionuid:long =>=>=> RelationalSchema.Column>> wildentity.serialversionuid;
ClassDiagram.Attribut>> WildEntity.id:int =>=>=> RelationalSchema.Column>> wildentity.id PRIMARY KEY;
ClassDiagram.Attribut>> WildEntity.property:String =>=>=> RelationalSchema.Column>> wildentity.property;
ClassDiagram.Attribut>> PaperType.id:Integer =>=>=> RelationalSchema.Column>> papertype.id PRIMARY KEY;
ClassDiagram.Attribut>> PaperType.name:String =>=>=> RelationalSchema.Column>> papertype.name;
ClassDiagram.Attribut>> DNA.id:Integer =>=>=> RelationalSchema.Column>> dna.id PRIMARY KEY;
ClassDiagram.Attribut>> Gene.id:Integer =>=>=> RelationalSchema.Column>> gene.id PRIMARY KEY;
ClassDiagram.Attribut>> Gene.state:STE =>=>=> RelationalSchema.Column>> gene.state;
ClassDiagram.Attribut>> Contest.id:int =>=>=> RelationalSchema.Column>> contest.id PRIMARY KEY;
ClassDiagram.Attribut>> Contest.heldin:Month =>=>=> RelationalSchema.Column>> contest.heldin;
ClassDiagram.Attribut>> Competitor.id:int =>=>=> RelationalSchema.Column>> competitor.id PRIMARY KEY;
ClassDiagram.Attribut>> Competitor.name:String =>=>=> RelationalSchema.Column>> competitor.name;
ClassDiagram.Attribut>> IncorrectEntity.name:String =>=>=> RelationalSchema.Column>> incorrectentity.name;
ClassDiagram.Attribut>> Boat.id:Integer =>=>=> RelationalSchema.Column>> boat.id PRIMARY KEY;
ClassDiagram.Attribut>> Boat.size:int =>=>=> RelationalSchema.Column>> boat.size;
ClassDiagram.Attribut>> Boat.weight:int =>=>=> RelationalSchema.Column>> boat.weight;
ClassDiagram.Attribut>> VersionedCompiledCode.id:Integer =>=>=> RelationalSchema.Column>> versionedcompiledcode.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedCompiledCode.version:Integer =>=>=> RelationalSchema.Column>> versionedcompiledcode.version;
ClassDiagram.Attribut>> LobTestEntity.id:Long =>=>=> RelationalSchema.Column>> lobtestentity.id PRIMARY KEY;
ClassDiagram.Attribut>> LobTestEntity.lobvalue:Blob =>=>=> RelationalSchema.Column>> lobtestentity.lobvalue;
ClassDiagram.Attribut>> LobTestEntity.qwerty:String =>=>=> RelationalSchema.Column>> lobtestentity.qwerty;
ClassDiagram.Attribut>> LobHolder.id:Long =>=>=> RelationalSchema.Column>> lobholder.id PRIMARY KEY;
ClassDiagram.Attribut>> LobHolder.locator:Clob =>=>=> RelationalSchema.Column>> lobholder.locator;
ClassDiagram.Attribut>> LobHolder.locator:Blob =>=>=> RelationalSchema.Column>> lobholder.locator;
ClassDiagram.Attribut>> LobHolder.counter:Integer =>=>=> RelationalSchema.Column>> lobholder.counter;
ClassDiagram.Attribut>> Document.id:Long =>=>=> RelationalSchema.Column>> document.id PRIMARY KEY;
ClassDiagram.Attribut>> Document.revision:Integer =>=>=> RelationalSchema.Column>> document.revision;
ClassDiagram.Attribut>> Document.fulltext:String =>=>=> RelationalSchema.Column>> document.fulltext;
ClassDiagram.Attribut>> Document.shortdescription:String =>=>=> RelationalSchema.Column>> document.shortdescription;
ClassDiagram.Attribut>> EntitySerialize.id:long =>=>=> RelationalSchema.Column>> entityserialize.id PRIMARY KEY;
ClassDiagram.Attribut>> EntitySerialize.explicitlob:ExplicitSerializable =>=>=> RelationalSchema.Column>> entityserialize.explicitlob;
ClassDiagram.Attribut>> EntitySerialize.explicit:ExplicitSerializable =>=>=> RelationalSchema.Column>> entityserialize.explicit;
ClassDiagram.Attribut>> EntitySerialize.implicit:ImplicitSerializable =>=>=> RelationalSchema.Column>> entityserialize.implicit;
ClassDiagram.Attribut>> EntitySerialize.explicitoverridingimplicit:ImplicitSerializable =>=>=> RelationalSchema.Column>> entityserialize.explicitoverridingimplicit;
ClassDiagram.Attribut>> MaterializedBlobEntity.id:Long =>=>=> RelationalSchema.Column>> materializedblobentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MaterializedBlobEntity.name:String =>=>=> RelationalSchema.Column>> materializedblobentity.name;
ClassDiagram.Attribut>> MaterializedBlobEntity.thes:byte =>=>=> RelationalSchema.Column>> materializedblobentity.thes;
ClassDiagram.Attribut>> CompiledCode.id:Integer =>=>=> RelationalSchema.Column>> compiledcode.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.id:Integer =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedBook.id:Integer =>=>=> RelationalSchema.Column>> versionedbook.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedBook.version:Integer =>=>=> RelationalSchema.Column>> versionedbook.version;
ClassDiagram.Attribut>> LongStringHolder.id:Long =>=>=> RelationalSchema.Column>> longstringholder.id PRIMARY KEY;
ClassDiagram.Attribut>> LongStringHolder.name:char =>=>=> RelationalSchema.Column>> longstringholder.name;
ClassDiagram.Attribut>> LongStringHolder.whatever:Character =>=>=> RelationalSchema.Column>> longstringholder.whatever;
ClassDiagram.Attribut>> LongStringHolder.long:String =>=>=> RelationalSchema.Column>> longstringholder.long;
ClassDiagram.Attribut>> ImageHolder.id:Long =>=>=> RelationalSchema.Column>> imageholder.id PRIMARY KEY;
ClassDiagram.Attribut>> ImageHolder.longarray:byte =>=>=> RelationalSchema.Column>> imageholder.longarray;
ClassDiagram.Attribut>> ImageHolder.GeneratedName:Dog =>=>=> RelationalSchema.Column>> imageholder.GeneratedName;
ClassDiagram.Attribut>> ImageHolder.picarray:Byte =>=>=> RelationalSchema.Column>> imageholder.picarray;
ClassDiagram.Attribut>> D.id:D_PK =>=>=> RelationalSchema.Column>> d.id;
ClassDiagram.Attribut>> A.id:A_PK =>=>=> RelationalSchema.Column>> a.id;
ClassDiagram.Attribut>> ClassA.id:int =>=>=> RelationalSchema.Column>> classa.id PRIMARY KEY;
ClassDiagram.Attribut>> B.id:int =>=>=> RelationalSchema.Column>> b.id PRIMARY KEY;
ClassDiagram.Attribut>> NaturalIdOnManyToOne.id:int =>=>=> RelationalSchema.Column>> naturalidonmanytoone.id PRIMARY KEY;
ClassDiagram.Attribut>> State.id:Integer =>=>=> RelationalSchema.Column>> state.id PRIMARY KEY;
ClassDiagram.Attribut>> State.name:String =>=>=> RelationalSchema.Column>> state.name;
ClassDiagram.Attribut>> A.oid:long =>=>=> RelationalSchema.Column>> a.oid PRIMARY KEY;
ClassDiagram.Attribut>> A.version:int =>=>=> RelationalSchema.Column>> a.version;
ClassDiagram.Attribut>> A.name:String =>=>=> RelationalSchema.Column>> a.name;
ClassDiagram.Attribut>> A.ds:Set<D> =>=>=> RelationalSchema.Column>> a.ds;
ClassDiagram.Attribut>> A.single:D =>=>=> RelationalSchema.Column>> a.single;
ClassDiagram.Attribut>> D.oid:long =>=>=> RelationalSchema.Column>> d.oid PRIMARY KEY;
ClassDiagram.Attribut>> D.version:int =>=>=> RelationalSchema.Column>> d.version;
ClassDiagram.Attribut>> D.GeneratedName:A =>=>=> RelationalSchema.Column>> d.GeneratedName;
ClassDiagram.Attribut>> D.single:A =>=>=> RelationalSchema.Column>> d.single;
ClassDiagram.Attribut>> A.accountid:AId =>=>=> RelationalSchema.Column>> a.accountid;
ClassDiagram.Attribut>> A.shortcode:String =>=>=> RelationalSchema.Column>> a.shortcode;
ClassDiagram.Attribut>> Citizen.id:Integer =>=>=> RelationalSchema.Column>> citizen.id PRIMARY KEY;
ClassDiagram.Attribut>> Citizen.firstname:String =>=>=> RelationalSchema.Column>> citizen.firstname;
ClassDiagram.Attribut>> Citizen.lastname:String =>=>=> RelationalSchema.Column>> citizen.lastname;
ClassDiagram.Attribut>> Citizen.ssn:String =>=>=> RelationalSchema.Column>> citizen.ssn;
ClassDiagram.Attribut>> Project.id:int =>=>=> RelationalSchema.Column>> project.id PRIMARY KEY;
ClassDiagram.Attribut>> StoreCustomer.GeneratedName:Store =>=>=> RelationalSchema.Column>> storecustomer.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> StoreCustomer.GeneratedName:Customer =>=>=> RelationalSchema.Column>> storecustomer.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> StoreCustomer.serialversionuid:long =>=>=> RelationalSchema.Column>> storecustomer.serialversionuid;
ClassDiagram.Attribut>> BasketItems.serialversionuid:long =>=>=> RelationalSchema.Column>> basketitems.serialversionuid;
ClassDiagram.Attribut>> BasketItems.GeneratedName:ShoppingBaskets =>=>=> RelationalSchema.Column>> basketitems.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> BasketItems.cost:Double =>=>=> RelationalSchema.Column>> basketitems.cost PRIMARY KEY;
ClassDiagram.Attribut>> CardKey.id:int =>=>=> RelationalSchema.Column>> cardkey.id PRIMARY KEY;
ClassDiagram.Attribut>> Benefserv.idpk:BigInteger =>=>=> RelationalSchema.Column>> benefserv.idpk PRIMARY KEY;
ClassDiagram.Attribut>> Acces.idpk:BigInteger =>=>=> RelationalSchema.Column>> acces.idpk PRIMARY KEY;
ClassDiagram.Attribut>> A.id:int =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> Service.idpk:BigInteger =>=>=> RelationalSchema.Column>> service.idpk PRIMARY KEY;
ClassDiagram.Attribut>> C.prent:A =>=>=> RelationalSchema.Column>> c.prent PRIMARY KEY;
ClassDiagram.Attribut>> C.sequencenumber:int =>=>=> RelationalSchema.Column>> c.sequencenumber PRIMARY KEY;
ClassDiagram.Attribut>> Droitacces.idpk:BigInteger =>=>=> RelationalSchema.Column>> droitacces.idpk PRIMARY KEY;
ClassDiagram.Attribut>> B.parent:C =>=>=> RelationalSchema.Column>> b.parent PRIMARY KEY;
ClassDiagram.Attribut>> B.sequencenumber:int =>=>=> RelationalSchema.Column>> b.sequencenumber PRIMARY KEY;
ClassDiagram.Attribut>> CourseStudent.GeneratedName:Course =>=>=> RelationalSchema.Column>> coursestudent.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> CourseStudent.GeneratedName:Student =>=>=> RelationalSchema.Column>> coursestudent.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> CourseStudent.value:String =>=>=> RelationalSchema.Column>> coursestudent.value;
ClassDiagram.Attribut>> Customer.id:Integer =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.serialversionuid:long =>=>=> RelationalSchema.Column>> customer.serialversionuid;
ClassDiagram.Attribut>> Store.id:Integer =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.serialversionuid:long =>=>=> RelationalSchema.Column>> store.serialversionuid;
ClassDiagram.Attribut>> Student.id:int =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Course.id:int =>=>=> RelationalSchema.Column>> course.id PRIMARY KEY;
ClassDiagram.Attribut>> Course.name:String =>=>=> RelationalSchema.Column>> course.name;
ClassDiagram.Attribut>> Card.primarykey:CardPrimaryKey =>=>=> RelationalSchema.Column>> card.primarykey PRIMARY KEY;
ClassDiagram.Attribut>> ShoppingBaskets.serialversionuid:long =>=>=> RelationalSchema.Column>> shoppingbaskets.serialversionuid;
ClassDiagram.Attribut>> ShoppingBaskets.owner:Customers =>=>=> RelationalSchema.Column>> shoppingbaskets.owner PRIMARY KEY;
ClassDiagram.Attribut>> ShoppingBaskets.basketdatetime:java.util.Date =>=>=> RelationalSchema.Column>> shoppingbaskets.basketdatetime PRIMARY KEY;
ClassDiagram.Attribut>> Customers.serialversionuid:long =>=>=> RelationalSchema.Column>> customers.serialversionuid;
ClassDiagram.Attribut>> Customers.customerid:int =>=>=> RelationalSchema.Column>> customers.customerid PRIMARY KEY;
ClassDiagram.Attribut>> CardField.GeneratedName:PrimaryKey =>=>=> RelationalSchema.Column>> cardfield.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> Foobar.foo:String =>=>=> RelationalSchema.Column>> foobar.foo;
ClassDiagram.Attribut>> Gardenshed.id:Integer =>=>=> RelationalSchema.Column>> gardenshed.id PRIMARY KEY;
ClassDiagram.Attribut>> Gardenshed.brand:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Gardenshed.floors:long =>=>=> RelationalSchema.Column>> gardenshed.floors;
ClassDiagram.Attribut>> Tourist.id:long =>=>=> RelationalSchema.Column>> tourist.id PRIMARY KEY;
ClassDiagram.Attribut>> Tourist.name:String =>=>=> RelationalSchema.Column>> tourist.name;
ClassDiagram.Attribut>> Tourist.destination:String =>=>=> RelationalSchema.Column>> tourist.destination;
ClassDiagram.Attribut>> Boy.id:long =>=>=> RelationalSchema.Column>> boy.id PRIMARY KEY;
ClassDiagram.Attribut>> Boy.nicknames:Set<String> =>=>=> RelationalSchema.Column>> boy.nicknames;
ClassDiagram.Attribut>> Driver.id:int =>=>=> RelationalSchema.Column>> driver.id PRIMARY KEY;
ClassDiagram.Attribut>> Driver.name:String =>=>=> RelationalSchema.Column>> driver.name;
ClassDiagram.Attribut>> Cook.id:int =>=>=> RelationalSchema.Column>> cook.id PRIMARY KEY;
ClassDiagram.Attribut>> Cook.favouriteknife:Knive =>=>=> RelationalSchema.Column>> cook.favouriteknife;
ClassDiagram.Attribut>> RentalCar.id:int =>=>=> RelationalSchema.Column>> rentalcar.id PRIMARY KEY;
ClassDiagram.Attribut>> RentalCar.GeneratedName:Driver =>=>=> RelationalSchema.Column>> rentalcar.GeneratedName;
ClassDiagram.Attribut>> Gardenshed.id:Integer =>=>=> RelationalSchema.Column>> gardenshed.id PRIMARY KEY;
ClassDiagram.Attribut>> Gardenshed.brand:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Gardenshed.floors:long =>=>=> RelationalSchema.Column>> gardenshed.floors;
ClassDiagram.Attribut>> Shape.id:long =>=>=> RelationalSchema.Column>> shape.id PRIMARY KEY;
ClassDiagram.Attribut>> Horse.name:String =>=>=> RelationalSchema.Column>> horse.name;
ClassDiagram.Attribut>> Course6.id:long =>=>=> RelationalSchema.Column>> course6.id PRIMARY KEY;
ClassDiagram.Attribut>> Course6.title:String =>=>=> RelationalSchema.Column>> course6.title;
ClassDiagram.Attribut>> Bed.quality:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Course2.id:long =>=>=> RelationalSchema.Column>> course2.id PRIMARY KEY;
ClassDiagram.Attribut>> Course2.title:String =>=>=> RelationalSchema.Column>> course2.title;
ClassDiagram.Attribut>> Course7.id:long =>=>=> RelationalSchema.Column>> course7.id PRIMARY KEY;
ClassDiagram.Attribut>> Course7.title:String =>=>=> RelationalSchema.Column>> course7.title;
ClassDiagram.Attribut>> Circle.GeneratedName:Color =>=>=> RelationalSchema.Column>> circle.GeneratedName;
ClassDiagram.Attribut>> Course3.id:long =>=>=> RelationalSchema.Column>> course3.id PRIMARY KEY;
ClassDiagram.Attribut>> Course3.title:String =>=>=> RelationalSchema.Column>> course3.title;
ClassDiagram.Attribut>> Animal.id:long =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname;
ClassDiagram.Attribut>> Course5.id:long =>=>=> RelationalSchema.Column>> course5.id PRIMARY KEY;
ClassDiagram.Attribut>> Course5.title:String =>=>=> RelationalSchema.Column>> course5.title;
ClassDiagram.Attribut>> Chair.pillow:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Course1.id:long =>=>=> RelationalSchema.Column>> course1.id PRIMARY KEY;
ClassDiagram.Attribut>> Course1.title:String =>=>=> RelationalSchema.Column>> course1.title;
ClassDiagram.Attribut>> Course8.id:long =>=>=> RelationalSchema.Column>> course8.id PRIMARY KEY;
ClassDiagram.Attribut>> Course8.title:String =>=>=> RelationalSchema.Column>> course8.title;
ClassDiagram.Attribut>> Furniture.id:Integer =>=>=> RelationalSchema.Column>> furniture.id PRIMARY KEY;
ClassDiagram.Attribut>> Furniture.brand:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Furniture.weight:long =>=>=> RelationalSchema.Column>> furniture.weight;
ClassDiagram.Attribut>> Course4.id:long =>=>=> RelationalSchema.Column>> course4.id PRIMARY KEY;
ClassDiagram.Attribut>> Course4.title:String =>=>=> RelationalSchema.Column>> course4.title;
ClassDiagram.Attribut>> BigBed.size:int =>=>=> RelationalSchema.Column>> bigbed.size;
ClassDiagram.Attribut>> Being.id:long =>=>=> RelationalSchema.Column>> being.id PRIMARY KEY;
ClassDiagram.Attribut>> Square.id:long =>=>=> RelationalSchema.Column>> square.id PRIMARY KEY;
ClassDiagram.Attribut>> Square.GeneratedName:Position =>=>=> RelationalSchema.Column>> square.GeneratedName;
ClassDiagram.Attribut>> Student.id:long =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Bed.quality:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> BigBed.size:int =>=>=> RelationalSchema.Column>> bigbed.size;
ClassDiagram.Attribut>> Furniture.id:Integer =>=>=> RelationalSchema.Column>> furniture.id PRIMARY KEY;
ClassDiagram.Attribut>> Furniture.brand:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Furniture.weight:long =>=>=> RelationalSchema.Column>> furniture.weight;
ClassDiagram.Attribut>> Chair.pillow:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> A.id:String =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.name:String =>=>=> RelationalSchema.Column>> a.name;
ClassDiagram.Attribut>> A.value:int =>=>=> RelationalSchema.Column>> a.value;
ClassDiagram.Attribut>> A.address:Set<AddressEntry> =>=>=> RelationalSchema.Column>> a.address;
ClassDiagram.Attribut>> Address.id:long =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Tomato.size:int =>=>=> RelationalSchema.Column>> tomato.size;
ClassDiagram.Attribut>> File.name:String =>=>=> RelationalSchema.Column>> file.name PRIMARY KEY;
ClassDiagram.Attribut>> Document.size:int =>=>=> RelationalSchema.Column>> document.size;
ClassDiagram.Attribut>> Fruit.id:Integer =>=>=> RelationalSchema.Column>> fruit.id PRIMARY KEY;
ClassDiagram.Attribut>> Carrot.length:int =>=>=> RelationalSchema.Column>> carrot.length;
ClassDiagram.Attribut>> BaseClass2.id:long =>=>=> RelationalSchema.Column>> baseclass2.id PRIMARY KEY;
ClassDiagram.Attribut>> BaseClass.id:long =>=>=> RelationalSchema.Column>> baseclass.id PRIMARY KEY;
ClassDiagram.Attribut>> ProgramExecution.id:Integer =>=>=> RelationalSchema.Column>> programexecution.id PRIMARY KEY;
ClassDiagram.Attribut>> ProgramExecution.action:String =>=>=> RelationalSchema.Column>> programexecution.action;
ClassDiagram.Attribut>> Customer.customername:String =>=>=> RelationalSchema.Column>> customer.customername;
ClassDiagram.Attribut>> Customer.customercode:String =>=>=> RelationalSchema.Column>> customer.customercode;
ClassDiagram.Attribut>> Pool.id:Integer =>=>=> RelationalSchema.Column>> pool.id PRIMARY KEY;
ClassDiagram.Attribut>> Pool.address:PoolAddress =>=>=> RelationalSchema.Column>> pool.address;
ClassDiagram.Attribut>> Document.size:int =>=>=> RelationalSchema.Column>> document.size;
ClassDiagram.Attribut>> Clothing.id:long =>=>=> RelationalSchema.Column>> clothing.id PRIMARY KEY;
ClassDiagram.Attribut>> Clothing.size:int =>=>=> RelationalSchema.Column>> clothing.size;
ClassDiagram.Attribut>> Clothing.color:String =>=>=> RelationalSchema.Column>> clothing.color;
ClassDiagram.Attribut>> Asset.id:Integer =>=>=> RelationalSchema.Column>> asset.id PRIMARY KEY;
ClassDiagram.Attribut>> Asset.GeneratedName:Parent =>=>=> RelationalSchema.Column>> asset.GeneratedName;
ClassDiagram.Attribut>> FinancialAsset.price:double =>=>=> RelationalSchema.Column>> financialasset.price;
ClassDiagram.Attribut>> Parent.id:Integer =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.propertyass:Set =>=>=> RelationalSchema.Column>> parent.propertyass;
ClassDiagram.Attribut>> Parent.financialass:Set =>=>=> RelationalSchema.Column>> parent.financialass;
ClassDiagram.Attribut>> Account.serialversionuid:long =>=>=> RelationalSchema.Column>> account.serialversionuid;
ClassDiagram.Attribut>> Account.id:int =>=>=> RelationalSchema.Column>> account.id PRIMARY KEY;
ClassDiagram.Attribut>> Account.number:String =>=>=> RelationalSchema.Column>> account.number;
ClassDiagram.Attribut>> Account.balance:double =>=>=> RelationalSchema.Column>> account.balance;
ClassDiagram.Attribut>> File.name:String =>=>=> RelationalSchema.Column>> file.name PRIMARY KEY;
ClassDiagram.Attribut>> PropertyAsset.price:double =>=>=> RelationalSchema.Column>> propertyasset.price;
ClassDiagram.Attribut>> Sweater.issweat:boolean =>=>=> RelationalSchema.Column>> sweater.issweat;
ClassDiagram.Attribut>> EventInformation.notificationid:String =>=>=> RelationalSchema.Column>> eventinformation.notificationid PRIMARY KEY;
ClassDiagram.Attribut>> Company.companyname:String =>=>=> RelationalSchema.Column>> company.companyname;
ClassDiagram.Attribut>> Company.companyaddress:String =>=>=> RelationalSchema.Column>> company.companyaddress;
ClassDiagram.Attribut>> Client.serialversionuid:long =>=>=> RelationalSchema.Column>> client.serialversionuid;
ClassDiagram.Attribut>> Client.street:String =>=>=> RelationalSchema.Column>> client.street;
ClassDiagram.Attribut>> Client.code:String =>=>=> RelationalSchema.Column>> client.code;
ClassDiagram.Attribut>> Client.city:String =>=>=> RelationalSchema.Column>> client.city;
ClassDiagram.Attribut>> Person.id:int =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.firtsname:String =>=>=> RelationalSchema.Column>> person.firtsname;
ClassDiagram.Attribut>> File.name:String =>=>=> RelationalSchema.Column>> file.name PRIMARY KEY;
ClassDiagram.Attribut>> Document.size:int =>=>=> RelationalSchema.Column>> document.size;
ClassDiagram.Attribut>> Vegetable.id:VegetablePk =>=>=> RelationalSchema.Column>> vegetable.id PRIMARY KEY;
ClassDiagram.Attribut>> Vegetable.priceincent:long =>=>=> RelationalSchema.Column>> vegetable.priceincent;
ClassDiagram.Attribut>> DuplicatedDiscriminatorValueTest.discriminator_value:String =>=>=> RelationalSchema.Column>> duplicateddiscriminatorvaluetest.discriminator_value;
ClassDiagram.Attribut>> Trash.id:Integer =>=>=> RelationalSchema.Column>> trash.id PRIMARY KEY;
ClassDiagram.Attribut>> Funk.starred:int =>=>=> RelationalSchema.Column>> funk.starred;
ClassDiagram.Attribut>> Music.id:Integer =>=>=> RelationalSchema.Column>> music.id PRIMARY KEY;
ClassDiagram.Attribut>> Music.avgbeat:int =>=>=> RelationalSchema.Column>> music.avgbeat;
ClassDiagram.Attribut>> Music.type:Integer =>=>=> RelationalSchema.Column>> music.type;
ClassDiagram.Attribut>> Building.id:Integer =>=>=> RelationalSchema.Column>> building.id PRIMARY KEY;
ClassDiagram.Attribut>> Building.street:String =>=>=> RelationalSchema.Column>> building.street;
ClassDiagram.Attribut>> SomeOtherEntity.id:int =>=>=> RelationalSchema.Column>> someotherentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SomeOtherEntity.data:boolean =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.data:byte =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.//settingaarbitraryacterheretomakethistestalsopassagainstpostgresql//postgresqlthrowsotherwiseanexceptionwhenpersistingthenullvalue//org.postgresql.util.psqlexception:error:invalidbytesequenceforencoding"utf8":0x00acterdata:char =>=>=> RelationalSchema.Column>> someotherentity.//settingaarbitraryacterheretomakethistestalsopassagainstpostgresql//postgresqlthrowsotherwiseanexceptionwhenpersistingthenullvalue//org.postgresql.util.psqlexception:error:invalidbytesequenceforencoding"utf8":0x00acterdata;
ClassDiagram.Attribut>> SomeOtherEntity.data:short =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.egerdata:int =>=>=> RelationalSchema.Column>> someotherentity.egerdata;
ClassDiagram.Attribut>> SomeOtherEntity.data:long =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.data:double =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.data:float =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.GeneratedName:Grade =>=>=> RelationalSchema.Column>> someotherentity.GeneratedName;
ClassDiagram.Attribut>> SomeEntity.id:java.util.Date =>=>=> RelationalSchema.Column>> someentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SomeEntity.timedata:java.sql.Time =>=>=> RelationalSchema.Column>> someentity.timedata;
ClassDiagram.Attribut>> SomeEntity.tsdata:java.sql.Timestamp =>=>=> RelationalSchema.Column>> someentity.tsdata;
ClassDiagram.Attribut>> SomeEntity.data:Byte =>=>=> RelationalSchema.Column>> someentity.data;
ClassDiagram.Attribut>> SomeEntity.chardata:Character =>=>=> RelationalSchema.Column>> someentity.chardata;
ClassDiagram.Attribut>> Player.id:Long =>=>=> RelationalSchema.Column>> player.id PRIMARY KEY;
ClassDiagram.Attribut>> Player.GeneratedName:Team =>=>=> RelationalSchema.Column>> player.GeneratedName;
ClassDiagram.Attribut>> Player.name:String =>=>=> RelationalSchema.Column>> player.name;
ClassDiagram.Attribut>> Team.id:Long =>=>=> RelationalSchema.Column>> team.id PRIMARY KEY;
ClassDiagram.Attribut>> Deck.id:Integer =>=>=> RelationalSchema.Column>> deck.id PRIMARY KEY;
ClassDiagram.Attribut>> Card.id:Integer =>=>=> RelationalSchema.Column>> card.id PRIMARY KEY;
ClassDiagram.Attribut>> Flight.id:String =>=>=> RelationalSchema.Column>> flight.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.GeneratedName:Passport =>=>=> RelationalSchema.Column>> customer.GeneratedName;
ClassDiagram.Attribut>> TwinkleToes.id:BigDecimal =>=>=> RelationalSchema.Column>> twinkletoes.id PRIMARY KEY;
ClassDiagram.Attribut>> Home.id:Long =>=>=> RelationalSchema.Column>> home.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.id:Integer =>=>=> RelationalSchema.Column>> dog.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.name:String =>=>=> RelationalSchema.Column>> dog.name;
ClassDiagram.Attribut>> Computer.id:Long =>=>=> RelationalSchema.Column>> computer.id PRIMARY KEY;
ClassDiagram.Attribut>> Computer.serialnumber:String =>=>=> RelationalSchema.Column>> computer.serialnumber;
ClassDiagram.Attribut>> Store.id:Long =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.id:Integer =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Ball.id:Integer =>=>=> RelationalSchema.Column>> ball.id PRIMARY KEY;
ClassDiagram.Attribut>> Shoe.id:Long =>=>=> RelationalSchema.Column>> shoe.id PRIMARY KEY;
ClassDiagram.Attribut>> Bunny.id:BigDecimal =>=>=> RelationalSchema.Column>> bunny.id PRIMARY KEY;
ClassDiagram.Attribut>> PlanetCheatSheet.GeneratedName:Planet =>=>=> RelationalSchema.Column>> planetcheatsheet.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> PlanetCheatSheet.mass:double =>=>=> RelationalSchema.Column>> planetcheatsheet.mass;
ClassDiagram.Attribut>> PlanetCheatSheet.radius:double =>=>=> RelationalSchema.Column>> planetcheatsheet.radius;
ClassDiagram.Attribut>> PlanetCheatSheet.numberofinhabitants:long =>=>=> RelationalSchema.Column>> planetcheatsheet.numberofinhabitants;
ClassDiagram.Attribut>> Footballer.firstname:String =>=>=> RelationalSchema.Column>> footballer.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.lastname:String =>=>=> RelationalSchema.Column>> footballer.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.club:String =>=>=> RelationalSchema.Column>> footballer.club;
ClassDiagram.Attribut>> Furniture.id:Integer =>=>=> RelationalSchema.Column>> furniture.id PRIMARY KEY;
ClassDiagram.Attribut>> Department.id:Long =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> PointyTooth.id:BigDecimal =>=>=> RelationalSchema.Column>> pointytooth.id PRIMARY KEY;
ClassDiagram.Attribut>> Monkey.id:String =>=>=> RelationalSchema.Column>> monkey.id PRIMARY KEY;
ClassDiagram.Attribut>> Hotel.id:Long =>=>=> RelationalSchema.Column>> hotel.id PRIMARY KEY;
ClassDiagram.Attribut>> Hotel.name:String =>=>=> RelationalSchema.Column>> hotel.name;
ClassDiagram.Attribut>> SoundSystem.id:String =>=>=> RelationalSchema.Column>> soundsystem.id PRIMARY KEY;
ClassDiagram.Attribut>> SoundSystem.brand:String =>=>=> RelationalSchema.Column>> soundsystem.brand;
ClassDiagram.Attribut>> SoundSystem.model:String =>=>=> RelationalSchema.Column>> soundsystem.model;
ClassDiagram.Attribut>> BreakDance.id:Integer =>=>=> RelationalSchema.Column>> breakdance.id PRIMARY KEY;
ClassDiagram.Attribut>> BreakDance.name:String =>=>=> RelationalSchema.Column>> breakdance.name;
ClassDiagram.Attribut>> AutoEntity.id:Long =>=>=> RelationalSchema.Column>> autoentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MinimalTableEntity.tbl_name:String =>=>=> RelationalSchema.Column>> minimaltableentity.tbl_name;
ClassDiagram.Attribut>> MinimalTableEntity.id:Long =>=>=> RelationalSchema.Column>> minimaltableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MinimalSequenceEntity.seq_name:String =>=>=> RelationalSchema.Column>> minimalsequenceentity.seq_name;
ClassDiagram.Attribut>> MinimalSequenceEntity.id:Long =>=>=> RelationalSchema.Column>> minimalsequenceentity.id PRIMARY KEY;
ClassDiagram.Attribut>> CompleteSequenceEntity.seq_name:String =>=>=> RelationalSchema.Column>> completesequenceentity.seq_name;
ClassDiagram.Attribut>> CompleteSequenceEntity.id:Long =>=>=> RelationalSchema.Column>> completesequenceentity.id PRIMARY KEY;
ClassDiagram.Attribut>> DedicatedSequenceEntity1.sequence_suffix:String =>=>=> RelationalSchema.Column>> dedicatedsequenceentity1.sequence_suffix;
ClassDiagram.Attribut>> DedicatedSequenceEntity1.id:Long =>=>=> RelationalSchema.Column>> dedicatedsequenceentity1.id PRIMARY KEY;
ClassDiagram.Attribut>> DedicatedSequenceEntity2.entity_name:String =>=>=> RelationalSchema.Column>> dedicatedsequenceentity2.entity_name;
ClassDiagram.Attribut>> DedicatedSequenceEntity2.id:Long =>=>=> RelationalSchema.Column>> dedicatedsequenceentity2.id PRIMARY KEY;
ClassDiagram.Attribut>> SoundSystem.id:String =>=>=> RelationalSchema.Column>> soundsystem.id PRIMARY KEY;
ClassDiagram.Attribut>> SoundSystem.brand:String =>=>=> RelationalSchema.Column>> soundsystem.brand;
ClassDiagram.Attribut>> SoundSystem.model:String =>=>=> RelationalSchema.Column>> soundsystem.model;
ClassDiagram.Attribut>> HibernateSequenceEntity.id:Long =>=>=> RelationalSchema.Column>> hibernatesequenceentity.id PRIMARY KEY;
ClassDiagram.Attribut>> HibernateSequenceEntity.text:String =>=>=> RelationalSchema.Column>> hibernatesequenceentity.text;
ClassDiagram.Attribut>> BreakDance.id:Integer =>=>=> RelationalSchema.Column>> breakdance.id PRIMARY KEY;
ClassDiagram.Attribut>> BreakDance.name:String =>=>=> RelationalSchema.Column>> breakdance.name;
ClassDiagram.Attribut>> Home.id:Long =>=>=> RelationalSchema.Column>> home.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.id:Long =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> PointyTooth.id:BigDecimal =>=>=> RelationalSchema.Column>> pointytooth.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.id:Integer =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Bunny.id:BigDecimal =>=>=> RelationalSchema.Column>> bunny.id PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.firstname:String =>=>=> RelationalSchema.Column>> footballer.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.lastname:String =>=>=> RelationalSchema.Column>> footballer.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.club:String =>=>=> RelationalSchema.Column>> footballer.club;
ClassDiagram.Attribut>> Furniture.id:Integer =>=>=> RelationalSchema.Column>> furniture.id PRIMARY KEY;
ClassDiagram.Attribut>> Shoe.id:Long =>=>=> RelationalSchema.Column>> shoe.id PRIMARY KEY;
ClassDiagram.Attribut>> Department.id:Long =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> Ball.id:Integer =>=>=> RelationalSchema.Column>> ball.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.id:Integer =>=>=> RelationalSchema.Column>> dog.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.name:String =>=>=> RelationalSchema.Column>> dog.name;
ClassDiagram.Attribut>> PlanetCheatSheet.GeneratedName:Planet =>=>=> RelationalSchema.Column>> planetcheatsheet.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> PlanetCheatSheet.mass:double =>=>=> RelationalSchema.Column>> planetcheatsheet.mass;
ClassDiagram.Attribut>> PlanetCheatSheet.radius:double =>=>=> RelationalSchema.Column>> planetcheatsheet.radius;
ClassDiagram.Attribut>> PlanetCheatSheet.numberofinhabitants:long =>=>=> RelationalSchema.Column>> planetcheatsheet.numberofinhabitants;
ClassDiagram.Attribut>> Computer.id:Long =>=>=> RelationalSchema.Column>> computer.id PRIMARY KEY;
ClassDiagram.Attribut>> Computer.serialnumber:String =>=>=> RelationalSchema.Column>> computer.serialnumber;
ClassDiagram.Attribut>> TwinkleToes.id:BigDecimal =>=>=> RelationalSchema.Column>> twinkletoes.id PRIMARY KEY;
ClassDiagram.Attribut>> Monkey.id:String =>=>=> RelationalSchema.Column>> monkey.id PRIMARY KEY;
ClassDiagram.Attribut>> Mark.id:int =>=>=> RelationalSchema.Column>> mark.id PRIMARY KEY;
ClassDiagram.Attribut>> Mark.value:int =>=>=> RelationalSchema.Column>> mark.value;
ClassDiagram.Attribut>> Captain.firstname:String =>=>=> RelationalSchema.Column>> captain.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Captain.lastname:String =>=>=> RelationalSchema.Column>> captain.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Dictionary.id:Integer =>=>=> RelationalSchema.Column>> dictionary.id PRIMARY KEY;
ClassDiagram.Attribut>> Dictionary.name:String =>=>=> RelationalSchema.Column>> dictionary.name;
ClassDiagram.Attribut>> Dictionary.editor:String =>=>=> RelationalSchema.Column>> dictionary.editor;
ClassDiagram.Attribut>> Night.id:Integer =>=>=> RelationalSchema.Column>> night.id PRIMARY KEY;
ClassDiagram.Attribut>> Night.duration:long =>=>=> RelationalSchema.Column>> night.duration;
ClassDiagram.Attribut>> Night.GeneratedName:Date =>=>=> RelationalSchema.Column>> night.GeneratedName;
ClassDiagram.Attribut>> Night.GeneratedName:Area =>=>=> RelationalSchema.Column>> night.GeneratedName;
ClassDiagram.Attribut>> Employeegroup.id:Long =>=>=> RelationalSchema.Column>> employeegroup.id PRIMARY KEY;
ClassDiagram.Attribut>> Twilight.id:int =>=>=> RelationalSchema.Column>> twilight.id PRIMARY KEY;
ClassDiagram.Attribut>> AllTables.tablename:String =>=>=> RelationalSchema.Column>> alltables.tablename PRIMARY KEY;
ClassDiagram.Attribut>> AllTables.daysold:String =>=>=> RelationalSchema.Column>> alltables.daysold;
ClassDiagram.Attribut>> Chaos.id:Long =>=>=> RelationalSchema.Column>> chaos.id PRIMARY KEY;
ClassDiagram.Attribut>> Chaos.size:Long =>=>=> RelationalSchema.Column>> chaos.size;
ClassDiagram.Attribut>> Chaos.name:String =>=>=> RelationalSchema.Column>> chaos.name;
ClassDiagram.Attribut>> Chaos.nickname:String =>=>=> RelationalSchema.Column>> chaos.nickname;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> CasimirParticle.id:Long =>=>=> RelationalSchema.Column>> casimirparticle.id PRIMARY KEY;
ClassDiagram.Attribut>> Area.id:Integer =>=>=> RelationalSchema.Column>> area.id PRIMARY KEY;
ClassDiagram.Attribut>> Area.name:String =>=>=> RelationalSchema.Column>> area.name;
ClassDiagram.Attribut>> Attrvalue.id:Long =>=>=> RelationalSchema.Column>> attrvalue.id PRIMARY KEY;
ClassDiagram.Attribut>> Attrvalue.value:String =>=>=> RelationalSchema.Column>> attrvalue.value;
ClassDiagram.Attribut>> SpaceShip.name:String =>=>=> RelationalSchema.Column>> spaceship.name PRIMARY KEY;
ClassDiagram.Attribut>> SpaceShip.model:String =>=>=> RelationalSchema.Column>> spaceship.model;
ClassDiagram.Attribut>> SpaceShip.speed:double =>=>=> RelationalSchema.Column>> spaceship.speed;
ClassDiagram.Attribut>> SpaceShip.GeneratedName:Captain =>=>=> RelationalSchema.Column>> spaceship.GeneratedName;
ClassDiagram.Attribut>> SpaceShip.GeneratedName:Dimensions =>=>=> RelationalSchema.Column>> spaceship.GeneratedName;
ClassDiagram.Attribut>> Attrset.id:Long =>=>=> RelationalSchema.Column>> attrset.id PRIMARY KEY;
ClassDiagram.Attribut>> Discount.id:Long =>=>=> RelationalSchema.Column>> discount.id PRIMARY KEY;
ClassDiagram.Attribut>> Discount.discount:double =>=>=> RelationalSchema.Column>> discount.discount;
ClassDiagram.Attribut>> Dependent.//defaultcolumnnamefor"name"attributeisoverriddenid:DependentId =>=>=> RelationalSchema.Column>> dependent.//defaultcolumnnamefor"name"attributeisoverriddenid;
ClassDiagram.Attribut>> Employee.empid:EmployeeId =>=>=> RelationalSchema.Column>> employee.empid;
ClassDiagram.Attribut>> Policy.id:PolicyId =>=>=> RelationalSchema.Column>> policy.id;
ClassDiagram.Attribut>> Dependent.id:DependentId =>=>=> RelationalSchema.Column>> dependent.id;
ClassDiagram.Attribut>> Employee.empid:EmployeeId =>=>=> RelationalSchema.Column>> employee.empid;
ClassDiagram.Attribut>> Dependent.//defaultcolumnnameisoverriddenname:String =>=>=> RelationalSchema.Column>> dependent.//defaultcolumnnameisoverriddenname PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.emp:Employee =>=>=> RelationalSchema.Column>> dependent.emp PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empid:EmployeeId =>=>=> RelationalSchema.Column>> employee.empid;
ClassDiagram.Attribut>> Policy.id:PolicyId =>=>=> RelationalSchema.Column>> policy.id;
ClassDiagram.Attribut>> Dependent.id:DependentId =>=>=> RelationalSchema.Column>> dependent.id;
ClassDiagram.Attribut>> Employee.empid:EmployeeId =>=>=> RelationalSchema.Column>> employee.empid;
ClassDiagram.Attribut>> Employer.name:String =>=>=> RelationalSchema.Column>> employer.name PRIMARY KEY;
ClassDiagram.Attribut>> Employer.GeneratedName:Employee =>=>=> RelationalSchema.Column>> employer.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> Person.ssn:String =>=>=> RelationalSchema.Column>> person.ssn PRIMARY KEY;
ClassDiagram.Attribut>> FinancialHistory.patient:Person =>=>=> RelationalSchema.Column>> financialhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> FinancialHistory.lastup:Date =>=>=> RelationalSchema.Column>> financialhistory.lastup;
ClassDiagram.Attribut>> Simple.ssn:String =>=>=> RelationalSchema.Column>> simple.ssn PRIMARY KEY;
ClassDiagram.Attribut>> Simple.name:String =>=>=> RelationalSchema.Column>> simple.name PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.patient:Person =>=>=> RelationalSchema.Column>> medicalhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.lastup:Date =>=>=> RelationalSchema.Column>> medicalhistory.lastup;
ClassDiagram.Attribut>> MedicalHistory.//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String =>=>=> RelationalSchema.Column>> medicalhistory.//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.lastup:Date =>=>=> RelationalSchema.Column>> medicalhistory.lastup;
ClassDiagram.Attribut>> Person.ssn:String =>=>=> RelationalSchema.Column>> person.ssn PRIMARY KEY;
ClassDiagram.Attribut>> FinancialHistory.//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String =>=>=> RelationalSchema.Column>> financialhistory.//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid PRIMARY KEY;
ClassDiagram.Attribut>> FinancialHistory.lastup:Date =>=>=> RelationalSchema.Column>> financialhistory.lastup;
ClassDiagram.Attribut>> MedicalHistory.//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId =>=>=> RelationalSchema.Column>> medicalhistory.//allattributesmaptorelationship:attributeoverridenotallowedid;
ClassDiagram.Attribut>> Person.id:PersonId =>=>=> RelationalSchema.Column>> person.id;
ClassDiagram.Attribut>> Person.id:PersonId =>=>=> RelationalSchema.Column>> person.id;
ClassDiagram.Attribut>> MedicalHistory.patient:Person =>=>=> RelationalSchema.Column>> medicalhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> Employee.id:long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> MedicalHistory.patient:Person =>=>=> RelationalSchema.Column>> medicalhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.xraydata:byte =>=>=> RelationalSchema.Column>> medicalhistory.xraydata;
ClassDiagram.Attribut>> Dependent.name:String =>=>=> RelationalSchema.Column>> dependent.name PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.emp:Employee =>=>=> RelationalSchema.Column>> dependent.emp PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empid:long =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> Dependent.name:String =>=>=> RelationalSchema.Column>> dependent.name PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.//idattributemappedbyjoincolumndefaultemp:Employee =>=>=> RelationalSchema.Column>> dependent.//idattributemappedbyjoincolumndefaultemp;
ClassDiagram.Attribut>> Employee.empid:long =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> Employee.nickname:String =>=>=> RelationalSchema.Column>> employee.nickname;
ClassDiagram.Attribut>> Item.query_by_category:String =>=>=> RelationalSchema.Column>> item.query_by_category;
ClassDiagram.Attribut>> Item.id:String =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Item.price:BigDecimal =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Item.description:String =>=>=> RelationalSchema.Column>> item.description;
ClassDiagram.Attribut>> Item.discount:BigDecimal =>=>=> RelationalSchema.Column>> item.discount;
ClassDiagram.Attribut>> Item.category:int =>=>=> RelationalSchema.Column>> item.category;
ClassDiagram.Attribut>> Item.version:int =>=>=> RelationalSchema.Column>> item.version;
ClassDiagram.Attribut>> Customer.query_all:String =>=>=> RelationalSchema.Column>> customer.query_all;
ClassDiagram.Attribut>> Customer.query_count:String =>=>=> RelationalSchema.Column>> customer.query_count;
ClassDiagram.Attribut>> Customer.query_by_credit:String =>=>=> RelationalSchema.Column>> customer.query_by_credit;
ClassDiagram.Attribut>> Customer.bad_credit:String =>=>=> RelationalSchema.Column>> customer.bad_credit;
ClassDiagram.Attribut>> Customer.id:int =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.firstname:String =>=>=> RelationalSchema.Column>> customer.firstname;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.contact:String =>=>=> RelationalSchema.Column>> customer.contact;
ClassDiagram.Attribut>> Customer.credit:String =>=>=> RelationalSchema.Column>> customer.credit;
ClassDiagram.Attribut>> Customer.creditlimit:BigDecimal =>=>=> RelationalSchema.Column>> customer.creditlimit;
ClassDiagram.Attribut>> Customer.since:Calendar =>=>=> RelationalSchema.Column>> customer.since;
ClassDiagram.Attribut>> Customer.balance:BigDecimal =>=>=> RelationalSchema.Column>> customer.balance;
ClassDiagram.Attribut>> Customer.ytdpayment:BigDecimal =>=>=> RelationalSchema.Column>> customer.ytdpayment;
ClassDiagram.Attribut>> Customer.version:int =>=>=> RelationalSchema.Column>> customer.version;
ClassDiagram.Attribut>> CustomerInventory.id:Integer =>=>=> RelationalSchema.Column>> customerinventory.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventory.GeneratedName:Customer =>=>=> RelationalSchema.Column>> customerinventory.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventory.totalcost:BigDecimal =>=>=> RelationalSchema.Column>> customerinventory.totalcost;
ClassDiagram.Attribut>> CustomerInventory.quantity:int =>=>=> RelationalSchema.Column>> customerinventory.quantity;
ClassDiagram.Attribut>> CustomerInventory.version:int =>=>=> RelationalSchema.Column>> customerinventory.version;
ClassDiagram.Attribut>> Item.query_by_category:String =>=>=> RelationalSchema.Column>> item.query_by_category;
ClassDiagram.Attribut>> Item.id:String =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Item.price:BigDecimal =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Item.description:String =>=>=> RelationalSchema.Column>> item.description;
ClassDiagram.Attribut>> Item.discount:BigDecimal =>=>=> RelationalSchema.Column>> item.discount;
ClassDiagram.Attribut>> Item.category:int =>=>=> RelationalSchema.Column>> item.category;
ClassDiagram.Attribut>> Item.version:int =>=>=> RelationalSchema.Column>> item.version;
ClassDiagram.Attribut>> Customer.query_all:String =>=>=> RelationalSchema.Column>> customer.query_all;
ClassDiagram.Attribut>> Customer.query_count:String =>=>=> RelationalSchema.Column>> customer.query_count;
ClassDiagram.Attribut>> Customer.query_by_credit:String =>=>=> RelationalSchema.Column>> customer.query_by_credit;
ClassDiagram.Attribut>> Customer.bad_credit:String =>=>=> RelationalSchema.Column>> customer.bad_credit;
ClassDiagram.Attribut>> Customer.id:int =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.firstname:String =>=>=> RelationalSchema.Column>> customer.firstname;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.contact:String =>=>=> RelationalSchema.Column>> customer.contact;
ClassDiagram.Attribut>> Customer.credit:String =>=>=> RelationalSchema.Column>> customer.credit;
ClassDiagram.Attribut>> Customer.creditlimit:BigDecimal =>=>=> RelationalSchema.Column>> customer.creditlimit;
ClassDiagram.Attribut>> Customer.since:Calendar =>=>=> RelationalSchema.Column>> customer.since;
ClassDiagram.Attribut>> Customer.balance:BigDecimal =>=>=> RelationalSchema.Column>> customer.balance;
ClassDiagram.Attribut>> Customer.ytdpayment:BigDecimal =>=>=> RelationalSchema.Column>> customer.ytdpayment;
ClassDiagram.Attribut>> Customer.version:int =>=>=> RelationalSchema.Column>> customer.version;
ClassDiagram.Attribut>> CustomerInventoryTwo.id:Integer =>=>=> RelationalSchema.Column>> customerinventorytwo.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventoryTwo.custid:int =>=>=> RelationalSchema.Column>> customerinventorytwo.custid PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventoryTwo.totalcost:BigDecimal =>=>=> RelationalSchema.Column>> customerinventorytwo.totalcost;
ClassDiagram.Attribut>> CustomerInventoryTwo.quantity:int =>=>=> RelationalSchema.Column>> customerinventorytwo.quantity;
ClassDiagram.Attribut>> CustomerInventoryTwo.version:int =>=>=> RelationalSchema.Column>> customerinventorytwo.version;
ClassDiagram.Attribut>> CustomerTwo.query_all:String =>=>=> RelationalSchema.Column>> customertwo.query_all;
ClassDiagram.Attribut>> CustomerTwo.query_count:String =>=>=> RelationalSchema.Column>> customertwo.query_count;
ClassDiagram.Attribut>> CustomerTwo.query_by_credit:String =>=>=> RelationalSchema.Column>> customertwo.query_by_credit;
ClassDiagram.Attribut>> CustomerTwo.bad_credit:String =>=>=> RelationalSchema.Column>> customertwo.bad_credit;
ClassDiagram.Attribut>> CustomerTwo.id:int =>=>=> RelationalSchema.Column>> customertwo.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerTwo.firstname:String =>=>=> RelationalSchema.Column>> customertwo.firstname;
ClassDiagram.Attribut>> CustomerTwo.lastname:String =>=>=> RelationalSchema.Column>> customertwo.lastname;
ClassDiagram.Attribut>> CustomerTwo.contact:String =>=>=> RelationalSchema.Column>> customertwo.contact;
ClassDiagram.Attribut>> CustomerTwo.credit:String =>=>=> RelationalSchema.Column>> customertwo.credit;
ClassDiagram.Attribut>> CustomerTwo.creditlimit:BigDecimal =>=>=> RelationalSchema.Column>> customertwo.creditlimit;
ClassDiagram.Attribut>> CustomerTwo.since:Calendar =>=>=> RelationalSchema.Column>> customertwo.since;
ClassDiagram.Attribut>> CustomerTwo.balance:BigDecimal =>=>=> RelationalSchema.Column>> customertwo.balance;
ClassDiagram.Attribut>> CustomerTwo.ytdpayment:BigDecimal =>=>=> RelationalSchema.Column>> customertwo.ytdpayment;
ClassDiagram.Attribut>> CustomerTwo.version:int =>=>=> RelationalSchema.Column>> customertwo.version;
ClassDiagram.Attribut>> CustomerInventory.id:Integer =>=>=> RelationalSchema.Column>> customerinventory.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventory.custid:int =>=>=> RelationalSchema.Column>> customerinventory.custid PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventory.totalcost:BigDecimal =>=>=> RelationalSchema.Column>> customerinventory.totalcost;
ClassDiagram.Attribut>> CustomerInventory.quantity:int =>=>=> RelationalSchema.Column>> customerinventory.quantity;
ClassDiagram.Attribut>> CustomerInventory.version:int =>=>=> RelationalSchema.Column>> customerinventory.version;
ClassDiagram.Attribut>> Employee.empid:long =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> ExclusiveDependent.id:DependentId =>=>=> RelationalSchema.Column>> exclusivedependent.id;
ClassDiagram.Attribut>> Dependent.id:DependentId =>=>=> RelationalSchema.Column>> dependent.id;
ClassDiagram.Attribut>> MedicalHistory.id:Integer =>=>=> RelationalSchema.Column>> medicalhistory.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId =>=>=> RelationalSchema.Column>> medicalhistory.//allattributesmaptorelationship:attributeoverridenotallowedid;
ClassDiagram.Attribut>> MedicalHistory.patient:Person =>=>=> RelationalSchema.Column>> medicalhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.//idattributemappedbyjoincolumndefaultid:DependentId =>=>=> RelationalSchema.Column>> dependent.//idattributemappedbyjoincolumndefaultid;
ClassDiagram.Attribut>> Person.ssn:String =>=>=> RelationalSchema.Column>> person.ssn PRIMARY KEY;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> PersonInfo.serialversionuid:long =>=>=> RelationalSchema.Column>> personinfo.serialversionuid;
ClassDiagram.Attribut>> PersonInfo.id:Person =>=>=> RelationalSchema.Column>> personinfo.id PRIMARY KEY;
ClassDiagram.Attribut>> PersonInfo.info:String =>=>=> RelationalSchema.Column>> personinfo.info;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Order =>=>=> RelationalSchema.Column>> orderline.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Product =>=>=> RelationalSchema.Column>> orderline.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> OrderLine.amount:Integer =>=>=> RelationalSchema.Column>> orderline.amount;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Bar.GeneratedName:Foo =>=>=> RelationalSchema.Column>> bar.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> Bar.details:String =>=>=> RelationalSchema.Column>> bar.details;
ClassDiagram.Attribut>> Foo.id:Long =>=>=> RelationalSchema.Column>> foo.id PRIMARY KEY;
ClassDiagram.Attribut>> Foo.name:String =>=>=> RelationalSchema.Column>> foo.name;
ClassDiagram.Attribut>> Dependent.emp:Employee =>=>=> RelationalSchema.Column>> dependent.emp PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.name:String =>=>=> RelationalSchema.Column>> dependent.name;
ClassDiagram.Attribut>> Employee.empid:long =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> Order.id:Long =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.name:String =>=>=> RelationalSchema.Column>> order.name;
ClassDiagram.Attribut>> Dependent.id:DependentId =>=>=> RelationalSchema.Column>> dependent.id;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Employee.lastname:String =>=>=> RelationalSchema.Column>> employee.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Employee.lastname:String =>=>=> RelationalSchema.Column>> employee.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.name:String =>=>=> RelationalSchema.Column>> dependent.name PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.emp:Employee =>=>=> RelationalSchema.Column>> dependent.emp PRIMARY KEY;
ClassDiagram.Attribut>> Plane.id:Long =>=>=> RelationalSchema.Column>> plane.id PRIMARY KEY;
ClassDiagram.Attribut>> Plane.nbrofseats:int =>=>=> RelationalSchema.Column>> plane.nbrofseats;
ClassDiagram.Attribut>> Machine.id:Integer =>=>=> RelationalSchema.Column>> machine.id PRIMARY KEY;
ClassDiagram.Attribut>> Machine.weight:Double =>=>=> RelationalSchema.Column>> machine.weight;
ClassDiagram.Attribut>> Component.manufacturerpartnumber:String =>=>=> RelationalSchema.Column>> component.manufacturerpartnumber;
ClassDiagram.Attribut>> Component.manufacturerid:Long =>=>=> RelationalSchema.Column>> component.manufacturerid;
ClassDiagram.Attribut>> Component.id:Long =>=>=> RelationalSchema.Column>> component.id PRIMARY KEY;
ClassDiagram.Attribut>> T800.targetname:String =>=>=> RelationalSchema.Column>> t800.targetname;
ClassDiagram.Attribut>> Robot.name:String =>=>=> RelationalSchema.Column>> robot.name;
ClassDiagram.Attribut>> AmericaCupClass.GeneratedName:Country =>=>=> RelationalSchema.Column>> americacupclass.GeneratedName;
ClassDiagram.Attribut>> Ticket.id:Long =>=>=> RelationalSchema.Column>> ticket.id PRIMARY KEY;
ClassDiagram.Attribut>> Ticket.number:String =>=>=> RelationalSchema.Column>> ticket.number;
ClassDiagram.Attribut>> Drawer.id:Long =>=>=> RelationalSchema.Column>> drawer.id PRIMARY KEY;
ClassDiagram.Attribut>> ExchangeOffice.id:Integer =>=>=> RelationalSchema.Column>> exchangeoffice.id PRIMARY KEY;
ClassDiagram.Attribut>> ExchangeOffice.exchangerates:Map<ExchangeRateKey,ExchangeRate> =>=>=> RelationalSchema.Column>> exchangeoffice.exchangerates;
ClassDiagram.Attribut>> ExchangeOffice.exchangeratefees:Map<ExchangeRateKey,BigDecimal> =>=>=> RelationalSchema.Column>> exchangeoffice.exchangeratefees;
ClassDiagram.Attribut>> Wardrobe.id:Long =>=>=> RelationalSchema.Column>> wardrobe.id PRIMARY KEY;
ClassDiagram.Attribut>> Atmosphere.id:Integer =>=>=> RelationalSchema.Column>> atmosphere.id PRIMARY KEY;
ClassDiagram.Attribut>> Atmosphere.colorperdate:Map<Date,String> =>=>=> RelationalSchema.Column>> atmosphere.colorperdate;
ClassDiagram.Attribut>> Atmosphere.colorperlevel:Map<Level,String> =>=>=> RelationalSchema.Column>> atmosphere.colorperlevel;
ClassDiagram.Attribut>> Atmosphere.composition:Map<Gas,Double> =>=>=> RelationalSchema.Column>> atmosphere.composition;
ClassDiagram.Attribut>> Newspaper.id:Integer =>=>=> RelationalSchema.Column>> newspaper.id PRIMARY KEY;
ClassDiagram.Attribut>> Newspaper.name:String =>=>=> RelationalSchema.Column>> newspaper.name;
ClassDiagram.Attribut>> Training.id:Long =>=>=> RelationalSchema.Column>> training.id PRIMARY KEY;
ClassDiagram.Attribut>> GenerationUser.id:int =>=>=> RelationalSchema.Column>> generationuser.id PRIMARY KEY;
ClassDiagram.Attribut>> PressReleaseAgency.id:Integer =>=>=> RelationalSchema.Column>> pressreleaseagency.id PRIMARY KEY;
ClassDiagram.Attribut>> PressReleaseAgency.name:String =>=>=> RelationalSchema.Column>> pressreleaseagency.name;
ClassDiagram.Attribut>> Gas.id:Integer =>=>=> RelationalSchema.Column>> gas.id PRIMARY KEY;
ClassDiagram.Attribut>> Gas.name:String =>=>=> RelationalSchema.Column>> gas.name;
ClassDiagram.Attribut>> GasKey.name:String =>=>=> RelationalSchema.Column>> gaskey.name PRIMARY KEY;
ClassDiagram.Attribut>> Dress.id:Integer =>=>=> RelationalSchema.Column>> dress.id PRIMARY KEY;
ClassDiagram.Attribut>> AddressEntry.person:AddressEntryPk =>=>=> RelationalSchema.Column>> addressentry.person;
ClassDiagram.Attribut>> AddressEntry.street:String =>=>=> RelationalSchema.Column>> addressentry.street;
ClassDiagram.Attribut>> AddressEntry.city:String =>=>=> RelationalSchema.Column>> addressentry.city;
ClassDiagram.Attribut>> Painting.sizex:int =>=>=> RelationalSchema.Column>> painting.sizex;
ClassDiagram.Attribut>> Painting.sizey:int =>=>=> RelationalSchema.Column>> painting.sizey;
ClassDiagram.Attribut>> Painting.name:String =>=>=> RelationalSchema.Column>> painting.name PRIMARY KEY;
ClassDiagram.Attribut>> Painting.painter:String =>=>=> RelationalSchema.Column>> painting.painter PRIMARY KEY;
ClassDiagram.Attribut>> AlphabeticalDirectory.id:Integer =>=>=> RelationalSchema.Column>> alphabeticaldirectory.id PRIMARY KEY;
ClassDiagram.Attribut>> AlphabeticalDirectory.name:String =>=>=> RelationalSchema.Column>> alphabeticaldirectory.name;
ClassDiagram.Attribut>> News.id:Integer =>=>=> RelationalSchema.Column>> news.id PRIMARY KEY;
ClassDiagram.Attribut>> News.title:String =>=>=> RelationalSchema.Column>> news.title;
ClassDiagram.Attribut>> News.detail:String =>=>=> RelationalSchema.Column>> news.detail;
ClassDiagram.Attribut>> ExchangeRate.id:Integer =>=>=> RelationalSchema.Column>> exchangerate.id PRIMARY KEY;
ClassDiagram.Attribut>> ExchangeRate.rate:double =>=>=> RelationalSchema.Column>> exchangerate.rate;
ClassDiagram.Attribut>> ExchangeRate.key:ExchangeRateKey =>=>=> RelationalSchema.Column>> exchangerate.key;
ClassDiagram.Attribut>> ExchangeRate.parent:ExchangeOffice =>=>=> RelationalSchema.Column>> exchangerate.parent;
ClassDiagram.Attribut>> Version.id:Integer =>=>=> RelationalSchema.Column>> version.id PRIMARY KEY;
ClassDiagram.Attribut>> Version.codename:String =>=>=> RelationalSchema.Column>> version.codename;
ClassDiagram.Attribut>> Version.number:String =>=>=> RelationalSchema.Column>> version.number;
ClassDiagram.Attribut>> Version.GeneratedName:Software =>=>=> RelationalSchema.Column>> version.GeneratedName;
ClassDiagram.Attribut>> Painter.id:Integer =>=>=> RelationalSchema.Column>> painter.id PRIMARY KEY;
ClassDiagram.Attribut>> AddressBook.id:Integer =>=>=> RelationalSchema.Column>> addressbook.id PRIMARY KEY;
ClassDiagram.Attribut>> AddressBook.owner:String =>=>=> RelationalSchema.Column>> addressbook.owner;
ClassDiagram.Attribut>> GenerationGroup.id:int =>=>=> RelationalSchema.Column>> generationgroup.id PRIMARY KEY;
ClassDiagram.Attribut>> GenerationGroup.GeneratedName:Generation =>=>=> RelationalSchema.Column>> generationgroup.GeneratedName;
ClassDiagram.Attribut>> Software.name:String =>=>=> RelationalSchema.Column>> software.name PRIMARY KEY;
ClassDiagram.Attribut>> Atmosphere.id:Integer =>=>=> RelationalSchema.Column>> atmosphere.id PRIMARY KEY;
ClassDiagram.Attribut>> Atmosphere.colorperdate:Map<Date,String> =>=>=> RelationalSchema.Column>> atmosphere.colorperdate;
ClassDiagram.Attribut>> Atmosphere.colorperlevel:Map<Level,String> =>=>=> RelationalSchema.Column>> atmosphere.colorperlevel;
ClassDiagram.Attribut>> Atmosphere.composition:Map<Gas,Double> =>=>=> RelationalSchema.Column>> atmosphere.composition;
ClassDiagram.Attribut>> Trainee.id:Long =>=>=> RelationalSchema.Column>> trainee.id PRIMARY KEY;
ClassDiagram.Attribut>> Trainee.name:String =>=>=> RelationalSchema.Column>> trainee.name;
ClassDiagram.Attribut>> Currency.id:Integer =>=>=> RelationalSchema.Column>> currency.id PRIMARY KEY;
ClassDiagram.Attribut>> Currency.currency:String =>=>=> RelationalSchema.Column>> currency.currency;
ClassDiagram.Attribut>> House.id:Long =>=>=> RelationalSchema.Column>> house.id PRIMARY KEY;
ClassDiagram.Attribut>> House.cost:Integer =>=>=> RelationalSchema.Column>> house.cost;
ClassDiagram.Attribut>> Room.id:Long =>=>=> RelationalSchema.Column>> room.id PRIMARY KEY;
ClassDiagram.Attribut>> Room.name:String =>=>=> RelationalSchema.Column>> room.name;
ClassDiagram.Attribut>> HighestBid.name:String =>=>=> RelationalSchema.Column>> highestbid.name PRIMARY KEY;
ClassDiagram.Attribut>> HighestBid.amount:double =>=>=> RelationalSchema.Column>> highestbid.amount;
ClassDiagram.Attribut>> Item.id:long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Bid.id:int =>=>=> RelationalSchema.Column>> bid.id PRIMARY KEY;
ClassDiagram.Attribut>> Bid.itemid:long =>=>=> RelationalSchema.Column>> bid.itemid;
ClassDiagram.Attribut>> Bid.amount:double =>=>=> RelationalSchema.Column>> bid.amount;
ClassDiagram.Attribut>> EntityEnum.id:long =>=>=> RelationalSchema.Column>> entityenum.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityEnum.ordinal:Common =>=>=> RelationalSchema.Column>> entityenum.ordinal;
ClassDiagram.Attribut>> EntityEnum.string:Common =>=>=> RelationalSchema.Column>> entityenum.string;
ClassDiagram.Attribut>> EntityEnum.GeneratedName:FirstLetter =>=>=> RelationalSchema.Column>> entityenum.GeneratedName;
ClassDiagram.Attribut>> EntityEnum.GeneratedName:LastNumber =>=>=> RelationalSchema.Column>> entityenum.GeneratedName;
ClassDiagram.Attribut>> EntityEnum.explicitoverridingimplicit:LastNumber =>=>=> RelationalSchema.Column>> entityenum.explicitoverridingimplicit;
ClassDiagram.Attribut>> EntityEnum.GeneratedName:Trimmed =>=>=> RelationalSchema.Column>> entityenum.GeneratedName;
ClassDiagram.Attribut>> EntityEnum.formula:Trimmed =>=>=> RelationalSchema.Column>> entityenum.formula;
ClassDiagram.Attribut>> EntityEnum.set:Set<Common> =>=>=> RelationalSchema.Column>> entityenum.set;
ClassDiagram.Attribut>> EntityMapEnum.id:int =>=>=> RelationalSchema.Column>> entitymapenum.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityMapEnum.ordinalmap:Map<Common,String> =>=>=> RelationalSchema.Column>> entitymapenum.ordinalmap;
ClassDiagram.Attribut>> EntityMapEnum.stringmap:Map<Common,String> =>=>=> RelationalSchema.Column>> entitymapenum.stringmap;
ClassDiagram.Attribut>> EntityMapEnum.firstlettermap:Map<FirstLetter,String> =>=>=> RelationalSchema.Column>> entitymapenum.firstlettermap;
ClassDiagram.Attribut>> EntityMapEnum.lastnumbermap:Map<LastNumber,String> =>=>=> RelationalSchema.Column>> entitymapenum.lastnumbermap;
ClassDiagram.Attribut>> EntityMapEnum.explicitoverridingimplicitmap:Map<LastNumber,String> =>=>=> RelationalSchema.Column>> entitymapenum.explicitoverridingimplicitmap;
ClassDiagram.Attribut>> User.id:java.lang.String =>=>=> RelationalSchema.Column>> user.id;
ClassDiagram.Attribut>> SocialNetworkProfile.id:java.lang.String =>=>=> RelationalSchema.Column>> socialnetworkprofile.id;
ClassDiagram.Attribut>> SocialNetworkProfile.type:SocialNetwork =>=>=> RelationalSchema.Column>> socialnetworkprofile.type;
ClassDiagram.Attribut>> SocialNetworkProfile.networkid:String =>=>=> RelationalSchema.Column>> socialnetworkprofile.networkid;
ClassDiagram.Attribut>> Ferry.sea:String =>=>=> RelationalSchema.Column>> ferry.sea;
ClassDiagram.Attribut>> Company.serialversionuid:long =>=>=> RelationalSchema.Column>> company.serialversionuid;
ClassDiagram.Attribut>> Company.id:int =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.GeneratedName:Person =>=>=> RelationalSchema.Column>> company.GeneratedName;
ClassDiagram.Attribut>> Menu.serialversionuid:long =>=>=> RelationalSchema.Column>> menu.serialversionuid;
ClassDiagram.Attribut>> Menu.id:Integer =>=>=> RelationalSchema.Column>> menu.id PRIMARY KEY;
ClassDiagram.Attribut>> Menu.ordernbr:String =>=>=> RelationalSchema.Column>> menu.ordernbr;
ClassDiagram.Attribut>> Menu.isdefault:String =>=>=> RelationalSchema.Column>> menu.isdefault;
ClassDiagram.Attribut>> Contract.contractnumber:String =>=>=> RelationalSchema.Column>> contract.contractnumber;
ClassDiagram.Attribut>> Contract.//integercompanycodeid:ContractId =>=>=> RelationalSchema.Column>> contract.//integercompanycodeid;
ClassDiagram.Attribut>> Contract.GeneratedName:Manufacturer =>=>=> RelationalSchema.Column>> contract.GeneratedName;
ClassDiagram.Attribut>> Contract.GeneratedName:Model =>=>=> RelationalSchema.Column>> contract.GeneratedName;
ClassDiagram.Attribut>> Message.serialversionuid:long =>=>=> RelationalSchema.Column>> message.serialversionuid;
ClassDiagram.Attribut>> Message.id:int =>=>=> RelationalSchema.Column>> message.id PRIMARY KEY;
ClassDiagram.Attribut>> Message.languagecode:String =>=>=> RelationalSchema.Column>> message.languagecode;
ClassDiagram.Attribut>> Message.languagename:String =>=>=> RelationalSchema.Column>> message.languagename;
ClassDiagram.Attribut>> Message.GeneratedName:Language =>=>=> RelationalSchema.Column>> message.GeneratedName;
ClassDiagram.Attribut>> ProductSqlServer.serialversionuid:long =>=>=> RelationalSchema.Column>> productsqlserver.serialversionuid;
ClassDiagram.Attribut>> ProductSqlServer.id:Integer =>=>=> RelationalSchema.Column>> productsqlserver.id PRIMARY KEY;
ClassDiagram.Attribut>> ProductSqlServer.productidnf:String =>=>=> RelationalSchema.Column>> productsqlserver.productidnf;
ClassDiagram.Attribut>> ProductSqlServer.description:String =>=>=> RelationalSchema.Column>> productsqlserver.description;
ClassDiagram.Attribut>> Product.serialversionuid:long =>=>=> RelationalSchema.Column>> product.serialversionuid;
ClassDiagram.Attribut>> Product.id:Integer =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.productidnf:String =>=>=> RelationalSchema.Column>> product.productidnf;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> Model.id:ModelId =>=>=> RelationalSchema.Column>> model.id PRIMARY KEY;
ClassDiagram.Attribut>> Model.name:String =>=>=> RelationalSchema.Column>> model.name;
ClassDiagram.Attribut>> Manufacturer.id:ManufacturerId =>=>=> RelationalSchema.Column>> manufacturer.id PRIMARY KEY;
ClassDiagram.Attribut>> Manufacturer.name:String =>=>=> RelationalSchema.Column>> manufacturer.name;
ClassDiagram.Attribut>> FoodItem.id:Integer =>=>=> RelationalSchema.Column>> fooditem.id PRIMARY KEY;
ClassDiagram.Attribut>> FoodItem.item:String =>=>=> RelationalSchema.Column>> fooditem.item;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.id:int =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.companyid:int =>=>=> RelationalSchema.Column>> person.companyid;
ClassDiagram.Attribut>> Person.defaultflag:String =>=>=> RelationalSchema.Column>> person.defaultflag;
ClassDiagram.Attribut>> Language.serialversionuid:long =>=>=> RelationalSchema.Column>> language.serialversionuid;
ClassDiagram.Attribut>> Language.name:String =>=>=> RelationalSchema.Column>> language.name;
ClassDiagram.Attribut>> Language.code:String =>=>=> RelationalSchema.Column>> language.code PRIMARY KEY;
ClassDiagram.Attribut>> KnownClient.id:Integer =>=>=> RelationalSchema.Column>> knownclient.id PRIMARY KEY;
ClassDiagram.Attribut>> KnownClient.name:String =>=>=> RelationalSchema.Column>> knownclient.name;
ClassDiagram.Attribut>> Supplier.id:Integer =>=>=> RelationalSchema.Column>> supplier.id PRIMARY KEY;
ClassDiagram.Attribut>> Supplier.name:String =>=>=> RelationalSchema.Column>> supplier.name;
ClassDiagram.Attribut>> Cat.id:CatPk =>=>=> RelationalSchema.Column>> cat.id;
ClassDiagram.Attribut>> Cat.age:int =>=>=> RelationalSchema.Column>> cat.age;
ClassDiagram.Attribut>> ProgramManager.id:int =>=>=> RelationalSchema.Column>> programmanager.id PRIMARY KEY;
ClassDiagram.Attribut>> Woman.id:WomanPk =>=>=> RelationalSchema.Column>> woman.id PRIMARY KEY;
ClassDiagram.Attribut>> Woman.carname:String =>=>=> RelationalSchema.Column>> woman.carname;
ClassDiagram.Attribut>> Employer.id:Integer =>=>=> RelationalSchema.Column>> employer.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.id:Integer =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.name:String =>=>=> RelationalSchema.Column>> store.name;
ClassDiagram.Attribut>> Man.id:ManPk =>=>=> RelationalSchema.Column>> man.id PRIMARY KEY;
ClassDiagram.Attribut>> Man.carname:String =>=>=> RelationalSchema.Column>> man.carname;
ClassDiagram.Attribut>> Employee.id:Integer =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.GeneratedName:ContactInfo =>=>=> RelationalSchema.Column>> employee.GeneratedName;
ClassDiagram.Attribut>> Store.id:Integer =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.name:String =>=>=> RelationalSchema.Column>> store.name;
ClassDiagram.Attribut>> Item.id:Integer =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> PhoneNumber.phnumber:int =>=>=> RelationalSchema.Column>> phonenumber.phnumber PRIMARY KEY;
ClassDiagram.Attribut>> Category.id:Integer =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> City.id:Integer =>=>=> RelationalSchema.Column>> city.id PRIMARY KEY;
ClassDiagram.Attribut>> City.name:String =>=>=> RelationalSchema.Column>> city.name;
ClassDiagram.Attribut>> KnownClient.id:Integer =>=>=> RelationalSchema.Column>> knownclient.id PRIMARY KEY;
ClassDiagram.Attribut>> KnownClient.name:String =>=>=> RelationalSchema.Column>> knownclient.name;
ClassDiagram.Attribut>> BuildingCompany.id:Long =>=>=> RelationalSchema.Column>> buildingcompany.id PRIMARY KEY;
ClassDiagram.Attribut>> BuildingCompany.foundedin:Date =>=>=> RelationalSchema.Column>> buildingcompany.foundedin;
ClassDiagram.Attribut>> Inspector._id:Long =>=>=> RelationalSchema.Column>> inspector._id PRIMARY KEY;
ClassDiagram.Attribut>> Inspector.name:String =>=>=> RelationalSchema.Column>> inspector.name;
ClassDiagram.Attribut>> Employee.id:Integer =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.GeneratedName:ContactInfo =>=>=> RelationalSchema.Column>> employee.GeneratedName;
ClassDiagram.Attribut>> Employee.GeneratedName:JobInfo =>=>=> RelationalSchema.Column>> employee.GeneratedName;
ClassDiagram.Attribut>> Building.id:Long =>=>=> RelationalSchema.Column>> building.id PRIMARY KEY;
ClassDiagram.Attribut>> PhoneNumber.phnumber:int =>=>=> RelationalSchema.Column>> phonenumber.phnumber PRIMARY KEY;
ClassDiagram.Attribut>> GroupWithSet.id:Integer =>=>=> RelationalSchema.Column>> groupwithset.id PRIMARY KEY;
ClassDiagram.Attribut>> Friend.id:Integer =>=>=> RelationalSchema.Column>> friend.id PRIMARY KEY;
ClassDiagram.Attribut>> Friend.name:String =>=>=> RelationalSchema.Column>> friend.name;
ClassDiagram.Attribut>> City.id:Integer =>=>=> RelationalSchema.Column>> city.id PRIMARY KEY;
ClassDiagram.Attribut>> City.name:String =>=>=> RelationalSchema.Column>> city.name;
ClassDiagram.Attribut>> Permission.permission:String =>=>=> RelationalSchema.Column>> permission.permission PRIMARY KEY;
ClassDiagram.Attribut>> Permission.expiration:Date =>=>=> RelationalSchema.Column>> permission.expiration;
ClassDiagram.Attribut>> InspectorPrefixes.prefixes:String =>=>=> RelationalSchema.Column>> inspectorprefixes.prefixes;
ClassDiagram.Attribut>> Group.id:Integer =>=>=> RelationalSchema.Column>> group.id PRIMARY KEY;
ClassDiagram.Attribut>> Zone.id:Integer =>=>=> RelationalSchema.Column>> zone.id PRIMARY KEY;
ClassDiagram.Attribut>> Contractor.hourlyrate:float =>=>=> RelationalSchema.Column>> contractor.hourlyrate;
ClassDiagram.Attribut>> MinMax.id:Long =>=>=> RelationalSchema.Column>> minmax.id PRIMARY KEY;
ClassDiagram.Attribut>> MinMax.value:Integer =>=>=> RelationalSchema.Column>> minmax.value;
ClassDiagram.Attribut>> Rock.bit:Integer =>=>=> RelationalSchema.Column>> rock.bit;
ClassDiagram.Attribut>> Screen.id:Integer =>=>=> RelationalSchema.Column>> screen.id PRIMARY KEY;
ClassDiagram.Attribut>> Screen.stop:Button =>=>=> RelationalSchema.Column>> screen.stop;
ClassDiagram.Attribut>> Screen.GeneratedName:PowerSupply =>=>=> RelationalSchema.Column>> screen.GeneratedName;
ClassDiagram.Attribut>> Screen.connectors:Set<DisplayConnector> =>=>=> RelationalSchema.Column>> screen.connectors;
ClassDiagram.Attribut>> Color.id:Integer =>=>=> RelationalSchema.Column>> color.id PRIMARY KEY;
ClassDiagram.Attribut>> Color.name:String =>=>=> RelationalSchema.Column>> color.name;
ClassDiagram.Attribut>> Display.id:Integer =>=>=> RelationalSchema.Column>> display.id PRIMARY KEY;
ClassDiagram.Attribut>> Display.brand:String =>=>=> RelationalSchema.Column>> display.brand;
ClassDiagram.Attribut>> Address.blacklistedzipcode:String =>=>=> RelationalSchema.Column>> address.blacklistedzipcode;
ClassDiagram.Attribut>> Address.line1:String =>=>=> RelationalSchema.Column>> address.line1;
ClassDiagram.Attribut>> Address.line2:String =>=>=> RelationalSchema.Column>> address.line2;
ClassDiagram.Attribut>> Address.zip:String =>=>=> RelationalSchema.Column>> address.zip;
ClassDiagram.Attribut>> Address.state:String =>=>=> RelationalSchema.Column>> address.state;
ClassDiagram.Attribut>> Address.country:String =>=>=> RelationalSchema.Column>> address.country;
ClassDiagram.Attribut>> Address.id:long =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.internalvalid:boolean =>=>=> RelationalSchema.Column>> address.internalvalid;
ClassDiagram.Attribut>> Address.floor:int =>=>=> RelationalSchema.Column>> address.floor;
ClassDiagram.Attribut>> Music.name:String =>=>=> RelationalSchema.Column>> music.name PRIMARY KEY;
ClassDiagram.Attribut>> CupHolder.id:Integer =>=>=> RelationalSchema.Column>> cupholder.id PRIMARY KEY;
ClassDiagram.Attribut>> CupHolder.radius:BigDecimal =>=>=> RelationalSchema.Column>> cupholder.radius;
ClassDiagram.Attribut>> Range.id:Long =>=>=> RelationalSchema.Column>> range.id PRIMARY KEY;
ClassDiagram.Attribut>> Range.value:Integer =>=>=> RelationalSchema.Column>> range.value;
ClassDiagram.Attribut>> TvOwner.id:Integer =>=>=> RelationalSchema.Column>> tvowner.id PRIMARY KEY;
ClassDiagram.Attribut>> PowerSupply.id:Integer =>=>=> RelationalSchema.Column>> powersupply.id PRIMARY KEY;
ClassDiagram.Attribut>> PowerSupply.power:BigDecimal =>=>=> RelationalSchema.Column>> powersupply.power;
ClassDiagram.Attribut>> PowerSupply.position:String =>=>=> RelationalSchema.Column>> powersupply.position;
ClassDiagram.Attribut>> Tv.serial:String =>=>=> RelationalSchema.Column>> tv.serial PRIMARY KEY;
ClassDiagram.Attribut>> Tv.model:String =>=>=> RelationalSchema.Column>> tv.model;
ClassDiagram.Attribut>> Tv.size:int =>=>=> RelationalSchema.Column>> tv.size;
ClassDiagram.Attribut>> Tv.name:String =>=>=> RelationalSchema.Column>> tv.name;
ClassDiagram.Attribut>> Tv.exp:Date =>=>=> RelationalSchema.Column>> tv.exp;
ClassDiagram.Attribut>> Tv.description:String =>=>=> RelationalSchema.Column>> tv.description;
ClassDiagram.Attribut>> Tv.lifetime:BigInteger =>=>=> RelationalSchema.Column>> tv.lifetime;
ClassDiagram.Attribut>> Tv.GeneratedName:Tuner =>=>=> RelationalSchema.Column>> tv.GeneratedName;
ClassDiagram.Attribut>> Tv.GeneratedName:Recorder =>=>=> RelationalSchema.Column>> tv.GeneratedName;
ClassDiagram.Attribut>> Importer.id:long =>=>=> RelationalSchema.Column>> importer.id PRIMARY KEY;
ClassDiagram.Attribut>> Importer.name:String =>=>=> RelationalSchema.Column>> importer.name;
ClassDiagram.Attribut>> Car.id:long =>=>=> RelationalSchema.Column>> car.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.brand:String =>=>=> RelationalSchema.Column>> car.brand;
ClassDiagram.Attribut>> Car.producer:String =>=>=> RelationalSchema.Column>> car.producer;
ClassDiagram.Attribut>> Car.since:long =>=>=> RelationalSchema.Column>> car.since;
ClassDiagram.Attribut>> Car.GeneratedName:Dealer =>=>=> RelationalSchema.Column>> car.GeneratedName;
ClassDiagram.Attribut>> Car.otherdealers:Set<Dealer> =>=>=> RelationalSchema.Column>> car.otherdealers;
ClassDiagram.Attribut>> Coin.id:Integer =>=>=> RelationalSchema.Column>> coin.id PRIMARY KEY;
ClassDiagram.Attribut>> Coin.name:String =>=>=> RelationalSchema.Column>> coin.name;
ClassDiagram.Attribut>> Coin.GeneratedName:Currency =>=>=> RelationalSchema.Column>> coin.GeneratedName;
ClassDiagram.Attribut>> Currency.id:Integer =>=>=> RelationalSchema.Column>> currency.id PRIMARY KEY;
ClassDiagram.Attribut>> Currency.name:String =>=>=> RelationalSchema.Column>> currency.name;
ClassDiagram.Attribut>> Voice.id:Integer =>=>=> RelationalSchema.Column>> voice.id PRIMARY KEY;
ClassDiagram.Attribut>> GSM.frequency:int =>=>=> RelationalSchema.Column>> gsm.frequency;
ClassDiagram.Attribut>> Comment.id:Long =>=>=> RelationalSchema.Column>> comment.id PRIMARY KEY;
ClassDiagram.Attribut>> Comment.GeneratedName:Post =>=>=> RelationalSchema.Column>> comment.GeneratedName;
ClassDiagram.Attribut>> Comment.name:String =>=>=> RelationalSchema.Column>> comment.name;
ClassDiagram.Attribut>> Comment.GeneratedName:Forum =>=>=> RelationalSchema.Column>> comment.GeneratedName;
ClassDiagram.Attribut>> Tiger.id:Integer =>=>=> RelationalSchema.Column>> tiger.id PRIMARY KEY;
ClassDiagram.Attribut>> Tiger.name:String =>=>=> RelationalSchema.Column>> tiger.name;
ClassDiagram.Attribut>> C.id:Long =>=>=> RelationalSchema.Column>> c.id PRIMARY KEY;
ClassDiagram.Attribut>> C.name:String =>=>=> RelationalSchema.Column>> c.name;
ClassDiagram.Attribut>> OrderItem.schoolid:String =>=>=> RelationalSchema.Column>> orderitem.schoolid PRIMARY KEY;
ClassDiagram.Attribut>> OrderItem.academicyear:Integer =>=>=> RelationalSchema.Column>> orderitem.academicyear PRIMARY KEY;
ClassDiagram.Attribut>> OrderItem.dayno:Integer =>=>=> RelationalSchema.Column>> orderitem.dayno PRIMARY KEY;
ClassDiagram.Attribut>> OrderItem.dayname:String =>=>=> RelationalSchema.Column>> orderitem.dayname;
ClassDiagram.Attribut>> OrderItem.GeneratedName:Order =>=>=> RelationalSchema.Column>> orderitem.GeneratedName;
ClassDiagram.Attribut>> Employee.id:Integer =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Box.id:int =>=>=> RelationalSchema.Column>> box.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.id:ParentPk =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.age:int =>=>=> RelationalSchema.Column>> parent.age;
ClassDiagram.Attribut>> Organisation.idorganisation:Long =>=>=> RelationalSchema.Column>> organisation.idorganisation PRIMARY KEY;
ClassDiagram.Attribut>> Organisation.name:String =>=>=> RelationalSchema.Column>> organisation.name;
ClassDiagram.Attribut>> Asset.idasset:Integer =>=>=> RelationalSchema.Column>> asset.idasset PRIMARY KEY;
ClassDiagram.Attribut>> Asset.test:Integer =>=>=> RelationalSchema.Column>> asset.test PRIMARY KEY;
ClassDiagram.Attribut>> Visitor.id:Long =>=>=> RelationalSchema.Column>> visitor.id PRIMARY KEY;
ClassDiagram.Attribut>> Visitor.firstname:String =>=>=> RelationalSchema.Column>> visitor.firstname;
ClassDiagram.Attribut>> Visitor.lastname:String =>=>=> RelationalSchema.Column>> visitor.lastname;
ClassDiagram.Attribut>> Soldier.id:Integer =>=>=> RelationalSchema.Column>> soldier.id PRIMARY KEY;
ClassDiagram.Attribut>> Soldier.name:String =>=>=> RelationalSchema.Column>> soldier.name;
ClassDiagram.Attribut>> Soldier.GeneratedName:Troop =>=>=> RelationalSchema.Column>> soldier.GeneratedName;
ClassDiagram.Attribut>> Street.id:Integer =>=>=> RelationalSchema.Column>> street.id PRIMARY KEY;
ClassDiagram.Attribut>> Street.streetname:String =>=>=> RelationalSchema.Column>> street.streetname;
ClassDiagram.Attribut>> Street.streetnamecopy:String =>=>=> RelationalSchema.Column>> street.streetnamecopy;
ClassDiagram.Attribut>> Street.GeneratedName:City =>=>=> RelationalSchema.Column>> street.GeneratedName;
ClassDiagram.Attribut>> Troop.id:Integer =>=>=> RelationalSchema.Column>> troop.id PRIMARY KEY;
ClassDiagram.Attribut>> Troop.name:String =>=>=> RelationalSchema.Column>> troop.name;
ClassDiagram.Attribut>> BankAccount.id:long =>=>=> RelationalSchema.Column>> bankaccount.id PRIMARY KEY;
ClassDiagram.Attribut>> Computer.computername:String =>=>=> RelationalSchema.Column>> computer.computername;
ClassDiagram.Attribut>> City.id:Integer =>=>=> RelationalSchema.Column>> city.id PRIMARY KEY;
ClassDiagram.Attribut>> City.name:String =>=>=> RelationalSchema.Column>> city.name;
ClassDiagram.Attribut>> Forum.id:Long =>=>=> RelationalSchema.Column>> forum.id PRIMARY KEY;
ClassDiagram.Attribut>> Forum.name:String =>=>=> RelationalSchema.Column>> forum.name;
ClassDiagram.Attribut>> B.id:Long =>=>=> RelationalSchema.Column>> b.id PRIMARY KEY;
ClassDiagram.Attribut>> B.name:String =>=>=> RelationalSchema.Column>> b.name;
ClassDiagram.Attribut>> Trainer.id:Integer =>=>=> RelationalSchema.Column>> trainer.id PRIMARY KEY;
ClassDiagram.Attribut>> Trainer.name:String =>=>=> RelationalSchema.Column>> trainer.name;
ClassDiagram.Attribut>> Person.idperson:Long =>=>=> RelationalSchema.Column>> person.idperson PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname,lastname:String =>=>=> RelationalSchema.Column>> person.firstname,lastname;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.GeneratedName:Forum =>=>=> RelationalSchema.Column>> user.GeneratedName;
ClassDiagram.Attribut>> Model.id:Integer =>=>=> RelationalSchema.Column>> model.id PRIMARY KEY;
ClassDiagram.Attribut>> Politician.name:String =>=>=> RelationalSchema.Column>> politician.name PRIMARY KEY;
ClassDiagram.Attribut>> PoliticalParty.name:String =>=>=> RelationalSchema.Column>> politicalparty.name PRIMARY KEY;
ClassDiagram.Attribut>> Zoo.id:Long =>=>=> RelationalSchema.Column>> zoo.id PRIMARY KEY;
ClassDiagram.Attribut>> Zoo.name:String =>=>=> RelationalSchema.Column>> zoo.name;
ClassDiagram.Attribut>> A.id:Long =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.name:String =>=>=> RelationalSchema.Column>> a.name;
ClassDiagram.Attribut>> Child.id:Integer =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.favoritesuperhero:String =>=>=> RelationalSchema.Column>> child.favoritesuperhero;
ClassDiagram.Attribut>> Child.favoritesinger:String =>=>=> RelationalSchema.Column>> child.favoritesinger;
ClassDiagram.Attribut>> OrganisationUser.sometext:String =>=>=> RelationalSchema.Column>> organisationuser.sometext;
ClassDiagram.Attribut>> OrganisationUser.GeneratedName:Organisation =>=>=> RelationalSchema.Column>> organisationuser.GeneratedName;
ClassDiagram.Attribut>> Transaction.id:long =>=>=> RelationalSchema.Column>> transaction.id PRIMARY KEY;
ClassDiagram.Attribut>> Transaction.code:String =>=>=> RelationalSchema.Column>> transaction.code;
ClassDiagram.Attribut>> Order.schoolid:String =>=>=> RelationalSchema.Column>> order.schoolid PRIMARY KEY;
ClassDiagram.Attribut>> Order.schoolidsort:Integer =>=>=> RelationalSchema.Column>> order.schoolidsort;
ClassDiagram.Attribut>> Order.academicyear:Integer =>=>=> RelationalSchema.Column>> order.academicyear PRIMARY KEY;
ClassDiagram.Attribut>> Item.id:int =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.code:String =>=>=> RelationalSchema.Column>> item.code;
ClassDiagram.Attribut>> Item.sortfield:int =>=>=> RelationalSchema.Column>> item.sortfield;
ClassDiagram.Attribut>> Monkey.id:Integer =>=>=> RelationalSchema.Column>> monkey.id PRIMARY KEY;
ClassDiagram.Attribut>> Monkey.name:String =>=>=> RelationalSchema.Column>> monkey.name;
ClassDiagram.Attribut>> MarketRegion.id:long =>=>=> RelationalSchema.Column>> marketregion.id PRIMARY KEY;
ClassDiagram.Attribut>> MarketRegion.regioncode:String =>=>=> RelationalSchema.Column>> marketregion.regioncode;
ClassDiagram.Attribut>> Car.id:long =>=>=> RelationalSchema.Column>> car.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.model:String =>=>=> RelationalSchema.Column>> car.model;
ClassDiagram.Attribut>> House.id:Integer =>=>=> RelationalSchema.Column>> house.id PRIMARY KEY;
ClassDiagram.Attribut>> House.address:String =>=>=> RelationalSchema.Column>> house.address;
ClassDiagram.Attribut>> House.GeneratedName:Postman =>=>=> RelationalSchema.Column>> house.GeneratedName;
ClassDiagram.Attribut>> Item.id:int =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Luggage.id:Integer =>=>=> RelationalSchema.Column>> luggage.id PRIMARY KEY;
ClassDiagram.Attribut>> Luggage.owner:String =>=>=> RelationalSchema.Column>> luggage.owner;
ClassDiagram.Attribut>> Luggage.type:String =>=>=> RelationalSchema.Column>> luggage.type;
ClassDiagram.Attribut>> Rambler.id:Integer =>=>=> RelationalSchema.Column>> rambler.id PRIMARY KEY;
ClassDiagram.Attribut>> Rambler.name:String =>=>=> RelationalSchema.Column>> rambler.name;
ClassDiagram.Attribut>> Clothes.id:Integer =>=>=> RelationalSchema.Column>> clothes.id PRIMARY KEY;
ClassDiagram.Attribut>> Clothes.type:String =>=>=> RelationalSchema.Column>> clothes.type;
ClassDiagram.Attribut>> Clothes.flavor:String =>=>=> RelationalSchema.Column>> clothes.flavor;
ClassDiagram.Attribut>> HousePlaces.id:int =>=>=> RelationalSchema.Column>> houseplaces.id PRIMARY KEY;
ClassDiagram.Attribut>> HousePlaces.GeneratedName:Places =>=>=> RelationalSchema.Column>> houseplaces.GeneratedName;
ClassDiagram.Attribut>> HousePlaces.neighbour:Places =>=>=> RelationalSchema.Column>> houseplaces.neighbour;
ClassDiagram.Attribut>> Inhabitant.id:Integer =>=>=> RelationalSchema.Column>> inhabitant.id PRIMARY KEY;
ClassDiagram.Attribut>> Inhabitant.name:String =>=>=> RelationalSchema.Column>> inhabitant.name;
ClassDiagram.Attribut>> Place.id:int =>=>=> RelationalSchema.Column>> place.id PRIMARY KEY;
ClassDiagram.Attribut>> Place.name:String =>=>=> RelationalSchema.Column>> place.name;
ClassDiagram.Attribut>> Place.owner:String =>=>=> RelationalSchema.Column>> place.owner;
ClassDiagram.Attribut>> Postman.name:String =>=>=> RelationalSchema.Column>> postman.name;
ClassDiagram.Attribut>> Postman.id:String =>=>=> RelationalSchema.Column>> postman.id PRIMARY KEY;
ClassDiagram.Attribut>> ItemCost.id:int =>=>=> RelationalSchema.Column>> itemcost.id PRIMARY KEY;
ClassDiagram.Attribut>> ItemCost.GeneratedName:Item =>=>=> RelationalSchema.Column>> itemcost.GeneratedName;
ClassDiagram.Attribut>> ItemCost.GeneratedName:Vendor =>=>=> RelationalSchema.Column>> itemcost.GeneratedName;
ClassDiagram.Attribut>> ItemCost.cost:BigDecimal =>=>=> RelationalSchema.Column>> itemcost.cost;
ClassDiagram.Attribut>> Vendor.id:int =>=>=> RelationalSchema.Column>> vendor.id PRIMARY KEY;
ClassDiagram.Attribut>> Bag.id:Integer =>=>=> RelationalSchema.Column>> bag.id PRIMARY KEY;
ClassDiagram.Attribut>> Bag.serial:String =>=>=> RelationalSchema.Column>> bag.serial;
ClassDiagram.Attribut>> WarehouseItem.id:int =>=>=> RelationalSchema.Column>> warehouseitem.id PRIMARY KEY;
ClassDiagram.Attribut>> WarehouseItem.GeneratedName:Item =>=>=> RelationalSchema.Column>> warehouseitem.GeneratedName;
ClassDiagram.Attribut>> WarehouseItem.GeneratedName:Vendor =>=>=> RelationalSchema.Column>> warehouseitem.GeneratedName;
ClassDiagram.Attribut>> WarehouseItem.qtyinstock:BigDecimal =>=>=> RelationalSchema.Column>> warehouseitem.qtyinstock;
ClassDiagram.Attribut>> Customer4.id:long =>=>=> RelationalSchema.Column>> customer4.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer4.name:String =>=>=> RelationalSchema.Column>> customer4.name;
ClassDiagram.Attribut>> Customer4.customernumber:long =>=>=> RelationalSchema.Column>> customer4.customernumber;
ClassDiagram.Attribut>> Customer5.id:long =>=>=> RelationalSchema.Column>> customer5.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer5.name:String =>=>=> RelationalSchema.Column>> customer5.name;
ClassDiagram.Attribut>> Customer5.customernumber:long =>=>=> RelationalSchema.Column>> customer5.customernumber;
ClassDiagram.Attribut>> SupportTickets.id:long =>=>=> RelationalSchema.Column>> supporttickets.id PRIMARY KEY;
ClassDiagram.Attribut>> SupportTickets.description:String =>=>=> RelationalSchema.Column>> supporttickets.description;
ClassDiagram.Attribut>> SupportTickets.resolution:String =>=>=> RelationalSchema.Column>> supporttickets.resolution;
ClassDiagram.Attribut>> Order.id:long =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.ordernumber:long =>=>=> RelationalSchema.Column>> order.ordernumber;
ClassDiagram.Attribut>> Order.delivery:Date =>=>=> RelationalSchema.Column>> order.delivery;
ClassDiagram.Attribut>> Customer3.id:long =>=>=> RelationalSchema.Column>> customer3.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer3.name:String =>=>=> RelationalSchema.Column>> customer3.name;
ClassDiagram.Attribut>> Customer3.customernumber:long =>=>=> RelationalSchema.Column>> customer3.customernumber;
ClassDiagram.Attribut>> Customer.id:long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.customernumber:long =>=>=> RelationalSchema.Column>> customer.customernumber;
ClassDiagram.Attribut>> Customer2.id:long =>=>=> RelationalSchema.Column>> customer2.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer2.name:String =>=>=> RelationalSchema.Column>> customer2.name;
ClassDiagram.Attribut>> Customer2.customernumber:long =>=>=> RelationalSchema.Column>> customer2.customernumber;
ClassDiagram.Attribut>> Country.id:Integer =>=>=> RelationalSchema.Column>> country.id PRIMARY KEY;
ClassDiagram.Attribut>> Country.name:String =>=>=> RelationalSchema.Column>> country.name;
ClassDiagram.Attribut>> Flight.id:Long =>=>=> RelationalSchema.Column>> flight.id PRIMARY KEY;
ClassDiagram.Attribut>> Flight.name:String =>=>=> RelationalSchema.Column>> flight.name;
ClassDiagram.Attribut>> Flight.transientduration:Long =>=>=> RelationalSchema.Column>> flight.transientduration;
ClassDiagram.Attribut>> Flight.durationinsec:long =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Flight.version:Integer =>=>=> RelationalSchema.Column>> flight.version;
ClassDiagram.Attribut>> Flight.GeneratedName:Company =>=>=> RelationalSchema.Column>> flight.GeneratedName;
ClassDiagram.Attribut>> Flight.triggereddata:String =>=>=> RelationalSchema.Column>> flight.triggereddata;
ClassDiagram.Attribut>> Flight.factor:long =>=>=> RelationalSchema.Column>> flight.factor;
ClassDiagram.Attribut>> Flight.departure:Date =>=>=> RelationalSchema.Column>> flight.departure;
ClassDiagram.Attribut>> Flight.buydate:java.sql.Timestamp =>=>=> RelationalSchema.Column>> flight.buydate;
ClassDiagram.Attribut>> Flight.alternativedeparturedate:Calendar =>=>=> RelationalSchema.Column>> flight.alternativedeparturedate;
ClassDiagram.Attribut>> User.id:int =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.emailaddress:String =>=>=> RelationalSchema.Column>> user.emailaddress;
ClassDiagram.Attribut>> User.age:int =>=>=> RelationalSchema.Column>> user.age;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.lockedout:boolean =>=>=> RelationalSchema.Column>> user.lockedout;
ClassDiagram.Attribut>> Human.iq:int =>=>=> RelationalSchema.Column>> human.iq;
ClassDiagram.Attribut>> Animal.id:Integer =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.name:String =>=>=> RelationalSchema.Column>> animal.name;
ClassDiagram.Attribut>> Mammal.ispregnant:boolean =>=>=> RelationalSchema.Column>> mammal.ispregnant;
ClassDiagram.Attribut>> Human.iq:int =>=>=> RelationalSchema.Column>> human.iq;
ClassDiagram.Attribut>> Animal.id:Integer =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.name:String =>=>=> RelationalSchema.Column>> animal.name;
ClassDiagram.Attribut>> Club.id:int =>=>=> RelationalSchema.Column>> club.id PRIMARY KEY;
ClassDiagram.Attribut>> Club.name:String =>=>=> RelationalSchema.Column>> club.name;
ClassDiagram.Attribut>> Mammal.ispregnant:boolean =>=>=> RelationalSchema.Column>> mammal.ispregnant;
ClassDiagram.Attribut>> Human.iq:int =>=>=> RelationalSchema.Column>> human.iq;
ClassDiagram.Attribut>> Mammal.ispregnant:boolean =>=>=> RelationalSchema.Column>> mammal.ispregnant;
ClassDiagram.Attribut>> Mammal.ispregnant:boolean =>=>=> RelationalSchema.Column>> mammal.ispregnant;
ClassDiagram.Attribut>> Animal.id:Integer =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.name:String =>=>=> RelationalSchema.Column>> animal.name;
ClassDiagram.Attribut>> Human.iq:int =>=>=> RelationalSchema.Column>> human.iq;
ClassDiagram.Attribut>> Printer.id:Long =>=>=> RelationalSchema.Column>> printer.id PRIMARY KEY;
ClassDiagram.Attribut>> Bug.id:int =>=>=> RelationalSchema.Column>> bug.id PRIMARY KEY;
ClassDiagram.Attribut>> Bug.title:String =>=>=> RelationalSchema.Column>> bug.title;
ClassDiagram.Attribut>> PrinterCable.id:Long =>=>=> RelationalSchema.Column>> printercable.id PRIMARY KEY;
ClassDiagram.Attribut>> PrinterCable.GeneratedName:Printer =>=>=> RelationalSchema.Column>> printercable.GeneratedName;
ClassDiagram.Attribut>> Category.id:int =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.title:String =>=>=> RelationalSchema.Column>> category.title;
ClassDiagram.Attribut>> SocialSite.id:int =>=>=> RelationalSchema.Column>> socialsite.id PRIMARY KEY;
ClassDiagram.Attribut>> SocialSite.website:String =>=>=> RelationalSchema.Column>> socialsite.website;
ClassDiagram.Attribut>> Employee.id:int =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.GeneratedName:ContactInfo =>=>=> RelationalSchema.Column>> employee.GeneratedName;
ClassDiagram.Attribut>> BlogEntry.text:String =>=>=> RelationalSchema.Column>> blogentry.text;
ClassDiagram.Attribut>> Location.name:String =>=>=> RelationalSchema.Column>> location.name PRIMARY KEY;
ClassDiagram.Attribut>> PhoneNumber.id:int =>=>=> RelationalSchema.Column>> phonenumber.id PRIMARY KEY;
ClassDiagram.Attribut>> PhoneNumber.number:int =>=>=> RelationalSchema.Column>> phonenumber.number;
ClassDiagram.Attribut>> PropertyRecord.id:Long =>=>=> RelationalSchema.Column>> propertyrecord.id PRIMARY KEY;
ClassDiagram.Attribut>> PropertyRecord.parcels:Map<Address,PropertyInfo> =>=>=> RelationalSchema.Column>> propertyrecord.parcels;
ClassDiagram.Attribut>> PropertyRecord.legacyparcels:Map<Address,PropertyInfo> =>=>=> RelationalSchema.Column>> propertyrecord.legacyparcels;
ClassDiagram.Attribut>> PropertyRecord.unsortedparcels:Set<PropertyInfo> =>=>=> RelationalSchema.Column>> propertyrecord.unsortedparcels;
ClassDiagram.Attribut>> PropertyRecord.legacyunsortedparcels:Set<PropertyInfo> =>=>=> RelationalSchema.Column>> propertyrecord.legacyunsortedparcels;
ClassDiagram.Attribut>> Addr.id:int =>=>=> RelationalSchema.Column>> addr.id PRIMARY KEY;
ClassDiagram.Attribut>> Addr.street:String =>=>=> RelationalSchema.Column>> addr.street;
ClassDiagram.Attribut>> Addr.city:String =>=>=> RelationalSchema.Column>> addr.city;
ClassDiagram.Attribut>> Addr.state:String =>=>=> RelationalSchema.Column>> addr.state;
ClassDiagram.Attribut>> Addr.country:String =>=>=> RelationalSchema.Column>> addr.country;
ClassDiagram.Attribut>> Addr.zipcode:String =>=>=> RelationalSchema.Column>> addr.zipcode;
ClassDiagram.Attribut>> UserImpl.id:Integer =>=>=> RelationalSchema.Column>> userimpl.id PRIMARY KEY;
ClassDiagram.Attribut>> ContactImpl.id:Integer =>=>=> RelationalSchema.Column>> contactimpl.id PRIMARY KEY;
ClassDiagram.Attribut>> ContactImpl.name:String =>=>=> RelationalSchema.Column>> contactimpl.name;
ClassDiagram.Attribut>> Entity2.entity2_prop1:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop1;
ClassDiagram.Attribut>> Entity2.entity2_prop2:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop2;
ClassDiagram.Attribut>> Entity2.entity2_prop3:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop3;
ClassDiagram.Attribut>> Entity2.entity2_prop4:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop4;
ClassDiagram.Attribut>> Entity2.entity2_prop5:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop5;
ClassDiagram.Attribut>> Entity2.entity2_prop6:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop6;
ClassDiagram.Attribut>> Entity1.entity1_prop1:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop1;
ClassDiagram.Attribut>> Entity1.entity1_prop2:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop2;
ClassDiagram.Attribut>> Entity1.entity1_prop3:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop3;
ClassDiagram.Attribut>> Entity1.entity1_prop4:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop4;
ClassDiagram.Attribut>> Entity1.entity1_prop5:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop5;
ClassDiagram.Attribut>> Entity1.entity1_prop6:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop6;
ClassDiagram.Attribut>> Dvd.id:MyOid =>=>=> RelationalSchema.Column>> dvd.id PRIMARY KEY;
ClassDiagram.Attribut>> Dvd.title:String =>=>=> RelationalSchema.Column>> dvd.title;
ClassDiagram.Attribut>> DomainAdmin.domainname:String =>=>=> RelationalSchema.Column>> domainadmin.domainname PRIMARY KEY;
ClassDiagram.Attribut>> DomainAdmin.adminuser:String =>=>=> RelationalSchema.Column>> domainadmin.adminuser PRIMARY KEY;
ClassDiagram.Attribut>> DomainAdmin.nickname:String =>=>=> RelationalSchema.Column>> domainadmin.nickname;
ClassDiagram.Attribut>> Parent.id:ParentPk =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.age:int =>=>=> RelationalSchema.Column>> parent.age;
ClassDiagram.Attribut>> TreeType.id:Integer =>=>=> RelationalSchema.Column>> treetype.id PRIMARY KEY;
ClassDiagram.Attribut>> TreeType.name:String =>=>=> RelationalSchema.Column>> treetype.name;
ClassDiagram.Attribut>> TreeType.GeneratedName:ForestType =>=>=> RelationalSchema.Column>> treetype.GeneratedName;
ClassDiagram.Attribut>> TreeType.alternative:ForestType =>=>=> RelationalSchema.Column>> treetype.alternative;
ClassDiagram.Attribut>> Car.id:Integer =>=>=> RelationalSchema.Column>> car.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.body:Color =>=>=> RelationalSchema.Column>> car.body;
ClassDiagram.Attribut>> Lotz.lotpk:LotzPK =>=>=> RelationalSchema.Column>> lotz.lotpk;
ClassDiagram.Attribut>> Lotz.name:String =>=>=> RelationalSchema.Column>> lotz.name;
ClassDiagram.Attribut>> Lotz.location:String =>=>=> RelationalSchema.Column>> lotz.location;
ClassDiagram.Attribut>> OrderLine.id:Integer =>=>=> RelationalSchema.Column>> orderline.id PRIMARY KEY;
ClassDiagram.Attribut>> OrderLine.item:String =>=>=> RelationalSchema.Column>> orderline.item;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Order =>=>=> RelationalSchema.Column>> orderline.GeneratedName;
ClassDiagram.Attribut>> OrderLine.replacement:Order =>=>=> RelationalSchema.Column>> orderline.replacement;
ClassDiagram.Attribut>> Deal.id:Integer =>=>=> RelationalSchema.Column>> deal.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.id:Integer =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> BiggestForest.id:Integer =>=>=> RelationalSchema.Column>> biggestforest.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.id:Integer =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.userid:String =>=>=> RelationalSchema.Column>> customer.userid;
ClassDiagram.Attribut>> Order.id:Integer =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.ordernbr:String =>=>=> RelationalSchema.Column>> order.ordernbr;
ClassDiagram.Attribut>> DistrictUser.id:Long =>=>=> RelationalSchema.Column>> districtuser.id PRIMARY KEY;
ClassDiagram.Attribut>> DistrictUser.createdby:Long =>=>=> RelationalSchema.Column>> districtuser.createdby;
ClassDiagram.Attribut>> DistrictUser.createdon:Date =>=>=> RelationalSchema.Column>> districtuser.createdon;
ClassDiagram.Attribut>> DistrictUser.ldtmd:Long =>=>=> RelationalSchema.Column>> districtuser.ldtmd;
ClassDiagram.Attribut>> DistrictUser.pmtmp:Long =>=>=> RelationalSchema.Column>> districtuser.pmtmp;
ClassDiagram.Attribut>> ZItemCost.GeneratedName:Item =>=>=> RelationalSchema.Column>> zitemcost.GeneratedName;
ClassDiagram.Attribut>> ZItemCost.GeneratedName:Vendor =>=>=> RelationalSchema.Column>> zitemcost.GeneratedName;
ClassDiagram.Attribut>> ZItemCost.cost:BigDecimal =>=>=> RelationalSchema.Column>> zitemcost.cost;
ClassDiagram.Attribut>> WarehouseItem.GeneratedName:Item =>=>=> RelationalSchema.Column>> warehouseitem.GeneratedName;
ClassDiagram.Attribut>> WarehouseItem.GeneratedName:Vendor =>=>=> RelationalSchema.Column>> warehouseitem.GeneratedName;
ClassDiagram.Attribut>> WarehouseItem.qtyinstock:BigDecimal =>=>=> RelationalSchema.Column>> warehouseitem.qtyinstock;
ClassDiagram.Attribut>> Color.id:Integer =>=>=> RelationalSchema.Column>> color.id PRIMARY KEY;
ClassDiagram.Attribut>> Color.name:String =>=>=> RelationalSchema.Column>> color.name;
ClassDiagram.Attribut>> User.userkey:Long =>=>=> RelationalSchema.Column>> user.userkey PRIMARY KEY;
ClassDiagram.Attribut>> User.start:Date =>=>=> RelationalSchema.Column>> user.start PRIMARY KEY;
ClassDiagram.Attribut>> User.end:Date =>=>=> RelationalSchema.Column>> user.end PRIMARY KEY;
ClassDiagram.Attribut>> User.createdby:Long =>=>=> RelationalSchema.Column>> user.createdby;
ClassDiagram.Attribut>> User.createdon:Date =>=>=> RelationalSchema.Column>> user.createdon;
ClassDiagram.Attribut>> User.userid:String =>=>=> RelationalSchema.Column>> user.userid;
ClassDiagram.Attribut>> User.prefix:Integer =>=>=> RelationalSchema.Column>> user.prefix;
ClassDiagram.Attribut>> User.firstname:String =>=>=> RelationalSchema.Column>> user.firstname;
ClassDiagram.Attribut>> User.lastname1:String =>=>=> RelationalSchema.Column>> user.lastname1;
ClassDiagram.Attribut>> User.lastname2:String =>=>=> RelationalSchema.Column>> user.lastname2;
ClassDiagram.Attribut>> User.middlename1:String =>=>=> RelationalSchema.Column>> user.middlename1;
ClassDiagram.Attribut>> User.middlename2:String =>=>=> RelationalSchema.Column>> user.middlename2;
ClassDiagram.Attribut>> User.suffix:Integer =>=>=> RelationalSchema.Column>> user.suffix;
ClassDiagram.Attribut>> User.birth:Date =>=>=> RelationalSchema.Column>> user.birth;
ClassDiagram.Attribut>> User.birthstate:Integer =>=>=> RelationalSchema.Column>> user.birthstate;
ClassDiagram.Attribut>> User.birthcountry:Integer =>=>=> RelationalSchema.Column>> user.birthcountry;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.usertype:Integer =>=>=> RelationalSchema.Column>> user.usertype;
ClassDiagram.Attribut>> User.privilege:Integer =>=>=> RelationalSchema.Column>> user.privilege;
ClassDiagram.Attribut>> User.state:Integer =>=>=> RelationalSchema.Column>> user.state;
ClassDiagram.Attribut>> User.country:Integer =>=>=> RelationalSchema.Column>> user.country;
ClassDiagram.Attribut>> User.preferredname:String =>=>=> RelationalSchema.Column>> user.preferredname;
ClassDiagram.Attribut>> User.birthplace:String =>=>=> RelationalSchema.Column>> user.birthplace;
ClassDiagram.Attribut>> User.school:Long =>=>=> RelationalSchema.Column>> user.school;
ClassDiagram.Attribut>> User.cluster:Long =>=>=> RelationalSchema.Column>> user.cluster;
ClassDiagram.Attribut>> User.ldtmm:Long =>=>=> RelationalSchema.Column>> user.ldtmm;
ClassDiagram.Attribut>> User.ldtmd:Long =>=>=> RelationalSchema.Column>> user.ldtmd;
ClassDiagram.Attribut>> User.pmtmp:Long =>=>=> RelationalSchema.Column>> user.pmtmp;
ClassDiagram.Attribut>> ForestType.id:Integer =>=>=> RelationalSchema.Column>> foresttype.id PRIMARY KEY;
ClassDiagram.Attribut>> ForestType.name:String =>=>=> RelationalSchema.Column>> foresttype.name;
ClassDiagram.Attribut>> Carz.id:Integer =>=>=> RelationalSchema.Column>> carz.id PRIMARY KEY;
ClassDiagram.Attribut>> Carz.make:String =>=>=> RelationalSchema.Column>> carz.make;
ClassDiagram.Attribut>> Carz.model:String =>=>=> RelationalSchema.Column>> carz.model;
ClassDiagram.Attribut>> Carz.manufactured:Date =>=>=> RelationalSchema.Column>> carz.manufactured;
ClassDiagram.Attribut>> Node.id:NodePk =>=>=> RelationalSchema.Column>> node.id PRIMARY KEY;
ClassDiagram.Attribut>> Node.description:String =>=>=> RelationalSchema.Column>> node.description;
ClassDiagram.Attribut>> Lens.id:Long =>=>=> RelationalSchema.Column>> lens.id PRIMARY KEY;
ClassDiagram.Attribut>> Lens.focal:float =>=>=> RelationalSchema.Column>> lens.focal;
ClassDiagram.Attribut>> Lens.length:float =>=>=> RelationalSchema.Column>> lens.length;
ClassDiagram.Attribut>> Frame.id:Long =>=>=> RelationalSchema.Column>> frame.id PRIMARY KEY;
ClassDiagram.Attribut>> Frame.name:String =>=>=> RelationalSchema.Column>> frame.name;
ClassDiagram.Attribut>> Frame.lowername:String =>=>=> RelationalSchema.Column>> frame.lowername;
ClassDiagram.Attribut>> Passport.id:Long =>=>=> RelationalSchema.Column>> passport.id PRIMARY KEY;
ClassDiagram.Attribut>> Passport.name:String =>=>=> RelationalSchema.Column>> passport.name;
ClassDiagram.Attribut>> Stamp.id:Long =>=>=> RelationalSchema.Column>> stamp.id PRIMARY KEY;
ClassDiagram.Attribut>> Stamp.country:String =>=>=> RelationalSchema.Column>> stamp.country;
ClassDiagram.Attribut>> Branch.id:Integer =>=>=> RelationalSchema.Column>> branch.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.//memberdeclarationid:int =>=>=> RelationalSchema.Column>> person.//memberdeclarationid;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname;
ClassDiagram.Attribut>> Person.companyname:String =>=>=> RelationalSchema.Column>> person.companyname;
ClassDiagram.Attribut>> Leaf.id:Integer =>=>=> RelationalSchema.Column>> leaf.id PRIMARY KEY;
ClassDiagram.Attribut>> Stay.//memberdeclarationid:int =>=>=> RelationalSchema.Column>> stay.//memberdeclarationid;
ClassDiagram.Attribut>> Stay.GeneratedName:Person =>=>=> RelationalSchema.Column>> stay.GeneratedName;
ClassDiagram.Attribut>> Stay.old:Person =>=>=> RelationalSchema.Column>> stay.old;
ClassDiagram.Attribut>> Stay.veryold:Person =>=>=> RelationalSchema.Column>> stay.veryold;
ClassDiagram.Attribut>> Stay.start:Date =>=>=> RelationalSchema.Column>> stay.start;
ClassDiagram.Attribut>> Stay.end:Date =>=>=> RelationalSchema.Column>> stay.end;
ClassDiagram.Attribut>> Stay.vessel:String =>=>=> RelationalSchema.Column>> stay.vessel;
ClassDiagram.Attribut>> Stay.authoriser:String =>=>=> RelationalSchema.Column>> stay.authoriser;
ClassDiagram.Attribut>> Stay.comments:String =>=>=> RelationalSchema.Column>> stay.comments;
ClassDiagram.Attribut>> BImpl.serialversionuid:long =>=>=> RelationalSchema.Column>> bimpl.serialversionuid;
ClassDiagram.Attribut>> BImpl.bid:Integer =>=>=> RelationalSchema.Column>> bimpl.bid;
ClassDiagram.Attribut>> ZImpl.serialversionuid:long =>=>=> RelationalSchema.Column>> zimpl.serialversionuid;
ClassDiagram.Attribut>> ZImpl.zid:Integer =>=>=> RelationalSchema.Column>> zimpl.zid PRIMARY KEY;
ClassDiagram.Attribut>> ZImpl.GeneratedName:B =>=>=> RelationalSchema.Column>> zimpl.GeneratedName;
ClassDiagram.Attribut>> PrimeMinister.id:Integer =>=>=> RelationalSchema.Column>> primeminister.id PRIMARY KEY;
ClassDiagram.Attribut>> PrimeMinister.name:String =>=>=> RelationalSchema.Column>> primeminister.name;
ClassDiagram.Attribut>> PrimeMinister.current:Government =>=>=> RelationalSchema.Column>> primeminister.current;
ClassDiagram.Attribut>> Sky.id:Integer =>=>=> RelationalSchema.Column>> sky.id PRIMARY KEY;
ClassDiagram.Attribut>> AImpl.serialversionuid:long =>=>=> RelationalSchema.Column>> aimpl.serialversionuid;
ClassDiagram.Attribut>> AImpl.aid:Integer =>=>=> RelationalSchema.Column>> aimpl.aid PRIMARY KEY;
ClassDiagram.Attribut>> Manufacturer.id:Integer =>=>=> RelationalSchema.Column>> manufacturer.id PRIMARY KEY;
ClassDiagram.Attribut>> Multiple.id1:Long =>=>=> RelationalSchema.Column>> multiple.id1 PRIMARY KEY;
ClassDiagram.Attribut>> Multiple.id2:Long =>=>=> RelationalSchema.Column>> multiple.id2 PRIMARY KEY;
ClassDiagram.Attribut>> Multiple.id3:Long =>=>=> RelationalSchema.Column>> multiple.id3 PRIMARY KEY;
ClassDiagram.Attribut>> Multiple.quantity:int =>=>=> RelationalSchema.Column>> multiple.quantity;
ClassDiagram.Attribut>> Simple2.id1:Long =>=>=> RelationalSchema.Column>> simple2.id1 PRIMARY KEY;
ClassDiagram.Attribut>> Simple2.id2:Long =>=>=> RelationalSchema.Column>> simple2.id2 PRIMARY KEY;
ClassDiagram.Attribut>> Simple2.quantity:int =>=>=> RelationalSchema.Column>> simple2.quantity;
ClassDiagram.Attribut>> Simple.id1:Long =>=>=> RelationalSchema.Column>> simple.id1 PRIMARY KEY;
ClassDiagram.Attribut>> Simple.id2:Long =>=>=> RelationalSchema.Column>> simple.id2 PRIMARY KEY;
ClassDiagram.Attribut>> Simple.quantity:int =>=>=> RelationalSchema.Column>> simple.quantity;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.investments:List<Investment> =>=>=> RelationalSchema.Column>> customer.investments;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.investments:List<Investment> =>=>=> RelationalSchema.Column>> customer.investments;
ClassDiagram.Attribut>> Investor.id:Long =>=>=> RelationalSchema.Column>> investor.id PRIMARY KEY;
ClassDiagram.Attribut>> Investor.investments:List<Investment> =>=>=> RelationalSchema.Column>> investor.investments;
ClassDiagram.Attribut>> C.age:int =>=>=> RelationalSchema.Column>> c.age;
ClassDiagram.Attribut>> Cat.id:Integer =>=>=> RelationalSchema.Column>> cat.id PRIMARY KEY;
ClassDiagram.Attribut>> Cat.name:String =>=>=> RelationalSchema.Column>> cat.name;
ClassDiagram.Attribut>> Cat.secondname:String =>=>=> RelationalSchema.Column>> cat.secondname;
ClassDiagram.Attribut>> Cat.storypart1:String =>=>=> RelationalSchema.Column>> cat.storypart1;
ClassDiagram.Attribut>> Cat.storypart2:String =>=>=> RelationalSchema.Column>> cat.storypart2;
ClassDiagram.Attribut>> Dog.id:DogPk =>=>=> RelationalSchema.Column>> dog.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.weight:int =>=>=> RelationalSchema.Column>> dog.weight;
ClassDiagram.Attribut>> Dog.thoroughbredname:String =>=>=> RelationalSchema.Column>> dog.thoroughbredname;
ClassDiagram.Attribut>> B.id:Integer =>=>=> RelationalSchema.Column>> b.id PRIMARY KEY;
ClassDiagram.Attribut>> B.name:String =>=>=> RelationalSchema.Column>> b.name;
ClassDiagram.Attribut>> Life.id:Integer =>=>=> RelationalSchema.Column>> life.id PRIMARY KEY;
ClassDiagram.Attribut>> Life.duration:int =>=>=> RelationalSchema.Column>> life.duration;
ClassDiagram.Attribut>> Life.fulldescription:String =>=>=> RelationalSchema.Column>> life.fulldescription;
ClassDiagram.Attribut>> SysGroupsOrm.groupid:long =>=>=> RelationalSchema.Column>> sysgroupsorm.groupid PRIMARY KEY;
ClassDiagram.Attribut>> Death.id:Integer =>=>=> RelationalSchema.Column>> death.id PRIMARY KEY;
ClassDiagram.Attribut>> Death.GeneratedName:Date =>=>=> RelationalSchema.Column>> death.GeneratedName;
ClassDiagram.Attribut>> Death.howdoesithappen:String =>=>=> RelationalSchema.Column>> death.howdoesithappen;
ClassDiagram.Attribut>> SimpleCat.id:Integer =>=>=> RelationalSchema.Column>> simplecat.id PRIMARY KEY;
ClassDiagram.Attribut>> SimpleCat.name:String =>=>=> RelationalSchema.Column>> simplecat.name;
ClassDiagram.Attribut>> Life.id:Integer =>=>=> RelationalSchema.Column>> life.id PRIMARY KEY;
ClassDiagram.Attribut>> Life.duration:int =>=>=> RelationalSchema.Column>> life.duration;
ClassDiagram.Attribut>> Life.fulldescription:String =>=>=> RelationalSchema.Column>> life.fulldescription;
ClassDiagram.Attribut>> SysUserOrm.userid:long =>=>=> RelationalSchema.Column>> sysuserorm.userid PRIMARY KEY;
ClassDiagram.Attribut>> State.id:Integer =>=>=> RelationalSchema.Column>> state.id PRIMARY KEY;
ClassDiagram.Attribut>> State.name:String =>=>=> RelationalSchema.Column>> state.name;
ClassDiagram.Attribut>> Foobar.id:Integer =>=>=> RelationalSchema.Column>> foobar.id PRIMARY KEY;
ClassDiagram.Attribut>> Foobar.name:String =>=>=> RelationalSchema.Column>> foobar.name;
ClassDiagram.Attribut>> Country.id:Integer =>=>=> RelationalSchema.Column>> country.id PRIMARY KEY;
ClassDiagram.Attribut>> Country.name:String =>=>=> RelationalSchema.Column>> country.name;
ClassDiagram.Attribut>> Sky.id:Long =>=>=> RelationalSchema.Column>> sky.id PRIMARY KEY;
ClassDiagram.Attribut>> Sky.color:String =>=>=> RelationalSchema.Column>> sky.color;
ClassDiagram.Attribut>> Sky.day:String =>=>=> RelationalSchema.Column>> sky.day;
ClassDiagram.Attribut>> Sky.month:String =>=>=> RelationalSchema.Column>> sky.month;
ClassDiagram.Attribut>> Sky.area:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> CodedPairHolder.id:Long =>=>=> RelationalSchema.Column>> codedpairholder.id PRIMARY KEY;
ClassDiagram.Attribut>> CodedPairHolder.code:String =>=>=> RelationalSchema.Column>> codedpairholder.code;
ClassDiagram.Attribut>> CodedPairHolder.pair:PersonPair =>=>=> RelationalSchema.Column>> codedpairholder.pair;
ClassDiagram.Attribut>> Tooth.id:Integer =>=>=> RelationalSchema.Column>> tooth.id PRIMARY KEY;
ClassDiagram.Attribut>> Tooth.type:String =>=>=> RelationalSchema.Column>> tooth.type;
ClassDiagram.Attribut>> Mouth.id:Integer =>=>=> RelationalSchema.Column>> mouth.id PRIMARY KEY;
ClassDiagram.Attribut>> Mouth.size:int =>=>=> RelationalSchema.Column>> mouth.size;
ClassDiagram.Attribut>> CodedPairSetHolder.serialversionuid:long =>=>=> RelationalSchema.Column>> codedpairsetholder.serialversionuid;
ClassDiagram.Attribut>> CodedPairSetHolder.id:Long =>=>=> RelationalSchema.Column>> codedpairsetholder.id PRIMARY KEY;
ClassDiagram.Attribut>> CodedPairSetHolder.code:String =>=>=> RelationalSchema.Column>> codedpairsetholder.code;
ClassDiagram.Attribut>> CodedPairSetHolder.pairs:Set<PersonPair> =>=>=> RelationalSchema.Column>> codedpairsetholder.pairs;
ClassDiagram.Attribut>> Parent./***/id:Long =>=>=> RelationalSchema.Column>> parent./***/id PRIMARY KEY;
ClassDiagram.Attribut>> Child./***/id:Long =>=>=> RelationalSchema.Column>> child./***/id PRIMARY KEY;
ClassDiagram.Attribut>> ListMappingTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> listmappingtest.ssr;
ClassDiagram.Attribut>> Storm.id:Integer =>=>=> RelationalSchema.Column>> storm.id PRIMARY KEY;
ClassDiagram.Attribut>> Storm.start:Location =>=>=> RelationalSchema.Column>> storm.start;
ClassDiagram.Attribut>> Storm.end:Location =>=>=> RelationalSchema.Column>> storm.end;
ClassDiagram.Attribut>> Storm.stormname:String =>=>=> RelationalSchema.Column>> storm.stormname;
ClassDiagram.Attribut>> MyEntity.id:Long =>=>=> RelationalSchema.Column>> myentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MyEntity.name:String =>=>=> RelationalSchema.Column>> myentity.name;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Invoice.id:Long =>=>=> RelationalSchema.Column>> invoice.id PRIMARY KEY;
ClassDiagram.Attribut>> Palmtree.leavesize:double =>=>=> RelationalSchema.Column>> palmtree.leavesize;
ClassDiagram.Attribut>> Window.id:Long =>=>=> RelationalSchema.Column>> window.id PRIMARY KEY;
ClassDiagram.Attribut>> Tree.id:Long =>=>=> RelationalSchema.Column>> tree.id PRIMARY KEY;
ClassDiagram.Attribut>> Gate.id:Long =>=>=> RelationalSchema.Column>> gate.id PRIMARY KEY;
ClassDiagram.Attribut>> Portal.id:Long =>=>=> RelationalSchema.Column>> portal.id PRIMARY KEY;
ClassDiagram.Attribut>> LegacySequenceExportTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> legacysequenceexporttest.ssr;
ClassDiagram.Attribut>> SequenceExportTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> sequenceexporttest.ssr;
ClassDiagram.Attribut>> PooledHiLoSequenceIdentifierTest.log:Logger =>=>=> RelationalSchema.Column>> pooledhilosequenceidentifiertest.log;
ClassDiagram.Attribut>> IsolatedEvictableEntity.id:Integer =>=>=> RelationalSchema.Column>> isolatedevictableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> IsolatedEvictableEntity.name:String =>=>=> RelationalSchema.Column>> isolatedevictableentity.name;
ClassDiagram.Attribut>> UnrelatedEntity.id:Long =>=>=> RelationalSchema.Column>> unrelatedentity.id PRIMARY KEY;
ClassDiagram.Attribut>> UnrelatedEntity.name:String =>=>=> RelationalSchema.Column>> unrelatedentity.name;
ClassDiagram.Attribut>> BookStore.id:Long =>=>=> RelationalSchema.Column>> bookstore.id PRIMARY KEY;
ClassDiagram.Attribut>> BookStore.name:String =>=>=> RelationalSchema.Column>> bookstore.name;
ClassDiagram.Attribut>> Author.id:Long =>=>=> RelationalSchema.Column>> author.id PRIMARY KEY;
ClassDiagram.Attribut>> Author.name:String =>=>=> RelationalSchema.Column>> author.name;
ClassDiagram.Attribut>> Author.GeneratedName:Publisher =>=>=> RelationalSchema.Column>> author.GeneratedName;
ClassDiagram.Attribut>> Book.id:Long =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.title:String =>=>=> RelationalSchema.Column>> book.title;
ClassDiagram.Attribut>> Book.GeneratedName:Author =>=>=> RelationalSchema.Column>> book.GeneratedName;
ClassDiagram.Attribut>> Publisher.id:Long =>=>=> RelationalSchema.Column>> publisher.id PRIMARY KEY;
ClassDiagram.Attribut>> Publisher.name:String =>=>=> RelationalSchema.Column>> publisher.name;
ClassDiagram.Attribut>> Y.id:Long =>=>=> RelationalSchema.Column>> y.id PRIMARY KEY;
ClassDiagram.Attribut>> Preisregelung.id:Long =>=>=> RelationalSchema.Column>> preisregelung.id PRIMARY KEY;
ClassDiagram.Attribut>> X.id:Long =>=>=> RelationalSchema.Column>> x.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranche.id:Long =>=>=> RelationalSchema.Column>> tranche.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranchenmodell.id:Long =>=>=> RelationalSchema.Column>> tranchenmodell.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranche.id:Long =>=>=> RelationalSchema.Column>> tranche.id PRIMARY KEY;
ClassDiagram.Attribut>> Preisregelung.id:Long =>=>=> RelationalSchema.Column>> preisregelung.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranchenmodell.id:Long =>=>=> RelationalSchema.Column>> tranchenmodell.id PRIMARY KEY;
ClassDiagram.Attribut>> Feature.id:Long =>=>=> RelationalSchema.Column>> feature.id PRIMARY KEY;
ClassDiagram.Attribut>> Feature.name:String =>=>=> RelationalSchema.Column>> feature.name;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> BeforeCompletionFailureTest.log:Logger =>=>=> RelationalSchema.Column>> beforecompletionfailuretest.log;
ClassDiagram.Attribut>> Alias.id:Integer =>=>=> RelationalSchema.Column>> alias.id PRIMARY KEY;
ClassDiagram.Attribut>> Alias.alias:String =>=>=> RelationalSchema.Column>> alias.alias;
ClassDiagram.Attribut>> MultipleCollectionRefEntity1.id:Long =>=>=> RelationalSchema.Column>> multiplecollectionrefentity1.id PRIMARY KEY;
ClassDiagram.Attribut>> MultipleCollectionRefEntity1.text:String =>=>=> RelationalSchema.Column>> multiplecollectionrefentity1.text;
ClassDiagram.Attribut>> MultipleCollectionRefEntity1.multiplecollectionentityid:Long =>=>=> RelationalSchema.Column>> multiplecollectionrefentity1.multiplecollectionentityid;
ClassDiagram.Attribut>> Character.id:Integer =>=>=> RelationalSchema.Column>> character.id PRIMARY KEY;
ClassDiagram.Attribut>> Character.name:String =>=>=> RelationalSchema.Column>> character.name;
ClassDiagram.Attribut>> MultipleCollectionRefEntity2.id:Long =>=>=> RelationalSchema.Column>> multiplecollectionrefentity2.id PRIMARY KEY;
ClassDiagram.Attribut>> MultipleCollectionRefEntity2.text:String =>=>=> RelationalSchema.Column>> multiplecollectionrefentity2.text;
ClassDiagram.Attribut>> MultipleCollectionRefEntity2.multiplecollectionentityid:Long =>=>=> RelationalSchema.Column>> multiplecollectionrefentity2.multiplecollectionentityid;
ClassDiagram.Attribut>> MultipleCollectionEntity.id:Long =>=>=> RelationalSchema.Column>> multiplecollectionentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MultipleCollectionEntity.text:String =>=>=> RelationalSchema.Column>> multiplecollectionentity.text;
ClassDiagram.Attribut>> ConcreteEntity.content:String =>=>=> RelationalSchema.Column>> concreteentity.content;
ClassDiagram.Attribut>> AbstractEntity.id:Integer =>=>=> RelationalSchema.Column>> abstractentity.id PRIMARY KEY;
ClassDiagram.Attribut>> LazyAbstractEntityReference.id:Integer =>=>=> RelationalSchema.Column>> lazyabstractentityreference.id PRIMARY KEY;
ClassDiagram.Attribut>> IAmAFoo.id:long =>=>=> RelationalSchema.Column>> iamafoo.id PRIMARY KEY;
ClassDiagram.Attribut>> IAmAFoo.foo:String =>=>=> RelationalSchema.Column>> iamafoo.foo;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> EmployeeGroup.id:EmployeeGroupId =>=>=> RelationalSchema.Column>> employeegroup.id PRIMARY KEY;
ClassDiagram.Attribut>> ManyToManyOwner.id:Integer =>=>=> RelationalSchema.Column>> manytomanyowner.id PRIMARY KEY;
ClassDiagram.Attribut>> ManyToManyOwner.name:String =>=>=> RelationalSchema.Column>> manytomanyowner.name;
ClassDiagram.Attribut>> ManyToManyTarget.id:Integer =>=>=> RelationalSchema.Column>> manytomanytarget.id PRIMARY KEY;
ClassDiagram.Attribut>> ManyToManyTarget.name:String =>=>=> RelationalSchema.Column>> manytomanytarget.name;
ClassDiagram.Attribut>> Quadrilateral.anglea:Double =>=>=> RelationalSchema.Column>> quadrilateral.anglea;
ClassDiagram.Attribut>> Quadrilateral.angleb:Double =>=>=> RelationalSchema.Column>> quadrilateral.angleb;
ClassDiagram.Attribut>> Quadrilateral.anglec:Double =>=>=> RelationalSchema.Column>> quadrilateral.anglec;
ClassDiagram.Attribut>> Polygon.id:Integer =>=>=> RelationalSchema.Column>> polygon.id PRIMARY KEY;
ClassDiagram.Attribut>> Polygon.description:String =>=>=> RelationalSchema.Column>> polygon.description;
ClassDiagram.Attribut>> InheritingEntity.somevalue:String =>=>=> RelationalSchema.Column>> inheritingentity.somevalue;
ClassDiagram.Attribut>> RootEntity.id:Long =>=>=> RelationalSchema.Column>> rootentity.id PRIMARY KEY;
ClassDiagram.Attribut>> ParentEntity.id:Long =>=>=> RelationalSchema.Column>> parententity.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.id:Integer =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.brandname:String =>=>=> RelationalSchema.Column>> phone.brandname;
ClassDiagram.Attribut>> Phone.price:float =>=>=> RelationalSchema.Column>> phone.price;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> User.id:long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.house1:Long =>=>=> RelationalSchema.Column>> user.house1;
ClassDiagram.Attribut>> User.house2:Long =>=>=> RelationalSchema.Column>> user.house2;
ClassDiagram.Attribut>> House.id:Long =>=>=> RelationalSchema.Column>> house.id PRIMARY KEY;
ClassDiagram.Attribut>> House.streetaddress:String =>=>=> RelationalSchema.Column>> house.streetaddress;
ClassDiagram.Attribut>> TableGeneratorQuotingTest.serviceregistry:StandardServiceRegistry =>=>=> RelationalSchema.Column>> tablegeneratorquotingtest.serviceregistry;
ClassDiagram.Attribut>> Role.id:long =>=>=> RelationalSchema.Column>> role.id PRIMARY KEY;
ClassDiagram.Attribut>> DoesNotWork.serialversionuid:long =>=>=> RelationalSchema.Column>> doesnotwork.serialversionuid;
ClassDiagram.Attribut>> DoesNotWork.GeneratedName:DoesNotWorkPk =>=>=> RelationalSchema.Column>> doesnotwork.GeneratedName;
ClassDiagram.Attribut>> DoesNotWork.globadditinfotid:Long =>=>=> RelationalSchema.Column>> doesnotwork.globadditinfotid;
ClassDiagram.Attribut>> DoesNotWork.globalnotes:List<String> =>=>=> RelationalSchema.Column>> doesnotwork.globalnotes;
ClassDiagram.Attribut>> Super.id:Long =>=>=> RelationalSchema.Column>> super.id PRIMARY KEY;
ClassDiagram.Attribut>> Super.value:Long =>=>=> RelationalSchema.Column>> super.value;
ClassDiagram.Attribut>> User.login:String =>=>=> RelationalSchema.Column>> user.login;
ClassDiagram.Attribut>> User.passwordexpirydays:Double =>=>=> RelationalSchema.Column>> user.passwordexpirydays;
ClassDiagram.Attribut>> User.silly:String =>=>=> RelationalSchema.Column>> user.silly;
ClassDiagram.Attribut>> Customer.comments:String =>=>=> RelationalSchema.Column>> customer.comments;
ClassDiagram.Attribut>> Employee.title:String =>=>=> RelationalSchema.Column>> employee.title;
ClassDiagram.Attribut>> Employee.salary:BigDecimal =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.address:String =>=>=> RelationalSchema.Column>> person.address;
ClassDiagram.Attribut>> Person.zip:String =>=>=> RelationalSchema.Column>> person.zip;
ClassDiagram.Attribut>> Person.country:String =>=>=> RelationalSchema.Column>> person.country;
ClassDiagram.Attribut>> Person.heightinches:double =>=>=> RelationalSchema.Column>> person.heightinches;
ClassDiagram.Attribut>> Person.sex:char =>=>=> RelationalSchema.Column>> person.sex;
ClassDiagram.Attribut>> Parent.id:Long =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.GeneratedName:Parent =>=>=> RelationalSchema.Column>> child.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> Child.id:Long =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.GeneratedName:Parent =>=>=> RelationalSchema.Column>> child.GeneratedName;
ClassDiagram.Attribut>> Parent.id:Long =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.id:Long =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Workflow.serialversionuid:long =>=>=> RelationalSchema.Column>> workflow.serialversionuid;
ClassDiagram.Attribut>> Workflow.id:Long =>=>=> RelationalSchema.Column>> workflow.id PRIMARY KEY;
ClassDiagram.Attribut>> Workflow.defaultlanguage:Locale =>=>=> RelationalSchema.Column>> workflow.defaultlanguage;
ClassDiagram.Attribut>> Workflow.supportedlocales:Set<Locale> =>=>=> RelationalSchema.Column>> workflow.supportedlocales;
ClassDiagram.Attribut>> Workflow.localized:Map<Locale,LocalizedEmbeddable> =>=>=> RelationalSchema.Column>> workflow.localized;
ClassDiagram.Attribut>> Language.id:Long =>=>=> RelationalSchema.Column>> language.id PRIMARY KEY;
ClassDiagram.Attribut>> Language.//@column(unique:String =>=>=> RelationalSchema.Column>> language.//@column(unique;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.price:Double =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Item.specialprice:Double =>=>=> RelationalSchema.Column>> item.specialprice;
ClassDiagram.Attribut>> Container.id:Integer =>=>=> RelationalSchema.Column>> container.id PRIMARY KEY;
ClassDiagram.Attribut>> Container.items:List<Item> =>=>=> RelationalSchema.Column>> container.items;
ClassDiagram.Attribut>> Customer.id:Integer =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.version:Integer =>=>=> RelationalSchema.Column>> customer.version;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.registeredtrademarks:Set<String> =>=>=> RelationalSchema.Column>> customer.registeredtrademarks;
ClassDiagram.Attribut>> Customer.hq:Address =>=>=> RelationalSchema.Column>> customer.hq;
ClassDiagram.Attribut>> Customer.addresses:Set<Address> =>=>=> RelationalSchema.Column>> customer.addresses;
ClassDiagram.Attribut>> Industry.id:Integer =>=>=> RelationalSchema.Column>> industry.id PRIMARY KEY;
ClassDiagram.Attribut>> Industry.name:String =>=>=> RelationalSchema.Column>> industry.name;
ClassDiagram.Attribut>> ZipCode.id:Integer =>=>=> RelationalSchema.Column>> zipcode.id PRIMARY KEY;
ClassDiagram.Attribut>> ZipCode.code:String =>=>=> RelationalSchema.Column>> zipcode.code;
ClassDiagram.Attribut>> ZipCode.city:String =>=>=> RelationalSchema.Column>> zipcode.city;
ClassDiagram.Attribut>> ZipCode.GeneratedName:State =>=>=> RelationalSchema.Column>> zipcode.GeneratedName;
ClassDiagram.Attribut>> Order.id:Integer =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.referencecode:String =>=>=> RelationalSchema.Column>> order.referencecode;
ClassDiagram.Attribut>> Order.placed:Date =>=>=> RelationalSchema.Column>> order.placed;
ClassDiagram.Attribut>> Order.fulfilled:Date =>=>=> RelationalSchema.Column>> order.fulfilled;
ClassDiagram.Attribut>> Order.GeneratedName:Customer =>=>=> RelationalSchema.Column>> order.GeneratedName;
ClassDiagram.Attribut>> Product2.id:Integer =>=>=> RelationalSchema.Column>> product2.id PRIMARY KEY;
ClassDiagram.Attribut>> Product2.description:String =>=>=> RelationalSchema.Column>> product2.description;
ClassDiagram.Attribut>> Category.id:Integer =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.name:String =>=>=> RelationalSchema.Column>> category.name;
ClassDiagram.Attribut>> Folder.id:Long =>=>=> RelationalSchema.Column>> folder.id PRIMARY KEY;
ClassDiagram.Attribut>> Folder.name:String =>=>=> RelationalSchema.Column>> folder.name;
ClassDiagram.Attribut>> Folder.owner:String =>=>=> RelationalSchema.Column>> folder.owner;
ClassDiagram.Attribut>> Contact.id:Long =>=>=> RelationalSchema.Column>> contact.id PRIMARY KEY;
ClassDiagram.Attribut>> Contact.type:String =>=>=> RelationalSchema.Column>> contact.type;
ClassDiagram.Attribut>> Contact.firstname:String =>=>=> RelationalSchema.Column>> contact.firstname;
ClassDiagram.Attribut>> Contact.lastname:String =>=>=> RelationalSchema.Column>> contact.lastname;
ClassDiagram.Attribut>> Farm.id:long =>=>=> RelationalSchema.Column>> farm.id PRIMARY KEY;
ClassDiagram.Attribut>> Farm.name:String =>=>=> RelationalSchema.Column>> farm.name;
ClassDiagram.Attribut>> Farm.accreditations:Set<Accreditation> =>=>=> RelationalSchema.Column>> farm.accreditations;
ClassDiagram.Attribut>> Employee.employeenumber:String =>=>=> RelationalSchema.Column>> employee.employeenumber;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> TrtPanel.id:Long =>=>=> RelationalSchema.Column>> trtpanel.id PRIMARY KEY;
ClassDiagram.Attribut>> TrtPanel.clientid:Long =>=>=> RelationalSchema.Column>> trtpanel.clientid;
ClassDiagram.Attribut>> TrtPanel.deltastamp:String =>=>=> RelationalSchema.Column>> trtpanel.deltastamp;
ClassDiagram.Attribut>> MapFunctionExpressionsTest.querytranslatorfactory:ASTQueryTranslatorFactory =>=>=> RelationalSchema.Column>> mapfunctionexpressionstest.querytranslatorfactory;
ClassDiagram.Attribut>> Entity1.id:long =>=>=> RelationalSchema.Column>> entity1.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity1.value:String =>=>=> RelationalSchema.Column>> entity1.value;
ClassDiagram.Attribut>> GrandChild.id:long =>=>=> RelationalSchema.Column>> grandchild.id PRIMARY KEY;
ClassDiagram.Attribut>> GrandChild.value:String =>=>=> RelationalSchema.Column>> grandchild.value;
ClassDiagram.Attribut>> Child.id:long =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.value:String =>=>=> RelationalSchema.Column>> child.value;
ClassDiagram.Attribut>> Parent.id:long =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.value:String =>=>=> RelationalSchema.Column>> parent.value;
ClassDiagram.Attribut>> Entity2.id:long =>=>=> RelationalSchema.Column>> entity2.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity2.value:String =>=>=> RelationalSchema.Column>> entity2.value;
ClassDiagram.Attribut>> Entity3.id:long =>=>=> RelationalSchema.Column>> entity3.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity3.value:String =>=>=> RelationalSchema.Column>> entity3.value;
ClassDiagram.Attribut>> Employee.id:Integer =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname;
ClassDiagram.Attribut>> Employee.lastname:String =>=>=> RelationalSchema.Column>> employee.lastname;
ClassDiagram.Attribut>> Crop.id:long =>=>=> RelationalSchema.Column>> crop.id PRIMARY KEY;
ClassDiagram.Attribut>> Crop.name:String =>=>=> RelationalSchema.Column>> crop.name;
ClassDiagram.Attribut>> TupleSupportTest.GeneratedName:SessionFactory =>=>=> RelationalSchema.Column>> tuplesupporttest.GeneratedName;
ClassDiagram.Attribut>> Panel.id:Long =>=>=> RelationalSchema.Column>> panel.id PRIMARY KEY;
ClassDiagram.Attribut>> Panel.clientid:Long =>=>=> RelationalSchema.Column>> panel.clientid;
ClassDiagram.Attribut>> Panel.deltastamp:String =>=>=> RelationalSchema.Column>> panel.deltastamp;
ClassDiagram.Attribut>> Department.deptno:Integer =>=>=> RelationalSchema.Column>> department.deptno PRIMARY KEY;
ClassDiagram.Attribut>> Department.deptname:String =>=>=> RelationalSchema.Column>> department.deptname;
ClassDiagram.Attribut>> Title.id:Integer =>=>=> RelationalSchema.Column>> title.id PRIMARY KEY;
ClassDiagram.Attribut>> Title.description:String =>=>=> RelationalSchema.Column>> title.description;
ClassDiagram.Attribut>> User.id:int =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.version:int =>=>=> RelationalSchema.Column>> user.version;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> Company.id:int =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.name:String =>=>=> RelationalSchema.Column>> company.name;
ClassDiagram.Attribut>> ItWithPkClass.key1:Integer =>=>=> RelationalSchema.Column>> itwithpkclass.key1 PRIMARY KEY;
ClassDiagram.Attribut>> ItWithPkClass.key2:Integer =>=>=> RelationalSchema.Column>> itwithpkclass.key2 PRIMARY KEY;
ClassDiagram.Attribut>> ItWithPkClass.name:String =>=>=> RelationalSchema.Column>> itwithpkclass.name;
ClassDiagram.Attribut>> It.key1:Integer =>=>=> RelationalSchema.Column>> it.key1 PRIMARY KEY;
ClassDiagram.Attribut>> It.key2:Integer =>=>=> RelationalSchema.Column>> it.key2 PRIMARY KEY;
ClassDiagram.Attribut>> It.name:String =>=>=> RelationalSchema.Column>> it.name;
ClassDiagram.Attribut>> AbstractCachedItem.id:Long =>=>=> RelationalSchema.Column>> abstractcacheditem.id PRIMARY KEY;
ClassDiagram.Attribut>> AbstractCachedItem.name:String =>=>=> RelationalSchema.Column>> abstractcacheditem.name;
ClassDiagram.Attribut>> CacheableItem.id:Long =>=>=> RelationalSchema.Column>> cacheableitem.id PRIMARY KEY;
ClassDiagram.Attribut>> CacheableItem.name:String =>=>=> RelationalSchema.Column>> cacheableitem.name;
ClassDiagram.Attribut>> Inventory.id:int =>=>=> RelationalSchema.Column>> inventory.id PRIMARY KEY;
ClassDiagram.Attribut>> Inventory.GeneratedName:Store =>=>=> RelationalSchema.Column>> inventory.GeneratedName;
ClassDiagram.Attribut>> Inventory.GeneratedName:Product =>=>=> RelationalSchema.Column>> inventory.GeneratedName;
ClassDiagram.Attribut>> Inventory.quantity:Long =>=>=> RelationalSchema.Column>> inventory.quantity;
ClassDiagram.Attribut>> Inventory.storeprice:BigDecimal =>=>=> RelationalSchema.Column>> inventory.storeprice;
ClassDiagram.Attribut>> Store.id:int =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.name:String =>=>=> RelationalSchema.Column>> store.name;
ClassDiagram.Attribut>> Store.version:int =>=>=> RelationalSchema.Column>> store.version;
ClassDiagram.Attribut>> Product.id:String =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> Product.msrp:BigDecimal =>=>=> RelationalSchema.Column>> product.msrp;
ClassDiagram.Attribut>> Product.version:int =>=>=> RelationalSchema.Column>> product.version;
ClassDiagram.Attribut>> User.id:Integer =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> Department.id:Integer =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> ClassWithIdentityColumn.id:long =>=>=> RelationalSchema.Column>> classwithidentitycolumn.id PRIMARY KEY;
ClassDiagram.Attribut>> ClassWithIdentityColumn.name:String =>=>=> RelationalSchema.Column>> classwithidentitycolumn.name;
ClassDiagram.Attribut>> Group.id:Integer =>=>=> RelationalSchema.Column>> group.id PRIMARY KEY;
ClassDiagram.Attribut>> Group.name:String =>=>=> RelationalSchema.Column>> group.name;
ClassDiagram.Attribut>> FromEntity.id:Integer =>=>=> RelationalSchema.Column>> fromentity.id PRIMARY KEY;
ClassDiagram.Attribut>> FromEntity.name:String =>=>=> RelationalSchema.Column>> fromentity.name;
ClassDiagram.Attribut>> FromEntity.lastname:String =>=>=> RelationalSchema.Column>> fromentity.lastname;
ClassDiagram.Attribut>> DestinationEntity.id:Integer =>=>=> RelationalSchema.Column>> destinationentity.id PRIMARY KEY;
ClassDiagram.Attribut>> DestinationEntity.fullnamefrom:String =>=>=> RelationalSchema.Column>> destinationentity.fullnamefrom;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.price:BigDecimal =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Item.description:String =>=>=> RelationalSchema.Column>> item.description;
ClassDiagram.Attribut>> Item.quantity:Integer =>=>=> RelationalSchema.Column>> item.quantity;
ClassDiagram.Attribut>> Thing.id:Long =>=>=> RelationalSchema.Column>> thing.id PRIMARY KEY;
ClassDiagram.Attribut>> Thing.name:String =>=>=> RelationalSchema.Column>> thing.name;
ClassDiagram.Attribut>> Thing.mutableproperty:Date =>=>=> RelationalSchema.Column>> thing.mutableproperty;
ClassDiagram.Attribut>> Thing.changedvalues:Map<String,Object> =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> ExtraStateTest./***storingitasafieldsoitcanbeaccessedfromtheentitysetter.*/:Session =>=>=> RelationalSchema.Column>> extrastatetest./***storingitasafieldsoitcanbeaccessedfromtheentitysetter.*/;
ClassDiagram.Attribut>> GetAndIsVariantGetterTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> getandisvariantgettertest.ssr;
ClassDiagram.Attribut>> Item.itemnumber:int =>=>=> RelationalSchema.Column>> item.itemnumber PRIMARY KEY;
ClassDiagram.Attribut>> Order.ordernumber:int =>=>=> RelationalSchema.Column>> order.ordernumber PRIMARY KEY;
ClassDiagram.Attribut>> IrrelevantEntity.id:Integer =>=>=> RelationalSchema.Column>> irrelevantentity.id PRIMARY KEY;
ClassDiagram.Attribut>> IrrelevantEntity.name:String =>=>=> RelationalSchema.Column>> irrelevantentity.name;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.version:long =>=>=> RelationalSchema.Column>> customer.version;
ClassDiagram.Attribut>> Order.id:Long =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.version:long =>=>=> RelationalSchema.Column>> order.version;
ClassDiagram.Attribut>> MergeContextTest.session:EventSource =>=>=> RelationalSchema.Column>> mergecontexttest.session;
ClassDiagram.Attribut>> EntityBinder.log:CoreMessageLogger =>=>=> RelationalSchema.Column>> entitybinder.log;
ClassDiagram.Attribut>> EntityBinder.natural_id_cache_suffix:String =>=>=> RelationalSchema.Column>> entitybinder.natural_id_cache_suffix;
ClassDiagram.Attribut>> EntityBinder.context:MetadataBuildingContext =>=>=> RelationalSchema.Column>> entitybinder.context;
ClassDiagram.Attribut>> EntityBinder.name:String =>=>=> RelationalSchema.Column>> entitybinder.name;
ClassDiagram.Attribut>> EntityBinder.annotatedclass:XClass =>=>=> RelationalSchema.Column>> entitybinder.annotatedclass;
ClassDiagram.Attribut>> EntityBinder.GeneratedName:PersistentClass =>=>=> RelationalSchema.Column>> entitybinder.GeneratedName;
ClassDiagram.Attribut>> EntityBinder.discriminatorvalue:String =>=>=> RelationalSchema.Column>> entitybinder.discriminatorvalue;
ClassDiagram.Attribut>> EntityBinder.forcediscriminator:Boolean =>=>=> RelationalSchema.Column>> entitybinder.forcediscriminator;
ClassDiagram.Attribut>> EntityBinder.insertablediscriminator:Boolean =>=>=> RelationalSchema.Column>> entitybinder.insertablediscriminator;
ClassDiagram.Attribut>> EntityBinder.dynamicinsert:boolean =>=>=> RelationalSchema.Column>> entitybinder.dynamicinsert;
ClassDiagram.Attribut>> EntityBinder.dynamicupdate:boolean =>=>=> RelationalSchema.Column>> entitybinder.dynamicupdate;
ClassDiagram.Attribut>> EntityBinder.explicithibernateentityannotation:boolean =>=>=> RelationalSchema.Column>> entitybinder.explicithibernateentityannotation;
ClassDiagram.Attribut>> EntityBinder.GeneratedName:OptimisticLockType =>=>=> RelationalSchema.Column>> entitybinder.GeneratedName;
ClassDiagram.Attribut>> EntityBinder.GeneratedName:PolymorphismType =>=>=> RelationalSchema.Column>> entitybinder.GeneratedName;
ClassDiagram.Attribut>> EntityBinder.selectbeforeupdate:boolean =>=>=> RelationalSchema.Column>> entitybinder.selectbeforeupdate;
ClassDiagram.Attribut>> EntityBinder.batchsize:int =>=>=> RelationalSchema.Column>> entitybinder.batchsize;
ClassDiagram.Attribut>> EntityBinder.lazy:boolean =>=>=> RelationalSchema.Column>> entitybinder.lazy;
ClassDiagram.Attribut>> EntityBinder.proxyclass:XClass =>=>=> RelationalSchema.Column>> entitybinder.proxyclass;
ClassDiagram.Attribut>> EntityBinder.where:String =>=>=> RelationalSchema.Column>> entitybinder.where;
ClassDiagram.Attribut>> EntityBinder.secondarytables:java.util.Map<String,Join> =>=>=> RelationalSchema.Column>> entitybinder.secondarytables;
ClassDiagram.Attribut>> EntityBinder.secondarytablejoins:java.util.Map<String,Object> =>=>=> RelationalSchema.Column>> entitybinder.secondarytablejoins;
ClassDiagram.Attribut>> EntityBinder.cacheconcurrentstrategy:String =>=>=> RelationalSchema.Column>> entitybinder.cacheconcurrentstrategy;
ClassDiagram.Attribut>> EntityBinder.cacheregion:String =>=>=> RelationalSchema.Column>> entitybinder.cacheregion;
ClassDiagram.Attribut>> EntityBinder.naturalidcacheregion:String =>=>=> RelationalSchema.Column>> entitybinder.naturalidcacheregion;
ClassDiagram.Attribut>> EntityBinder.filters:List<Filter> =>=>=> RelationalSchema.Column>> entitybinder.filters;
ClassDiagram.Attribut>> EntityBinder.GeneratedName:InheritanceState =>=>=> RelationalSchema.Column>> entitybinder.GeneratedName;
ClassDiagram.Attribut>> EntityBinder.ignoreidannotations:boolean =>=>=> RelationalSchema.Column>> entitybinder.ignoreidannotations;
ClassDiagram.Attribut>> EntityBinder.cachelazyproperty:boolean =>=>=> RelationalSchema.Column>> entitybinder.cachelazyproperty;
ClassDiagram.Attribut>> EntityBinder.property:AccessType =>=>=> RelationalSchema.Column>> entitybinder.property;
ClassDiagram.Attribut>> EntityBinder.wrapidsinembeddedcomponents:boolean =>=>=> RelationalSchema.Column>> entitybinder.wrapidsinembeddedcomponents;
ClassDiagram.Attribut>> EntityBinder.subselect:String =>=>=> RelationalSchema.Column>> entitybinder.subselect;
ClassDiagram.Attribut>> EntityBinder.sec_tbl_ns_helper:SecondaryTableNamingStrategyHelper =>=>=> RelationalSchema.Column>> entitybinder.sec_tbl_ns_helper;
ClassDiagram.Attribut>> ResultsetMappingSecondPass.log:CoreMessageLogger =>=>=> RelationalSchema.Column>> resultsetmappingsecondpass.log;
ClassDiagram.Attribut>> ResultsetMappingSecondPass.ann:SqlResultSetMapping =>=>=> RelationalSchema.Column>> resultsetmappingsecondpass.ann;
ClassDiagram.Attribut>> ResultsetMappingSecondPass.context:MetadataBuildingContext =>=>=> RelationalSchema.Column>> resultsetmappingsecondpass.context;
ClassDiagram.Attribut>> ResultsetMappingSecondPass.isdefault:boolean =>=>=> RelationalSchema.Column>> resultsetmappingsecondpass.isdefault;
ClassDiagram.Attribut>> ClassPropertyHolder.GeneratedName:PersistentClass =>=>=> RelationalSchema.Column>> classpropertyholder.GeneratedName;
ClassDiagram.Attribut>> ClassPropertyHolder.joins:Map<String,Join> =>=>=> RelationalSchema.Column>> classpropertyholder.joins;
ClassDiagram.Attribut>> ClassPropertyHolder.joinsperrealtablename:Map<String,Join> =>=>=> RelationalSchema.Column>> classpropertyholder.joinsperrealtablename;
ClassDiagram.Attribut>> ClassPropertyHolder.GeneratedName:EntityBinder =>=>=> RelationalSchema.Column>> classpropertyholder.GeneratedName;
ClassDiagram.Attribut>> ClassPropertyHolder.inheritancestateperclass:Map<XClass,InheritanceState> =>=>=> RelationalSchema.Column>> classpropertyholder.inheritancestateperclass;
ClassDiagram.Attribut>> ClassPropertyHolder.attributeconversioninfomap:Map<String,AttributeConversionInfo> =>=>=> RelationalSchema.Column>> classpropertyholder.attributeconversioninfomap;
ClassDiagram.Attribut>> AnnotationBinder.log:CoreMessageLogger =>=>=> RelationalSchema.Column>> annotationbinder.log;
ClassDiagram.Attribut>> AnnotationBinder.default_cache_concurrency_strategy:CacheConcurrencyStrategy =>=>=> RelationalSchema.Column>> annotationbinder.default_cache_concurrency_strategy;
ClassDiagram.Attribut>> EnhancementTask.filesets:List<FileSet> =>=>=> RelationalSchema.Column>> enhancementtask.filesets;
ClassDiagram.Attribut>> EnhancementTask.//enhanceralsobuildsctclassinstances.mightmakesensetosharethese().:ClassPool =>=>=> RelationalSchema.Column>> enhancementtask.//enhanceralsobuildsctclassinstances.mightmakesensetosharethese().;
ClassDiagram.Attribut>> EnhancementTask.GeneratedName:Enhancer =>=>=> RelationalSchema.Column>> enhancementtask.GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Child2  to ClassDiagram.Class>>List<Parent1>;
One-To-Many relationship from ClassDiagram.Class>>Child1  to ClassDiagram.Class>>List<Parent1>;
Many-To-One relationship from ClassDiagram.Class>>TableB  to ClassDiagram.Class>>ATable represented by ClassDiagram.Atrribute>>idcolumn;
One-To-Many relationship from ClassDiagram.Class>>ATable  to ClassDiagram.Class>>List<TableB>;
One-To-One relationship between ClassDiagram.Class>>A  to ClassDiagram.Class>>B represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<Membership>;
One-To-Many relationship from ClassDiagram.Class>>Group  to ClassDiagram.Class>>Set<Membership>;
Many-To-One relationship from ClassDiagram.Class>>Membership  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>member;
Many-To-Many relationship between ClassDiagram.Class>>Employee  and ClassDiagram.Class>>Project: employee_project(employee_id:Employee [PK] #FK to Employee,project_id:Project [PK] #FK to Project);
One-To-One relationship between ClassDiagram.Class>>UserSetting  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<Phone>;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Group>;
One-To-Many relationship from ClassDiagram.Class>>SchemaTwoEntity  to ClassDiagram.Class>>Set<SchemaOneEntity>;
Many-To-One relationship from ClassDiagram.Class>>Step  to ClassDiagram.Class>>Step represented by ClassDiagram.Atrribute>>parent;
One-To-Many relationship from ClassDiagram.Class>>GroupStep  to ClassDiagram.Class>>List<Step>;
Many-To-One relationship from ClassDiagram.Class>>AnnotatedMaster  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>detail_domain;
Many-To-One relationship from ClassDiagram.Class>>ListActionRole  to ClassDiagram.Class>>Role represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>Set<Bid>;
Many-To-One relationship from ClassDiagram.Class>>Bid  to ClassDiagram.Class>>Item represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>C represented by ClassDiagram.Atrribute>>ass;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B>;
Many-To-One relationship from ClassDiagram.Class>>D  to ClassDiagram.Class>>C represented by ClassDiagram.Atrribute>>assoiated;
Many-To-One relationship from ClassDiagram.Class>>B  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>ss;
Many-To-One relationship from ClassDiagram.Class>>B  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>ss;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B>;
One-To-Many relationship from ClassDiagram.Class>>SimpleEntity  to ClassDiagram.Class>>Set<Integer>;
One-To-Many relationship from ClassDiagram.Class>>Store  to ClassDiagram.Class>>List<Inventory>;
One-To-Many relationship from ClassDiagram.Class>>SimpleEntity  to ClassDiagram.Class>>Set<Integer>;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<CustomerInventory>;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>GeneratedName;
Group: user_Group(userID:user [PK] #FK to user,GroupID:Group [PK] #FK to Group);
Many-To-One relationship from ClassDiagram.Class>>CustomerInventory  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventory  to ClassDiagram.Class>>string represented by ClassDiagram.Atrribute>>vehicle;
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>C represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Vehicle  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>driver;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>List<Child>;
Many-To-One relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>List<Child>;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>manager;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Collection<Employee>;
One-To-Many relationship from ClassDiagram.Class>>VersionedCascadeOne  to ClassDiagram.Class>>Set<Many>;
One-To-Many relationship from ClassDiagram.Class>>UnversionedCascadeOne  to ClassDiagram.Class>>Set<Many>;
One-To-Many relationship from ClassDiagram.Class>>UnversionedNoCascadeOne  to ClassDiagram.Class>>Set<Many>;
One-To-Many relationship from ClassDiagram.Class>>VersionedNoCascadeOne  to ClassDiagram.Class>>Set<Many>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>IMyList<Email>;
One-To-Many relationship from ClassDiagram.Class>>Zoo  to ClassDiagram.Class>>Set<Tiger>;
One-To-Many relationship from ClassDiagram.Class>>Zoo  to ClassDiagram.Class>>Set<Lion>;
Many-To-Many relationship between ClassDiagram.Class>>MapHolder  and ClassDiagram.Class>>Value: map_key_map_value(map_holder_id:MapHolder [PK] #FK to MapHolder,map_value_id:Value [PK] #FK to Value);
Many-To-One relationship from ClassDiagram.Class>>MapKey  to ClassDiagram.Class>>Value represented by ClassDiagram.Atrribute>>defaultvalue;
One-To-Many relationship from ClassDiagram.Class>>ConfEntity  to ClassDiagram.Class>>Set<UserConfEntity>;
Many-To-One relationship from ClassDiagram.Class>>UserConfEntity  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>user;
Many-To-One relationship from ClassDiagram.Class>>UserConfEntity  to ClassDiagram.Class>>C represented by ClassDiagram.Atrribute>>confkey;
One-To-Many relationship from ClassDiagram.Class>>UserEntity  to ClassDiagram.Class>>Set<UserConfEntity>;
One-To-Many relationship from ClassDiagram.Class>>Port  to ClassDiagram.Class>>Set<Boat>;
One-To-Many relationship from ClassDiagram.Class>>Topic  to ClassDiagram.Class>>Set<Narrative>;
Many-To-One relationship from ClassDiagram.Class>>Player  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>team;
One-To-Many relationship from ClassDiagram.Class>>SoccerTeam  to ClassDiagram.Class>>Set<Player>;
One-To-One relationship between ClassDiagram.Class>>SoccerTeam  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>onevone;
One-To-Many relationship from ClassDiagram.Class>>Mother  to ClassDiagram.Class>>Set<Son>;
One-To-Many relationship from ClassDiagram.Class>>Father  to ClassDiagram.Class>>List<Son>;
One-To-One relationship between ClassDiagram.Class>>Show  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>description;
One-To-One relationship between ClassDiagram.Class>>PersonAddress  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Computer  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>serial;
One-To-One relationship between ClassDiagram.Class>>ShowDescription  to ClassDiagram.Class>>Show represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Hardware  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>parent;
One-To-One relationship between ClassDiagram.Class>>TrousersZip  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Owner  to ClassDiagram.Class>>Address represented by ClassDiagram.Atrribute>>address;
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Trousers  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>zip;
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>Address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Address  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>PartyAffiliate  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Party  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>OwnerAddress  to ClassDiagram.Class>>Owner represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Shipment  to ClassDiagram.Class>>Item represented by ClassDiagram.Atrribute>>auction;
One-To-Many relationship from ClassDiagram.Class>>Card  to ClassDiagram.Class>>Set<CardField>;
One-To-One relationship between ClassDiagram.Class>>Administration  to ClassDiagram.Class>>B represented by ClassDiagram.Atrribute>>default;
Many-To-One relationship from ClassDiagram.Class>>Truck  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>agreement;
Many-To-One relationship from ClassDiagram.Class>>Vehicule  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>current;
Many-To-One relationship from ClassDiagram.Class>>Vehicule  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>previous;
Many-To-One relationship from ClassDiagram.Class>>Manager  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>employer;
One-To-One relationship between ClassDiagram.Class>>Passport  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>owner;
One-To-Many relationship from ClassDiagram.Class>>Contest  to ClassDiagram.Class>>Competitor;
Many-To-One relationship from ClassDiagram.Class>>NaturalIdOnManyToOne  to ClassDiagram.Class>>C represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Citizen  to ClassDiagram.Class>>State represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>StoreCustomer  to ClassDiagram.Class>>Store represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>StoreCustomer  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>BasketItems  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>basketdatetime;
Many-To-One relationship from ClassDiagram.Class>>Benefserv  to ClassDiagram.Class>>C represented by ClassDiagram.Atrribute>>idpkser;
Many-To-One relationship from ClassDiagram.Class>>Acces  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>idpkdracc;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>List<C>;
One-To-Many relationship from ClassDiagram.Class>>C  to ClassDiagram.Class>>List<B>;
Many-To-One relationship from ClassDiagram.Class>>Droitacces  to ClassDiagram.Class>>B represented by ClassDiagram.Atrribute>>idpkbenef;
Many-To-One relationship from ClassDiagram.Class>>CourseStudent  to ClassDiagram.Class>>Course represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CourseStudent  to ClassDiagram.Class>>Student represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Set<StoreCustomer>;
One-To-Many relationship from ClassDiagram.Class>>Store  to ClassDiagram.Class>>Set<StoreCustomer>;
One-To-Many relationship from ClassDiagram.Class>>Student  to ClassDiagram.Class>>Set<CourseStudent>;
One-To-Many relationship from ClassDiagram.Class>>Course  to ClassDiagram.Class>>Set<CourseStudent>;
One-To-Many relationship from ClassDiagram.Class>>Card  to ClassDiagram.Class>>Set<CardField>;
Many-To-One relationship from ClassDiagram.Class>>Card  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>main;
Many-To-One relationship from ClassDiagram.Class>>ShoppingBaskets  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>customerid;
One-To-Many relationship from ClassDiagram.Class>>ShoppingBaskets  to ClassDiagram.Class>>java.util.Set;
One-To-Many relationship from ClassDiagram.Class>>Customers  to ClassDiagram.Class>>java.util.Set;
Many-To-One relationship from ClassDiagram.Class>>CardField  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>tmp;
One-To-Many relationship from ClassDiagram.Class>>Course6  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>Course2  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>Course7  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>Course3  to ClassDiagram.Class>>List<Student>;
Student: course5_Student(course5ID:course5 [PK] #FK to course5,StudentID:Student [PK] #FK to Student);
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<User>;
One-To-Many relationship from ClassDiagram.Class>>Course1  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>Course8  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>Course4  to ClassDiagram.Class>>List<Student>;
Many-To-One relationship from ClassDiagram.Class>>Address  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>Set<Address>;
Many-To-One relationship from ClassDiagram.Class>>File  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>SymbolicLink  to ClassDiagram.Class>>File represented by ClassDiagram.Atrribute>>target;
One-To-Many relationship from ClassDiagram.Class>>Folder  to ClassDiagram.Class>>Set<File>;
Many-To-One relationship from ClassDiagram.Class>>ProgramExecution  to ClassDiagram.Class>>File represented by ClassDiagram.Atrribute>>applieson;
One-To-One relationship between ClassDiagram.Class>>Alarm  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>eventinfo;
Many-To-One relationship from ClassDiagram.Class>>SymbolicLink  to ClassDiagram.Class>>File represented by ClassDiagram.Atrribute>>target;
One-To-Many relationship from ClassDiagram.Class>>Account  to ClassDiagram.Class>>Set<Client>;
Many-To-One relationship from ClassDiagram.Class>>File  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>parent;
One-To-Many relationship from ClassDiagram.Class>>Folder  to ClassDiagram.Class>>Set<File>;
Many-To-One relationship from ClassDiagram.Class>>Client  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>SymbolicLink  to ClassDiagram.Class>>File represented by ClassDiagram.Atrribute>>target;
One-To-Many relationship from ClassDiagram.Class>>Folder  to ClassDiagram.Class>>Set<File>;
Many-To-One relationship from ClassDiagram.Class>>File  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>parent;
One-To-Many relationship from ClassDiagram.Class>>Team  to ClassDiagram.Class>>Set<Player>;
One-To-Many relationship from ClassDiagram.Class>>Deck  to ClassDiagram.Class>>Set<Card>;
Many-To-One relationship from ClassDiagram.Class>>Card  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>SortedSet<Ticket>;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Collection;
Many-To-One relationship from ClassDiagram.Class>>TwinkleToes  to ClassDiagram.Class>>B represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Bunny  to ClassDiagram.Class>>Set<PointyTooth>;
One-To-Many relationship from ClassDiagram.Class>>Bunny  to ClassDiagram.Class>>Set<TwinkleToes>;
Many-To-One relationship from ClassDiagram.Class>>PointyTooth  to ClassDiagram.Class>>B represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>PointyTooth  to ClassDiagram.Class>>B represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Bunny  to ClassDiagram.Class>>Set<PointyTooth>;
One-To-Many relationship from ClassDiagram.Class>>Bunny  to ClassDiagram.Class>>Set<TwinkleToes>;
Many-To-One relationship from ClassDiagram.Class>>TwinkleToes  to ClassDiagram.Class>>B represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Employeegroup  to ClassDiagram.Class>>List<Employee>;
Many-To-One relationship from ClassDiagram.Class>>Employeegroup  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Chaos  to ClassDiagram.Class>>Set<CasimirParticle>;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Group represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Attrset  to ClassDiagram.Class>>Set<Attrvalue>;
Many-To-One relationship from ClassDiagram.Class>>Discount  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>owner;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>firstname;
Many-To-One relationship from ClassDiagram.Class>>Policy  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>dep;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>emp;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>firstname;
Many-To-One relationship from ClassDiagram.Class>>Policy  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>firstname;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>firstname;
Many-To-One relationship from ClassDiagram.Class>>Employer  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>FinancialHistory  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>patient;
Many-To-One relationship from ClassDiagram.Class>>FinancialHistory  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>patient;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>emp;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<CustomerInventory>;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventory  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventory  to ClassDiagram.Class>>Item represented by ClassDiagram.Atrribute>>vehicle;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<CustomerInventory>;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventoryTwo  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>customer;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventoryTwo  to ClassDiagram.Class>>Item represented by ClassDiagram.Atrribute>>vehicle;
One-To-Many relationship from ClassDiagram.Class>>CustomerTwo  to ClassDiagram.Class>>List<CustomerInventoryTwo>;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventory  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventory  to ClassDiagram.Class>>Item represented by ClassDiagram.Atrribute>>vehicle;
One-To-One relationship between ClassDiagram.Class>>ExclusiveDependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>emp;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>//@joincolumn(name;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>patient;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>PersonInfo  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>OrderLine  to ClassDiagram.Class>>Order represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>OrderLine  to ClassDiagram.Class>>Product represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Bar  to ClassDiagram.Class>>foo represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Foo  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>emp;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Set<Dependent>;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Set<OrderLine>;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>emp;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>firstname;
One-To-Many relationship from ClassDiagram.Class>>Drawer  to ClassDiagram.Class>>List<Dress>;
One-To-Many relationship from ClassDiagram.Class>>Wardrobe  to ClassDiagram.Class>>List<Drawer>;
A: atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>A: atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>A: atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>A: atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>A: atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);
A: newspaper_A(newspaperID:newspaper [PK] #FK to newspaper,AID:A [PK] #FK to A);
A: training_A(trainingID:training [PK] #FK to training,AID:A [PK] #FK to A);
One-To-Many relationship from ClassDiagram.Class>>GenerationUser  to ClassDiagram.Class>>Map<Generation,GenerationGroup>;
Many-To-Many relationship between ClassDiagram.Class>>PressReleaseAgency  and ClassDiagram.Class>>A: pressreleaseagency_id(pressreleaseagency_id:PressReleaseAgency [PK] #FK to PressReleaseAgency,news_id:A [PK] #FK to A);
Many-To-One relationship from ClassDiagram.Class>>AddressEntry  to ClassDiagram.Class>>Address represented by ClassDiagram.Atrribute>>book;
Many-To-One relationship from ClassDiagram.Class>>AddressEntry  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>directory;
One-To-Many relationship from ClassDiagram.Class>>Painter  to ClassDiagram.Class>>Map<String,Painting>;
One-To-Many relationship from ClassDiagram.Class>>AddressBook  to ClassDiagram.Class>>Map<AddressEntryPk,AddressEntry>;
One-To-Many relationship from ClassDiagram.Class>>AddressBook  to ClassDiagram.Class>>Map<String,AddressEntry>;
One-To-Many relationship from ClassDiagram.Class>>AddressBook  to ClassDiagram.Class>>Map<AlphabeticalDirectory,AddressEntry>;
One-To-Many relationship from ClassDiagram.Class>>Software  to ClassDiagram.Class>>Map<String,Version>;
A: atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>A: atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>A: atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>A: atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>A: atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Map<SocialNetwork,SocialNetworkProfile>;
Many-To-One relationship from ClassDiagram.Class>>SocialNetworkProfile  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>ProductSqlServer  to ClassDiagram.Class>>Product represented by ClassDiagram.Atrribute>>product_idnf;
Many-To-One relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>>Product represented by ClassDiagram.Atrribute>>product_idnf;
Many-To-One relationship from ClassDiagram.Class>>FoodItem  to ClassDiagram.Class>>menu represented by ClassDiagram.Atrribute>>order_nbr;
Many-To-Many relationship between ClassDiagram.Class>>Cat  and ClassDiagram.Class>>A: tt(Cat_ID:Cat [PK] #FK to Cat,A_ID:A [PK] #FK to A);
One-To-Many relationship from ClassDiagram.Class>>ProgramManager  to ClassDiagram.Class>>Collection<Employee>;
Many-To-Many relationship between ClassDiagram.Class>>Woman  and ClassDiagram.Class>>A: man_woman(womanlastname:Woman [PK] #FK to Woman,maniselder:A [PK] #FK to A);
null: man_woman(womanlastname:Woman [PK] #FK to Woman,maniselder:A [PK] #FK to A);
Many-To-Many relationship between ClassDiagram.Class>>Employer  and ClassDiagram.Class>>C: employer_employee(emper_id:Employer [PK] #FK to Employer,empee_id:C [PK] #FK to C);
Many-To-Many relationship between ClassDiagram.Class>>Employer  and ClassDiagram.Class>>list: employer_employee(emper_id:Employer [PK] #FK to Employer,empee_id:C [PK] #FK to C);employer_contractor(employer_id:Employer [PK] #FK to Employer,contractor_id:list [PK] #FK to list);
C: store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);
Many-To-Many relationship between ClassDiagram.Class>>Store  and ClassDiagram.Class>>set<supplier>: store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);storesupplier(store:Store [PK] #FK to Store,supplier:set<supplier> [PK] #FK to set<supplier>);
C: store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);storesupplier(store:Store [PK] #FK to Store,supplier:set<supplier> [PK] #FK to set<supplier>);store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);
C: store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);
Item: store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);store_Item(storeID:store [PK] #FK to store,ItemID:Item [PK] #FK to Item);
Category: store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);store_Item(storeID:store [PK] #FK to store,ItemID:Item [PK] #FK to Item);store_Category(storeID:store [PK] #FK to store,CategoryID:Category [PK] #FK to Category);
C: store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);store_Item(storeID:store [PK] #FK to store,ItemID:Item [PK] #FK to Item);store_Category(storeID:store [PK] #FK to store,CategoryID:Category [PK] #FK to Category);store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);
C: item_C(itemID:item [PK] #FK to item,CID:C [PK] #FK to C);
C: category_C(categoryID:category [PK] #FK to category,CID:C [PK] #FK to C);
Item: city_Item(cityID:city [PK] #FK to city,ItemID:Item [PK] #FK to Item);
Many-To-One relationship from ClassDiagram.Class>>Building  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>name;
Permission: groupwithset_Permission(groupwithsetID:groupwithset [PK] #FK to groupwithset,PermissionID:Permission [PK] #FK to Permission);
Many-To-Many relationship between ClassDiagram.Class>>Friend  and ClassDiagram.Class>>D: friend2friend(from_fr:Friend [PK] #FK to Friend,to_fr:D [PK] #FK to D);
Many-To-Many relationship between ClassDiagram.Class>>InspectorPrefixes  and ClassDiagram.Class>>list<zone>: deserted_area(inspector_name:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:list<zone> [PK] #FK to list<zone>);
Many-To-Many relationship between ClassDiagram.Class>>InspectorPrefixes  and ClassDiagram.Class>>list<zone>: deserted_area(inspector_name:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:list<zone> [PK] #FK to list<zone>);inspector_prefixes_areas(inspector_id:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:list<zone> [PK] #FK to list<zone>);
C: group_C(groupID:group [PK] #FK to group,CID:C [PK] #FK to C);
C: screen_C(screenID:screen [PK] #FK to screen,CID:C [PK] #FK to C);
Many-To-One relationship from ClassDiagram.Class>>TvOwner  to ClassDiagram.Class>>tv represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Importer  and ClassDiagram.Class>>A: car_importer(Importer_ID:Importer [PK] #FK to Importer,A_ID:A [PK] #FK to A);
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>List<Asset>;
One-To-Many relationship from ClassDiagram.Class>>Box  to ClassDiagram.Class>>List<Item>;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Set<Child>;
One-To-Many relationship from ClassDiagram.Class>>Organisation  to ClassDiagram.Class>>Set<OrganisationUser>;
Many-To-One relationship from ClassDiagram.Class>>Asset  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>List<Comment>;
One-To-Many relationship from ClassDiagram.Class>>Troop  to ClassDiagram.Class>>Set<Soldier>;
One-To-Many relationship from ClassDiagram.Class>>BankAccount  to ClassDiagram.Class>>List<Transaction>;
One-To-Many relationship from ClassDiagram.Class>>City  to ClassDiagram.Class>>List<Street>;
One-To-Many relationship from ClassDiagram.Class>>City  to ClassDiagram.Class>>List<Street>;
One-To-Many relationship from ClassDiagram.Class>>Forum  to ClassDiagram.Class>>List<Comment>;
One-To-Many relationship from ClassDiagram.Class>>Forum  to ClassDiagram.Class>>List<User>;
One-To-Many relationship from ClassDiagram.Class>>B  to ClassDiagram.Class>>java.util.List<C>;
One-To-Many relationship from ClassDiagram.Class>>Trainer  to ClassDiagram.Class>>Set<Tiger>;
One-To-Many relationship from ClassDiagram.Class>>Trainer  to ClassDiagram.Class>>Set<Monkey>;
Many-To-One relationship from ClassDiagram.Class>>Model  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Politician  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>party;
One-To-Many relationship from ClassDiagram.Class>>PoliticalParty  to ClassDiagram.Class>>Set<Politician>;
One-To-Many relationship from ClassDiagram.Class>>Zoo  to ClassDiagram.Class>>Set<Tiger>;
One-To-Many relationship from ClassDiagram.Class>>Zoo  to ClassDiagram.Class>>Set<Monkey>;
One-To-Many relationship from ClassDiagram.Class>>Zoo  to ClassDiagram.Class>>Set<Visitor>;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>java.util.List<B>;
Many-To-One relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>ismale;
Many-To-One relationship from ClassDiagram.Class>>Transaction  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>account;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>List<OrderItem>;
Many-To-One relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>B represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Car  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>region_code;
Many-To-Many relationship between ClassDiagram.Class>>House  and ClassDiagram.Class>>A: address(address:House [PK] #FK to House,name:A [PK] #FK to A);
One-To-Many relationship from ClassDiagram.Class>>Luggage  to ClassDiagram.Class>>Set<Clothes>;
One-To-Many relationship from ClassDiagram.Class>>Rambler  to ClassDiagram.Class>>Set<Bag>;
Many-To-One relationship from ClassDiagram.Class>>Bag  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>fld_name;
Many-To-One relationship from ClassDiagram.Class>>WarehouseItem  to ClassDiagram.Class>>Item represented by ClassDiagram.Atrribute>>vendor_id;
One-To-Many relationship from ClassDiagram.Class>>Customer4  to ClassDiagram.Class>>Set<Order>;
One-To-Many relationship from ClassDiagram.Class>>Customer5  to ClassDiagram.Class>>Set<Order>;
Many-To-One relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Country represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Customer3  to ClassDiagram.Class>>Set<Order>;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Set<Order>;
Many-To-One relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Order represented by ClassDiagram.Atrribute>>last;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Set<SupportTickets>;
One-To-Many relationship from ClassDiagram.Class>>Customer2  to ClassDiagram.Class>>Set<Order>;
Many-To-One relationship from ClassDiagram.Class>>Human  to ClassDiagram.Class>>B represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Club  to ClassDiagram.Class>>Set<Human>;
Many-To-Many relationship between ClassDiagram.Class>>Bug  and ClassDiagram.Class>>Category: `bug_category`(Bug_ID:Bug [PK] #FK to Bug,Category_ID:Category [PK] #FK to Category);
One-To-Many relationship from ClassDiagram.Class>>UserImpl  to ClassDiagram.Class>>Collection<Contact>;
Many-To-One relationship from ClassDiagram.Class>>Car  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>owner;
One-To-Many relationship from ClassDiagram.Class>>Lotz  to ClassDiagram.Class>>List<Carz>;
Many-To-One relationship from ClassDiagram.Class>>Deal  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>userid;
Many-To-One relationship from ClassDiagram.Class>>Deal  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>userid;
Many-To-One relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>ismale;
One-To-One relationship between ClassDiagram.Class>>BiggestForest  to ClassDiagram.Class>>Forest represented by ClassDiagram.Atrribute>>type;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Set<OrderLine>;
Many-To-One relationship from ClassDiagram.Class>>DistrictUser  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>ctvusers_key;
Many-To-One relationship from ClassDiagram.Class>>WarehouseItem  to ClassDiagram.Class>>Item represented by ClassDiagram.Atrribute>>vendor_id;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<DistrictUser>;
One-To-Many relationship from ClassDiagram.Class>>ForestType  to ClassDiagram.Class>>Set<TreeType>;
One-To-One relationship between ClassDiagram.Class>>ForestType  to ClassDiagram.Class>>B represented by ClassDiagram.Atrribute>>biggestrepresentative;
Many-To-One relationship from ClassDiagram.Class>>Carz  to ClassDiagram.Class>>lotz represented by ClassDiagram.Atrribute>>loc_code;
Many-To-One relationship from ClassDiagram.Class>>Node  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>Lens  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>name;
One-To-Many relationship from ClassDiagram.Class>>Frame  to ClassDiagram.Class>>Set<Lens>;
Many-To-Many relationship between ClassDiagram.Class>>Passport  and ClassDiagram.Class>>A: passport_stamp(Passport_ID:Passport [PK] #FK to Passport,A_ID:A [PK] #FK to A);
Many-To-Many relationship between ClassDiagram.Class>>Passport  and ClassDiagram.Class>>A: passport_stamp(Passport_ID:Passport [PK] #FK to Passport,A_ID:A [PK] #FK to A);passport_visastamp(Passport_ID:Passport [PK] #FK to Passport,A_ID:A [PK] #FK to A);
One-To-Many relationship from ClassDiagram.Class>>Branch  to ClassDiagram.Class>>Set<Leaf>;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>Collection<Stay>;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>Collection<Stay>;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>Collection<Stay>;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<Stay>;
Many-To-One relationship from ClassDiagram.Class>>Leaf  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>PrimeMinister  to ClassDiagram.Class>>Set<Government>;
D: sky_D(skyID:sky [PK] #FK to sky,DID:D [PK] #FK to D);
Many-To-One relationship from ClassDiagram.Class>>Sky  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>maincloud;
One-To-Many relationship from ClassDiagram.Class>>Manufacturer  to ClassDiagram.Class>>Set<Model>;
Many-To-One relationship from ClassDiagram.Class>>Life  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>owner;
Many-To-One relationship from ClassDiagram.Class>>Life  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>owner;
Many-To-Many relationship between ClassDiagram.Class>>SysUserOrm  and ClassDiagram.Class>>Group: sys_groups_users(userid:SysUserOrm [PK] #FK to SysUserOrm,groupid:Group [PK] #FK to Group);
One-To-Many relationship from ClassDiagram.Class>>Country  to ClassDiagram.Class>>List<State>;
Many-To-One relationship from ClassDiagram.Class>>Tooth  to ClassDiagram.Class>>tooth represented by ClassDiagram.Atrribute>>leftneighbour;
Many-To-One relationship from ClassDiagram.Class>>Tooth  to ClassDiagram.Class>>tooth represented by ClassDiagram.Atrribute>>rightneighbour;
Many-To-One relationship from ClassDiagram.Class>>Tooth  to ClassDiagram.Class>>mouth represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Mouth  to ClassDiagram.Class>>Collection<Tooth>;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Set<Child>;
One-To-One relationship between ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Child represented by ClassDiagram.Atrribute>>/***/default;
Many-To-One relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>/***/;
One-To-Many relationship from ClassDiagram.Class>>Portal  to ClassDiagram.Class>>Set<Window>;
B: bookstore_B(bookstoreID:bookstore [PK] #FK to bookstore,BID:B [PK] #FK to B);
One-To-Many relationship from ClassDiagram.Class>>Author  to ClassDiagram.Class>>Set<Book>;
One-To-Many relationship from ClassDiagram.Class>>Publisher  to ClassDiagram.Class>>Set<Author>;
One-To-One relationship between ClassDiagram.Class>>Y  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Preisregelung  to ClassDiagram.Class>>Model represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>X  to ClassDiagram.Class>>Model represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Tranche  to ClassDiagram.Class>>Model represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Tranche  to ClassDiagram.Class>>y represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>List<Tranche>;
One-To-One relationship between ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>preisregelung represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>x represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Tranche  to ClassDiagram.Class>>Model represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Preisregelung  to ClassDiagram.Class>>Model represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>List<Tranche>;
One-To-One relationship between ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>preisregelung represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Feature  to ClassDiagram.Class>>Product represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>>List<Feature>;
Many-To-Many relationship between ClassDiagram.Class>>Alias  and ClassDiagram.Class>>A: character_alias(Alias_ID:Alias [PK] #FK to Alias,A_ID:A [PK] #FK to A);
Many-To-One relationship from ClassDiagram.Class>>MultipleCollectionRefEntity1  to ClassDiagram.Class>>C represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>MultipleCollectionRefEntity2  to ClassDiagram.Class>>C represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>MultipleCollectionEntity  to ClassDiagram.Class>>List<MultipleCollectionRefEntity1>;
One-To-Many relationship from ClassDiagram.Class>>MultipleCollectionEntity  to ClassDiagram.Class>>List<MultipleCollectionRefEntity2>;
Many-To-One relationship from ClassDiagram.Class>>LazyAbstractEntityReference  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>entity;
One-To-Many relationship from ClassDiagram.Class>>EmployeeGroup  to ClassDiagram.Class>>List<Employee>;
Many-To-Many relationship between ClassDiagram.Class>>ManyToManyOwner  and ClassDiagram.Class>>A: none(none:ManyToManyOwner [PK] #FK to ManyToManyOwner,none:A [PK] #FK to A);
Role: user_Role(userID:user [PK] #FK to user,RoleID:Role [PK] #FK to Role);
Many-To-One relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>house represented by ClassDiagram.Atrribute>>//theseexistsolelyforhhh-8464toensurethatthevariousformsofquotingarenormalizedinternally//(usingbackticks),includingthejoincolumn.withoutnormalization,themappingwillthrowa//duplicatemappingexception.;
Many-To-One relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>house represented by ClassDiagram.Atrribute>>//testukonfkw/globalquoting--seehhh-8638//thismustbeinitialized.severaldbsdonotallowmultiplenullvaluesinauniquecolumn.3;
Many-To-One relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>salesperson;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>manager;
One-To-One relationship between ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Child represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>List<Child>;
Item: category_Item(categoryID:category [PK] #FK to category,ItemID:Item [PK] #FK to Item);
Many-To-One relationship from ClassDiagram.Class>>Language  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>fallback;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<Order>;
D: customer_D(customerID:customer [PK] #FK to customer,DID:D [PK] #FK to D);
Many-To-One relationship from ClassDiagram.Class>>Product2  to ClassDiagram.Class>>Category represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>List<Product2>;
Many-To-One relationship from ClassDiagram.Class>>Contact  to ClassDiagram.Class>>D represented by ClassDiagram.Atrribute>>GeneratedName;
C: farm_C(farmID:farm [PK] #FK to farm,CID:C [PK] #FK to C);
Many-To-One relationship from ClassDiagram.Class>>TrtPanel  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Entity1  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Set<GrandChild>;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Set<Child>;
Many-To-One relationship from ClassDiagram.Class>>Entity2  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>title represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Company  to ClassDiagram.Class>>List<User>;
One-To-Many relationship from ClassDiagram.Class>>Store  to ClassDiagram.Class>>List<Inventory>;
Many-To-One relationship from ClassDiagram.Class>>Contractor  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>//illustratestheproblematicsituationdescribedinhhh-8330reportsto;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>A represented by ClassDiagram.Atrribute>>//illustratestheproblematicsituationdescribedinhhh-8980belongsto;
Many-To-One relationship from ClassDiagram.Class>>DestinationEntity  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>from;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Set<Item>;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<Order>;
Many-To-One relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>GeneratedName;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Step   Descriminator>>type: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Principal  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Principal  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Animal  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Drill   Descriminator>>DRILL_TYPE: String ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Hardware   Descriminator>>DeviceType: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Child  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Vehicule  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Boat  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>ClassA  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>B  Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>File  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Customer  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Pool  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Clothing  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Asset  SubClass>>contractor SubClass>>employee Inheritance based on JOINED strategy (DISTINCTION): ROOT>>File  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>EventInformation  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Person  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>File  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Vegetable  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Plane   Descriminator>>planetype: String ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Machine  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Component  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Employee  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Inspector  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Employee  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Comment   Descriminator>>DTYPE: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Asset  SubClass>>contractor SubClass>>employee Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Person  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Car  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Animal  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Animal  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Mammal  Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Animal  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>AImpl  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>B  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Polygon  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>RootEntity  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>ParentEntity  SubClass>>WealthyPerson SubClass>>User SubClass>>Client SubClass>>OrganisationUser SubClass>>User SubClass>>Customer SubClass>>Employee SubClass>>Employee Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Super  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Person   Descriminator>>person_type: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Person  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>User  ;
