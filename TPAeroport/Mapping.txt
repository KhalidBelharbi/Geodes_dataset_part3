ClassDiagram.Class>> Aeroport =>=>=> RelationalSchema.Table>> aeroport;
ClassDiagram.Class>> Client =>=>=> RelationalSchema.Table>> client;
ClassDiagram.Class>> CompagnieAerienne =>=>=> RelationalSchema.Table>> compagnieaerienne;
ClassDiagram.Class>> Billet =>=>=> RelationalSchema.Table>> billet;
ClassDiagram.Class>> Adresse =>=>=> RelationalSchema.Table>> adresse;
ClassDiagram.Class>> Ville =>=>=> RelationalSchema.Table>> ville;
ClassDiagram.Class>> Particulier =>=>=> RelationalSchema.Table>> particulier;
ClassDiagram.Class>> Passager =>=>=> RelationalSchema.Table>> passager;
ClassDiagram.Class>> Vol =>=>=> RelationalSchema.Table>> vol;
ClassDiagram.Class>> Entreprise =>=>=> RelationalSchema.Table>> entreprise;
ClassDiagram.Class>> CompagnieAerienneVol =>=>=> RelationalSchema.Table>> compagnieaeriennevol;
ClassDiagram.Class>> Reservation =>=>=> RelationalSchema.Table>> reservation;
ClassDiagram.Attribut>> Aeroport.id:long =>=>=> RelationalSchema.Column>> aeroport.id PRIMARY KEY;
ClassDiagram.Attribut>> Aeroport.code:Integer =>=>=> RelationalSchema.Column>> aeroport.code;
ClassDiagram.Attribut>> Aeroport.nom:String =>=>=> RelationalSchema.Column>> aeroport.nom;
ClassDiagram.Attribut>> Client.id:Long =>=>=> RelationalSchema.Column>> client.id PRIMARY KEY;
ClassDiagram.Attribut>> Client.version:int =>=>=> RelationalSchema.Column>> client.version;
ClassDiagram.Attribut>> Client.nom:String =>=>=> RelationalSchema.Column>> client.nom;
ClassDiagram.Attribut>> CompagnieAerienne.id:long =>=>=> RelationalSchema.Column>> compagnieaerienne.id PRIMARY KEY;
ClassDiagram.Attribut>> CompagnieAerienne.code:String =>=>=> RelationalSchema.Column>> compagnieaerienne.code;
ClassDiagram.Attribut>> CompagnieAerienne.nom:String =>=>=> RelationalSchema.Column>> compagnieaerienne.nom;
ClassDiagram.Attribut>> Billet.id:Long =>=>=> RelationalSchema.Column>> billet.id PRIMARY KEY;
ClassDiagram.Attribut>> Billet.version:int =>=>=> RelationalSchema.Column>> billet.version;
ClassDiagram.Attribut>> Billet.numeroplace:String =>=>=> RelationalSchema.Column>> billet.numeroplace;
ClassDiagram.Attribut>> Billet.classe:String =>=>=> RelationalSchema.Column>> billet.classe;
ClassDiagram.Attribut>> Billet.prix:float =>=>=> RelationalSchema.Column>> billet.prix;
ClassDiagram.Attribut>> Adresse.id:Long =>=>=> RelationalSchema.Column>> adresse.id PRIMARY KEY;
ClassDiagram.Attribut>> Adresse.version:int =>=>=> RelationalSchema.Column>> adresse.version;
ClassDiagram.Attribut>> Adresse.rue:String =>=>=> RelationalSchema.Column>> adresse.rue;
ClassDiagram.Attribut>> Adresse.complement:String =>=>=> RelationalSchema.Column>> adresse.complement;
ClassDiagram.Attribut>> Adresse.codepostal:String =>=>=> RelationalSchema.Column>> adresse.codepostal;
ClassDiagram.Attribut>> Adresse.ville:String =>=>=> RelationalSchema.Column>> adresse.ville;
ClassDiagram.Attribut>> Adresse.pays:String =>=>=> RelationalSchema.Column>> adresse.pays;
ClassDiagram.Attribut>> Ville.id:long =>=>=> RelationalSchema.Column>> ville.id PRIMARY KEY;
ClassDiagram.Attribut>> Ville.nom:String =>=>=> RelationalSchema.Column>> ville.nom;
ClassDiagram.Attribut>> Particulier.prenom:String =>=>=> RelationalSchema.Column>> particulier.prenom;
ClassDiagram.Attribut>> Passager.id:Long =>=>=> RelationalSchema.Column>> passager.id PRIMARY KEY;
ClassDiagram.Attribut>> Passager.version:int =>=>=> RelationalSchema.Column>> passager.version;
ClassDiagram.Attribut>> Passager.nom:String =>=>=> RelationalSchema.Column>> passager.nom;
ClassDiagram.Attribut>> Passager.prenom:String =>=>=> RelationalSchema.Column>> passager.prenom;
ClassDiagram.Attribut>> Passager.numeroidentite:String =>=>=> RelationalSchema.Column>> passager.numeroidentite;
ClassDiagram.Attribut>> Passager.GeneratedName:TypeIdentite =>=>=> RelationalSchema.Column>> passager.GeneratedName;
ClassDiagram.Attribut>> Vol.id:Long =>=>=> RelationalSchema.Column>> vol.id PRIMARY KEY;
ClassDiagram.Attribut>> Vol.dtdepart:Date =>=>=> RelationalSchema.Column>> vol.dtdepart;
ClassDiagram.Attribut>> Vol.dtarrivee:Date =>=>=> RelationalSchema.Column>> vol.dtarrivee;
ClassDiagram.Attribut>> Vol.statut:StatutVol =>=>=> RelationalSchema.Column>> vol.statut;
ClassDiagram.Attribut>> Vol.nbplacedispo:int =>=>=> RelationalSchema.Column>> vol.nbplacedispo;
ClassDiagram.Attribut>> Entreprise.siret:String =>=>=> RelationalSchema.Column>> entreprise.siret;
ClassDiagram.Attribut>> Entreprise.numerotva:String =>=>=> RelationalSchema.Column>> entreprise.numerotva;
ClassDiagram.Attribut>> Entreprise.GeneratedName:StatutJuridique =>=>=> RelationalSchema.Column>> entreprise.GeneratedName;
ClassDiagram.Attribut>> CompagnieAerienneVol.id:long =>=>=> RelationalSchema.Column>> compagnieaeriennevol.id PRIMARY KEY;
ClassDiagram.Attribut>> CompagnieAerienneVol.numerovol:String =>=>=> RelationalSchema.Column>> compagnieaeriennevol.numerovol;
ClassDiagram.Attribut>> Reservation.numero:Integer =>=>=> RelationalSchema.Column>> reservation.numero PRIMARY KEY;
ClassDiagram.Attribut>> Reservation.version:int =>=>=> RelationalSchema.Column>> reservation.version;
ClassDiagram.Attribut>> Reservation.dtreservtion:Date =>=>=> RelationalSchema.Column>> reservation.dtreservtion;
ClassDiagram.Attribut>> Reservation.GeneratedName:StatutReservation =>=>=> RelationalSchema.Column>> reservation.GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Aeroport  and ClassDiagram.Class>>list<ville>: ville_aeroport(aeroport_id:Aeroport [PK] #FK to Aeroport,ville_id:list<ville> [PK] #FK to list<ville>);
One-To-Many relationship from ClassDiagram.Class>>Client  to ClassDiagram.Class>>List<Adresse>;
One-To-Many relationship from ClassDiagram.Class>>Client  to ClassDiagram.Class>>List<Reservation>;
One-To-Many relationship from ClassDiagram.Class>>CompagnieAerienne  to ClassDiagram.Class>>List<CompagnieAerienneVol>;
Many-To-One relationship from ClassDiagram.Class>>Billet  to ClassDiagram.Class>>reservation represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Billet  to ClassDiagram.Class>>vol represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Adresse  to ClassDiagram.Class>>client represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Passager  to ClassDiagram.Class>>reservation represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Vol  to ClassDiagram.Class>>List<Billet>;
One-To-Many relationship from ClassDiagram.Class>>Vol  to ClassDiagram.Class>>List<CompagnieAerienneVol>;
Many-To-One relationship from ClassDiagram.Class>>Vol  to ClassDiagram.Class>>aeroport represented by ClassDiagram.Atrribute>>depart;
Many-To-One relationship from ClassDiagram.Class>>Vol  to ClassDiagram.Class>>aeroport represented by ClassDiagram.Atrribute>>arrivee;
Many-To-One relationship from ClassDiagram.Class>>CompagnieAerienneVol  to ClassDiagram.Class>>compagnieaerienne represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CompagnieAerienneVol  to ClassDiagram.Class>>vol represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Reservation  to ClassDiagram.Class>>passager represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Reservation  to ClassDiagram.Class>>List<Billet>;
Many-To-One relationship from ClassDiagram.Class>>Reservation  to ClassDiagram.Class>>client represented by ClassDiagram.Atrribute>>GeneratedName;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Client   Descriminator>>type: String ;
