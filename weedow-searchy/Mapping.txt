ClassDiagram.Class>> Feature =>=>=> RelationalSchema.Table>> feature;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Task =>=>=> RelationalSchema.Table>> task;
ClassDiagram.Class>> Vehicle =>=>=> RelationalSchema.Table>> vehicle;
ClassDiagram.Class>> Job =>=>=> RelationalSchema.Table>> job;
ClassDiagram.Attribut>> Feature.name:String =>=>=> RelationalSchema.Column>> feature.name;
ClassDiagram.Attribut>> Feature.description:String =>=>=> RelationalSchema.Column>> feature.description;
ClassDiagram.Attribut>> Feature.metadata:Map<String,String> =>=>=> RelationalSchema.Column>> feature.metadata;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname;
ClassDiagram.Attribut>> Person.email:String =>=>=> RelationalSchema.Column>> person.email;
ClassDiagram.Attribut>> Person.birthday:LocalDateTime =>=>=> RelationalSchema.Column>> person.birthday;
ClassDiagram.Attribut>> Person.height:Double =>=>=> RelationalSchema.Column>> person.height;
ClassDiagram.Attribut>> Person.weight:Double =>=>=> RelationalSchema.Column>> person.weight;
ClassDiagram.Attribut>> Person.nicknames:Set<String> =>=>=> RelationalSchema.Column>> person.nicknames;
ClassDiagram.Attribut>> Person.phonenumbers:Set<String> =>=>=> RelationalSchema.Column>> person.phonenumbers;
ClassDiagram.Attribut>> Person.characteristics:Map<String,String> =>=>=> RelationalSchema.Column>> person.characteristics;
ClassDiagram.Attribut>> Person.tasks:Map<Task,LocalDateTime> =>=>=> RelationalSchema.Column>> person.tasks;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.zipcode:String =>=>=> RelationalSchema.Column>> address.zipcode;
ClassDiagram.Attribut>> Address.country:CountryCode =>=>=> RelationalSchema.Column>> address.country;
ClassDiagram.Attribut>> Task.name:String =>=>=> RelationalSchema.Column>> task.name;
ClassDiagram.Attribut>> Task.description:String =>=>=> RelationalSchema.Column>> task.description;
ClassDiagram.Attribut>> Vehicle.GeneratedName:VehicleType =>=>=> RelationalSchema.Column>> vehicle.GeneratedName;
ClassDiagram.Attribut>> Vehicle.brand:String =>=>=> RelationalSchema.Column>> vehicle.brand;
ClassDiagram.Attribut>> Vehicle.model:String =>=>=> RelationalSchema.Column>> vehicle.model;
ClassDiagram.Attribut>> Job.active:boolean =>=>=> RelationalSchema.Column>> job.active;
ClassDiagram.Attribut>> Job.title:String =>=>=> RelationalSchema.Column>> job.title;
ClassDiagram.Attribut>> Job.company:String =>=>=> RelationalSchema.Column>> job.company;
ClassDiagram.Attribut>> Job.salary:int =>=>=> RelationalSchema.Column>> job.salary;
ClassDiagram.Attribut>> Job.hiredate:OffsetDateTime =>=>=> RelationalSchema.Column>> job.hiredate;
Many-To-Many relationship between ClassDiagram.Class>>Person  and ClassDiagram.Class>>set<address>: person_address(person_id:Person [PK] #FK to Person,address_id:set<address> [PK] #FK to set<address>);
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>job represented by ClassDiagram.Atrribute>>entity;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>Set<Vehicle>;
Many-To-One relationship from ClassDiagram.Class>>Vehicle  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Vehicle  to ClassDiagram.Class>>Map<String,Feature>;
One-To-One relationship between ClassDiagram.Class>>Job  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
